// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module moy (
        ap_clk,
        ap_rst,
        somme,
        taille,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [31:0] somme;
input  [31:0] taille;
output  [31:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] somme_read_reg_63;
reg   [31:0] somme_read_reg_63_pp0_iter1_reg;
reg   [31:0] somme_read_reg_63_pp0_iter2_reg;
reg   [31:0] somme_read_reg_63_pp0_iter3_reg;
reg   [31:0] somme_read_reg_63_pp0_iter4_reg;
reg   [31:0] somme_read_reg_63_pp0_iter5_reg;
wire   [0:0] icmp_ln94_fu_52_p2;
reg   [0:0] icmp_ln94_reg_68;
reg   [0:0] icmp_ln94_reg_68_pp0_iter1_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter2_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter3_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter4_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter5_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter6_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter7_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter8_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter9_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter10_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter11_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter12_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter13_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter14_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter15_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter16_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter17_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter18_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter19_reg;
reg   [0:0] icmp_ln94_reg_68_pp0_iter20_reg;
wire   [31:0] grp_fu_48_p1;
reg   [31:0] tmp_reg_72;
reg   [31:0] ap_phi_mux_p_0_phi_fu_36_p4;
wire   [31:0] grp_fu_43_p2;
reg   [31:0] ap_phi_reg_pp0_iter21_p_0_reg_32;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter1_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter2_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter3_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter4_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter5_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter6_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter7_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter8_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter9_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter10_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter11_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter12_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter13_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter14_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter15_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter16_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter17_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter18_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter19_p_0_reg_32;
reg   [31:0] ap_phi_reg_pp0_iter20_p_0_reg_32;
reg   [31:0] somme_int_reg;
reg   [31:0] taille_int_reg;

Kmeans_fdiv_32ns_32ns_32_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_fdiv_32ns_32ns_32_16_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(somme_read_reg_63_pp0_iter5_reg),
    .din1(tmp_reg_72),
    .ce(1'b1),
    .dout(grp_fu_43_p2)
);

Kmeans_sitofp_32ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_sitofp_32ns_32_6_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(taille_int_reg),
    .ce(1'b1),
    .dout(grp_fu_48_p1)
);

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((icmp_ln94_fu_52_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_p_0_reg_32 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_0_reg_32 <= ap_phi_reg_pp0_iter0_p_0_reg_32;
        end
    end
end

always @ (posedge ap_clk) begin
    somme_int_reg <= somme;
end

always @ (posedge ap_clk) begin
    taille_int_reg <= taille;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_phi_reg_pp0_iter10_p_0_reg_32 <= ap_phi_reg_pp0_iter9_p_0_reg_32;
        ap_phi_reg_pp0_iter11_p_0_reg_32 <= ap_phi_reg_pp0_iter10_p_0_reg_32;
        ap_phi_reg_pp0_iter12_p_0_reg_32 <= ap_phi_reg_pp0_iter11_p_0_reg_32;
        ap_phi_reg_pp0_iter13_p_0_reg_32 <= ap_phi_reg_pp0_iter12_p_0_reg_32;
        ap_phi_reg_pp0_iter14_p_0_reg_32 <= ap_phi_reg_pp0_iter13_p_0_reg_32;
        ap_phi_reg_pp0_iter15_p_0_reg_32 <= ap_phi_reg_pp0_iter14_p_0_reg_32;
        ap_phi_reg_pp0_iter16_p_0_reg_32 <= ap_phi_reg_pp0_iter15_p_0_reg_32;
        ap_phi_reg_pp0_iter17_p_0_reg_32 <= ap_phi_reg_pp0_iter16_p_0_reg_32;
        ap_phi_reg_pp0_iter18_p_0_reg_32 <= ap_phi_reg_pp0_iter17_p_0_reg_32;
        ap_phi_reg_pp0_iter19_p_0_reg_32 <= ap_phi_reg_pp0_iter18_p_0_reg_32;
        ap_phi_reg_pp0_iter20_p_0_reg_32 <= ap_phi_reg_pp0_iter19_p_0_reg_32;
        ap_phi_reg_pp0_iter21_p_0_reg_32 <= ap_phi_reg_pp0_iter20_p_0_reg_32;
        ap_phi_reg_pp0_iter2_p_0_reg_32 <= ap_phi_reg_pp0_iter1_p_0_reg_32;
        ap_phi_reg_pp0_iter3_p_0_reg_32 <= ap_phi_reg_pp0_iter2_p_0_reg_32;
        ap_phi_reg_pp0_iter4_p_0_reg_32 <= ap_phi_reg_pp0_iter3_p_0_reg_32;
        ap_phi_reg_pp0_iter5_p_0_reg_32 <= ap_phi_reg_pp0_iter4_p_0_reg_32;
        ap_phi_reg_pp0_iter6_p_0_reg_32 <= ap_phi_reg_pp0_iter5_p_0_reg_32;
        ap_phi_reg_pp0_iter7_p_0_reg_32 <= ap_phi_reg_pp0_iter6_p_0_reg_32;
        ap_phi_reg_pp0_iter8_p_0_reg_32 <= ap_phi_reg_pp0_iter7_p_0_reg_32;
        ap_phi_reg_pp0_iter9_p_0_reg_32 <= ap_phi_reg_pp0_iter8_p_0_reg_32;
        icmp_ln94_reg_68 <= icmp_ln94_fu_52_p2;
        icmp_ln94_reg_68_pp0_iter10_reg <= icmp_ln94_reg_68_pp0_iter9_reg;
        icmp_ln94_reg_68_pp0_iter11_reg <= icmp_ln94_reg_68_pp0_iter10_reg;
        icmp_ln94_reg_68_pp0_iter12_reg <= icmp_ln94_reg_68_pp0_iter11_reg;
        icmp_ln94_reg_68_pp0_iter13_reg <= icmp_ln94_reg_68_pp0_iter12_reg;
        icmp_ln94_reg_68_pp0_iter14_reg <= icmp_ln94_reg_68_pp0_iter13_reg;
        icmp_ln94_reg_68_pp0_iter15_reg <= icmp_ln94_reg_68_pp0_iter14_reg;
        icmp_ln94_reg_68_pp0_iter16_reg <= icmp_ln94_reg_68_pp0_iter15_reg;
        icmp_ln94_reg_68_pp0_iter17_reg <= icmp_ln94_reg_68_pp0_iter16_reg;
        icmp_ln94_reg_68_pp0_iter18_reg <= icmp_ln94_reg_68_pp0_iter17_reg;
        icmp_ln94_reg_68_pp0_iter19_reg <= icmp_ln94_reg_68_pp0_iter18_reg;
        icmp_ln94_reg_68_pp0_iter1_reg <= icmp_ln94_reg_68;
        icmp_ln94_reg_68_pp0_iter20_reg <= icmp_ln94_reg_68_pp0_iter19_reg;
        icmp_ln94_reg_68_pp0_iter2_reg <= icmp_ln94_reg_68_pp0_iter1_reg;
        icmp_ln94_reg_68_pp0_iter3_reg <= icmp_ln94_reg_68_pp0_iter2_reg;
        icmp_ln94_reg_68_pp0_iter4_reg <= icmp_ln94_reg_68_pp0_iter3_reg;
        icmp_ln94_reg_68_pp0_iter5_reg <= icmp_ln94_reg_68_pp0_iter4_reg;
        icmp_ln94_reg_68_pp0_iter6_reg <= icmp_ln94_reg_68_pp0_iter5_reg;
        icmp_ln94_reg_68_pp0_iter7_reg <= icmp_ln94_reg_68_pp0_iter6_reg;
        icmp_ln94_reg_68_pp0_iter8_reg <= icmp_ln94_reg_68_pp0_iter7_reg;
        icmp_ln94_reg_68_pp0_iter9_reg <= icmp_ln94_reg_68_pp0_iter8_reg;
        somme_read_reg_63 <= somme_int_reg;
        somme_read_reg_63_pp0_iter1_reg <= somme_read_reg_63;
        somme_read_reg_63_pp0_iter2_reg <= somme_read_reg_63_pp0_iter1_reg;
        somme_read_reg_63_pp0_iter3_reg <= somme_read_reg_63_pp0_iter2_reg;
        somme_read_reg_63_pp0_iter4_reg <= somme_read_reg_63_pp0_iter3_reg;
        somme_read_reg_63_pp0_iter5_reg <= somme_read_reg_63_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_reg_68_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_72 <= grp_fu_48_p1;
    end
end

always @ (*) begin
    if (((icmp_ln94_reg_68_pp0_iter20_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_0_phi_fu_36_p4 = grp_fu_43_p2;
    end else begin
        ap_phi_mux_p_0_phi_fu_36_p4 = ap_phi_reg_pp0_iter21_p_0_reg_32;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_phi_reg_pp0_iter0_p_0_reg_32 = 'bx;

assign ap_return = ap_phi_mux_p_0_phi_fu_36_p4;

assign icmp_ln94_fu_52_p2 = ((taille_int_reg == 32'd0) ? 1'b1 : 1'b0);

endmodule //moy
