// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module distance (
        ap_clk,
        ap_rst,
        x1,
        y1,
        x2,
        y2,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [31:0] x1;
input  [31:0] y1;
input  [31:0] x2;
input  [31:0] y2;
output  [31:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] grp_fu_48_p2;
reg   [31:0] tmp_reg_133;
wire   [31:0] grp_fu_54_p2;
reg   [31:0] tmp_3_reg_138;
wire   [62:0] trunc_ln368_fu_77_p1;
reg   [62:0] trunc_ln368_reg_143;
wire   [62:0] trunc_ln368_1_fu_85_p1;
reg   [62:0] trunc_ln368_1_reg_148;
wire   [63:0] grp_fu_69_p2;
reg   [63:0] tmp_6_reg_163;
wire    ap_block_pp0_stage0;
wire   [63:0] grp_fu_69_p0;
wire   [63:0] grp_fu_69_p1;
wire   [63:0] grp_fu_63_p1;
wire   [63:0] p_Val2_s_fu_73_p1;
wire   [63:0] grp_fu_66_p1;
wire   [63:0] p_Val2_1_fu_81_p1;
wire   [63:0] p_Result_s_fu_89_p3;
wire   [63:0] p_Result_1_fu_101_p3;
wire   [31:0] grp_fu_60_p1;
reg   [31:0] x1_int_reg;
reg   [31:0] y1_int_reg;
reg   [31:0] x2_int_reg;
reg   [31:0] y2_int_reg;

Kmeans_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_fsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x1_int_reg),
    .din1(x2_int_reg),
    .ce(1'b1),
    .dout(grp_fu_48_p2)
);

Kmeans_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_fsub_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y1_int_reg),
    .din1(y2_int_reg),
    .ce(1'b1),
    .dout(grp_fu_54_p2)
);

Kmeans_fptrunc_64ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
Kmeans_fptrunc_64ns_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_163),
    .ce(1'b1),
    .dout(grp_fu_60_p1)
);

Kmeans_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Kmeans_fpext_32ns_64_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_133),
    .ce(1'b1),
    .dout(grp_fu_63_p1)
);

Kmeans_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Kmeans_fpext_32ns_64_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_138),
    .ce(1'b1),
    .dout(grp_fu_66_p1)
);

Kmeans_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Kmeans_dadd_64ns_64ns_64_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_69_p0),
    .din1(grp_fu_69_p1),
    .ce(1'b1),
    .dout(grp_fu_69_p2)
);

always @ (posedge ap_clk) begin
    x1_int_reg <= x1;
end

always @ (posedge ap_clk) begin
    x2_int_reg <= x2;
end

always @ (posedge ap_clk) begin
    y1_int_reg <= y1;
end

always @ (posedge ap_clk) begin
    y2_int_reg <= y2;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_3_reg_138 <= grp_fu_54_p2;
        tmp_6_reg_163 <= grp_fu_69_p2;
        tmp_reg_133 <= grp_fu_48_p2;
        trunc_ln368_1_reg_148 <= trunc_ln368_1_fu_85_p1;
        trunc_ln368_reg_143 <= trunc_ln368_fu_77_p1;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_return = grp_fu_60_p1;

assign grp_fu_69_p0 = p_Result_s_fu_89_p3;

assign grp_fu_69_p1 = p_Result_1_fu_101_p3;

assign p_Result_1_fu_101_p3 = {{1'd0}, {trunc_ln368_1_reg_148}};

assign p_Result_s_fu_89_p3 = {{1'd0}, {trunc_ln368_reg_143}};

assign p_Val2_1_fu_81_p1 = grp_fu_66_p1;

assign p_Val2_s_fu_73_p1 = grp_fu_63_p1;

assign trunc_ln368_1_fu_85_p1 = p_Val2_1_fu_81_p1[62:0];

assign trunc_ln368_fu_77_p1 = p_Val2_s_fu_73_p1[62:0];

endmodule //distance
