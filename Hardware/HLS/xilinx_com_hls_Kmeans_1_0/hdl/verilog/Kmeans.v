// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=290955,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=11,HLS_SYN_FF=8893,HLS_SYN_LUT=10514,HLS_VERSION=2019_1}" *)

module Kmeans (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 106'd1;
parameter    ap_ST_fsm_state2 = 106'd2;
parameter    ap_ST_fsm_state3 = 106'd4;
parameter    ap_ST_fsm_state4 = 106'd8;
parameter    ap_ST_fsm_state5 = 106'd16;
parameter    ap_ST_fsm_state6 = 106'd32;
parameter    ap_ST_fsm_state7 = 106'd64;
parameter    ap_ST_fsm_state8 = 106'd128;
parameter    ap_ST_fsm_pp0_stage0 = 106'd256;
parameter    ap_ST_fsm_state12 = 106'd512;
parameter    ap_ST_fsm_state13 = 106'd1024;
parameter    ap_ST_fsm_state14 = 106'd2048;
parameter    ap_ST_fsm_state15 = 106'd4096;
parameter    ap_ST_fsm_state16 = 106'd8192;
parameter    ap_ST_fsm_state17 = 106'd16384;
parameter    ap_ST_fsm_state18 = 106'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 106'd65536;
parameter    ap_ST_fsm_state22 = 106'd131072;
parameter    ap_ST_fsm_state23 = 106'd262144;
parameter    ap_ST_fsm_state24 = 106'd524288;
parameter    ap_ST_fsm_state25 = 106'd1048576;
parameter    ap_ST_fsm_state26 = 106'd2097152;
parameter    ap_ST_fsm_state27 = 106'd4194304;
parameter    ap_ST_fsm_state28 = 106'd8388608;
parameter    ap_ST_fsm_pp2_stage0 = 106'd16777216;
parameter    ap_ST_fsm_state32 = 106'd33554432;
parameter    ap_ST_fsm_state33 = 106'd67108864;
parameter    ap_ST_fsm_state34 = 106'd134217728;
parameter    ap_ST_fsm_state35 = 106'd268435456;
parameter    ap_ST_fsm_state36 = 106'd536870912;
parameter    ap_ST_fsm_state37 = 106'd1073741824;
parameter    ap_ST_fsm_state38 = 106'd2147483648;
parameter    ap_ST_fsm_pp3_stage0 = 106'd4294967296;
parameter    ap_ST_fsm_state42 = 106'd8589934592;
parameter    ap_ST_fsm_state43 = 106'd17179869184;
parameter    ap_ST_fsm_state44 = 106'd34359738368;
parameter    ap_ST_fsm_state45 = 106'd68719476736;
parameter    ap_ST_fsm_state46 = 106'd137438953472;
parameter    ap_ST_fsm_state47 = 106'd274877906944;
parameter    ap_ST_fsm_state48 = 106'd549755813888;
parameter    ap_ST_fsm_state49 = 106'd1099511627776;
parameter    ap_ST_fsm_state50 = 106'd2199023255552;
parameter    ap_ST_fsm_state51 = 106'd4398046511104;
parameter    ap_ST_fsm_state52 = 106'd8796093022208;
parameter    ap_ST_fsm_state53 = 106'd17592186044416;
parameter    ap_ST_fsm_state54 = 106'd35184372088832;
parameter    ap_ST_fsm_state55 = 106'd70368744177664;
parameter    ap_ST_fsm_state56 = 106'd140737488355328;
parameter    ap_ST_fsm_state57 = 106'd281474976710656;
parameter    ap_ST_fsm_state58 = 106'd562949953421312;
parameter    ap_ST_fsm_state59 = 106'd1125899906842624;
parameter    ap_ST_fsm_state60 = 106'd2251799813685248;
parameter    ap_ST_fsm_state61 = 106'd4503599627370496;
parameter    ap_ST_fsm_state62 = 106'd9007199254740992;
parameter    ap_ST_fsm_state63 = 106'd18014398509481984;
parameter    ap_ST_fsm_state64 = 106'd36028797018963968;
parameter    ap_ST_fsm_state65 = 106'd72057594037927936;
parameter    ap_ST_fsm_state66 = 106'd144115188075855872;
parameter    ap_ST_fsm_state67 = 106'd288230376151711744;
parameter    ap_ST_fsm_state68 = 106'd576460752303423488;
parameter    ap_ST_fsm_state69 = 106'd1152921504606846976;
parameter    ap_ST_fsm_state70 = 106'd2305843009213693952;
parameter    ap_ST_fsm_state71 = 106'd4611686018427387904;
parameter    ap_ST_fsm_state72 = 106'd9223372036854775808;
parameter    ap_ST_fsm_state73 = 106'd18446744073709551616;
parameter    ap_ST_fsm_state74 = 106'd36893488147419103232;
parameter    ap_ST_fsm_state75 = 106'd73786976294838206464;
parameter    ap_ST_fsm_state76 = 106'd147573952589676412928;
parameter    ap_ST_fsm_state77 = 106'd295147905179352825856;
parameter    ap_ST_fsm_state78 = 106'd590295810358705651712;
parameter    ap_ST_fsm_state79 = 106'd1180591620717411303424;
parameter    ap_ST_fsm_state80 = 106'd2361183241434822606848;
parameter    ap_ST_fsm_state81 = 106'd4722366482869645213696;
parameter    ap_ST_fsm_state82 = 106'd9444732965739290427392;
parameter    ap_ST_fsm_state83 = 106'd18889465931478580854784;
parameter    ap_ST_fsm_state84 = 106'd37778931862957161709568;
parameter    ap_ST_fsm_state85 = 106'd75557863725914323419136;
parameter    ap_ST_fsm_state86 = 106'd151115727451828646838272;
parameter    ap_ST_fsm_state87 = 106'd302231454903657293676544;
parameter    ap_ST_fsm_state88 = 106'd604462909807314587353088;
parameter    ap_ST_fsm_state89 = 106'd1208925819614629174706176;
parameter    ap_ST_fsm_state90 = 106'd2417851639229258349412352;
parameter    ap_ST_fsm_state91 = 106'd4835703278458516698824704;
parameter    ap_ST_fsm_state92 = 106'd9671406556917033397649408;
parameter    ap_ST_fsm_state93 = 106'd19342813113834066795298816;
parameter    ap_ST_fsm_state94 = 106'd38685626227668133590597632;
parameter    ap_ST_fsm_state95 = 106'd77371252455336267181195264;
parameter    ap_ST_fsm_state96 = 106'd154742504910672534362390528;
parameter    ap_ST_fsm_state97 = 106'd309485009821345068724781056;
parameter    ap_ST_fsm_state98 = 106'd618970019642690137449562112;
parameter    ap_ST_fsm_state99 = 106'd1237940039285380274899124224;
parameter    ap_ST_fsm_state100 = 106'd2475880078570760549798248448;
parameter    ap_ST_fsm_state101 = 106'd4951760157141521099596496896;
parameter    ap_ST_fsm_state102 = 106'd9903520314283042199192993792;
parameter    ap_ST_fsm_state103 = 106'd19807040628566084398385987584;
parameter    ap_ST_fsm_state104 = 106'd39614081257132168796771975168;
parameter    ap_ST_fsm_state105 = 106'd79228162514264337593543950336;
parameter    ap_ST_fsm_state106 = 106'd158456325028528675187087900672;
parameter    ap_ST_fsm_state107 = 106'd316912650057057350374175801344;
parameter    ap_ST_fsm_state108 = 106'd633825300114114700748351602688;
parameter    ap_ST_fsm_pp4_stage0 = 106'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state112 = 106'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state113 = 106'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state114 = 106'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state115 = 106'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state116 = 106'd40564819207303340847894502572032;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_AWID;
output  [7:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_ARID;
output  [7:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1:0] m_axi_INPUT_r_BUSER;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_AWID;
output  [7:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_ARID;
output  [7:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_OUTPUT_r_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [105:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_X;
wire   [31:0] in_Y;
wire   [31:0] in_X_prot;
wire   [31:0] in_Y_prot;
wire   [31:0] out_clusters;
reg    INPUT_r_blk_n_AR;
wire    ap_CS_fsm_state32;
reg    INPUT_r_blk_n_R;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln29_reg_1233;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln28_reg_1219;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln27_reg_1205;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln26_reg_1191;
reg    OUTPUT_r_blk_n_AW;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln39_fu_823_p2;
reg    OUTPUT_r_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln79_reg_1427;
reg   [0:0] icmp_ln79_reg_1427_pp4_iter1_reg;
reg    OUTPUT_r_blk_n_B;
wire    ap_CS_fsm_state116;
wire    INPUT_r_AWREADY;
wire    INPUT_r_WREADY;
reg    INPUT_r_ARVALID;
wire    INPUT_r_ARREADY;
reg   [31:0] INPUT_r_ARADDR;
reg   [31:0] INPUT_r_ARLEN;
wire    INPUT_r_RVALID;
reg    INPUT_r_RREADY;
wire   [31:0] INPUT_r_RDATA;
wire    INPUT_r_RLAST;
wire   [0:0] INPUT_r_RID;
wire   [0:0] INPUT_r_RUSER;
wire   [1:0] INPUT_r_RRESP;
wire    INPUT_r_BVALID;
wire   [1:0] INPUT_r_BRESP;
wire   [0:0] INPUT_r_BID;
wire   [0:0] INPUT_r_BUSER;
reg    OUTPUT_r_AWVALID;
wire    OUTPUT_r_AWREADY;
reg    OUTPUT_r_WVALID;
wire    OUTPUT_r_WREADY;
wire    OUTPUT_r_ARREADY;
wire    OUTPUT_r_RVALID;
wire   [31:0] OUTPUT_r_RDATA;
wire    OUTPUT_r_RLAST;
wire   [0:0] OUTPUT_r_RID;
wire   [0:0] OUTPUT_r_RUSER;
wire   [1:0] OUTPUT_r_RRESP;
wire    OUTPUT_r_BVALID;
reg    OUTPUT_r_BREADY;
wire   [1:0] OUTPUT_r_BRESP;
wire   [0:0] OUTPUT_r_BID;
wire   [0:0] OUTPUT_r_BUSER;
reg   [7:0] phi_ln26_reg_416;
reg   [7:0] phi_ln26_reg_416_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] phi_ln27_reg_428;
reg   [7:0] phi_ln27_reg_428_pp1_iter1_reg;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [3:0] phi_ln28_reg_440;
reg   [3:0] phi_ln28_reg_440_pp2_iter1_reg;
wire    ap_block_state29_pp2_stage0_iter0;
reg    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_state31_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [3:0] phi_ln29_reg_452;
reg   [3:0] phi_ln29_reg_452_pp3_iter1_reg;
wire    ap_block_state39_pp3_stage0_iter0;
reg    ap_block_state40_pp3_stage0_iter1;
wire    ap_block_state41_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [7:0] phi_ln79_reg_580;
wire   [31:0] X_q0;
reg   [31:0] reg_635;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state80;
wire   [31:0] Y_q0;
reg   [31:0] reg_641;
wire   [31:0] grp_fu_625_p1;
reg   [31:0] reg_647;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state76;
wire   [31:0] clusters_q0;
reg   [31:0] reg_653;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state109_pp4_stage0_iter0;
wire    ap_block_state110_pp4_stage0_iter1;
wire    ap_block_state111_pp4_stage0_iter2;
reg    ap_block_state111_io;
reg    ap_block_pp4_stage0_11001;
reg   [29:0] out_clusters9_reg_1136;
reg   [29:0] in_Y_prot7_reg_1141;
reg   [29:0] in_X_prot5_reg_1146;
reg   [29:0] in_Y3_reg_1151;
reg   [29:0] in_X1_reg_1156;
reg   [31:0] OUTPUT_addr_reg_1167;
wire    ap_CS_fsm_state8;
reg   [31:0] INPUT_addr_reg_1173;
reg   [31:0] INPUT_addr_1_reg_1179;
reg   [31:0] INPUT_addr_2_reg_1185;
wire   [0:0] icmp_ln26_fu_755_p2;
reg   [0:0] icmp_ln26_reg_1191_pp0_iter1_reg;
wire   [7:0] add_ln26_fu_761_p2;
reg   [7:0] add_ln26_reg_1195;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] INPUT_addr_3_read_reg_1200;
wire   [0:0] icmp_ln27_fu_772_p2;
reg   [0:0] icmp_ln27_reg_1205_pp1_iter1_reg;
wire   [7:0] add_ln27_fu_778_p2;
reg   [7:0] add_ln27_reg_1209;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] INPUT_addr_2_read_reg_1214;
wire   [0:0] icmp_ln28_fu_789_p2;
reg   [0:0] icmp_ln28_reg_1219_pp2_iter1_reg;
wire   [3:0] add_ln28_fu_795_p2;
reg   [3:0] add_ln28_reg_1223;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] INPUT_addr_1_read_reg_1228;
wire   [0:0] icmp_ln29_fu_806_p2;
reg   [0:0] icmp_ln29_reg_1233_pp3_iter1_reg;
wire   [3:0] add_ln29_fu_812_p2;
reg   [3:0] add_ln29_reg_1237;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] INPUT_addr_read_reg_1242;
reg    ap_block_state43_io;
wire   [3:0] iter_fu_829_p2;
reg   [3:0] iter_reg_1251;
wire   [7:0] j_fu_841_p2;
reg   [7:0] j_reg_1259;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln49_fu_847_p1;
reg   [63:0] zext_ln49_reg_1264;
wire   [0:0] icmp_ln42_fu_835_p2;
wire   [31:0] zext_ln47_fu_853_p1;
reg   [31:0] zext_ln47_reg_1279;
wire    ap_CS_fsm_state46;
wire   [3:0] i_fu_863_p2;
reg   [3:0] i_reg_1287;
wire   [0:0] icmp_ln47_fu_857_p2;
wire   [31:0] X_prot_q0;
reg   [31:0] X_prot_load_reg_1302;
wire    ap_CS_fsm_state47;
wire   [31:0] Y_prot_q0;
reg   [31:0] Y_prot_load_reg_1307;
wire   [31:0] grp_distance_fu_591_ap_return;
reg   [31:0] new_distance_reg_1312;
wire    ap_CS_fsm_state62;
wire   [31:0] min_distance_1_fu_958_p3;
wire    ap_CS_fsm_state64;
wire   [31:0] belonging_cluster_in_2_fu_965_p3;
wire   [31:0] zext_ln60_fu_972_p1;
wire    ap_CS_fsm_state71;
wire   [3:0] i_2_fu_983_p2;
reg   [3:0] i_2_reg_1337;
wire   [31:0] bitcast_ln67_1_fu_989_p1;
reg   [31:0] bitcast_ln67_1_reg_1342;
wire    ap_CS_fsm_state77;
wire   [0:0] icmp_ln67_3_fu_997_p2;
reg   [0:0] icmp_ln67_3_reg_1347;
wire   [7:0] j_2_fu_1009_p2;
reg   [7:0] j_2_reg_1355;
wire    ap_CS_fsm_state78;
wire   [63:0] zext_ln67_fu_1015_p1;
reg   [63:0] zext_ln67_reg_1360;
wire   [0:0] icmp_ln65_fu_1003_p2;
wire   [0:0] icmp_ln67_2_fu_1029_p2;
reg   [0:0] icmp_ln67_2_reg_1371;
wire   [0:0] icmp_ln67_fu_1053_p2;
reg   [0:0] icmp_ln67_reg_1376;
wire   [0:0] icmp_ln67_1_fu_1059_p2;
reg   [0:0] icmp_ln67_1_reg_1381;
wire   [0:0] and_ln67_1_fu_1079_p2;
reg   [0:0] and_ln67_1_reg_1396;
wire   [31:0] size_1_fu_1091_p3;
reg   [31:0] size_1_reg_1402;
wire   [31:0] X_clus_1_fu_1099_p3;
wire    ap_CS_fsm_state85;
wire   [31:0] Y_clus_1_fu_1106_p3;
wire   [31:0] grp_moy_fu_599_ap_return;
reg   [31:0] tmp_9_reg_1417;
wire    ap_CS_fsm_state107;
wire   [31:0] grp_moy_fu_607_ap_return;
reg   [31:0] tmp_s_reg_1422;
wire   [0:0] icmp_ln79_fu_1119_p2;
wire   [7:0] add_ln79_fu_1125_p2;
reg    ap_enable_reg_pp4_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state28;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state29;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state38;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state39;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state109;
reg   [6:0] X_address0;
reg    X_ce0;
reg    X_we0;
reg   [6:0] Y_address0;
reg    Y_ce0;
reg    Y_we0;
reg   [6:0] X_prot_address0;
reg    X_prot_ce0;
reg    X_prot_we0;
reg   [31:0] X_prot_d0;
reg   [6:0] Y_prot_address0;
reg    Y_prot_ce0;
reg    Y_prot_we0;
reg   [31:0] Y_prot_d0;
reg   [6:0] clusters_address0;
reg    clusters_ce0;
reg    clusters_we0;
reg   [7:0] ap_phi_mux_phi_ln26_phi_fu_420_p4;
reg   [7:0] ap_phi_mux_phi_ln27_phi_fu_432_p4;
reg   [3:0] ap_phi_mux_phi_ln28_phi_fu_444_p4;
reg   [3:0] ap_phi_mux_phi_ln29_phi_fu_456_p4;
reg   [3:0] iter_0_reg_464;
wire   [0:0] icmp_ln60_fu_977_p2;
wire    ap_CS_fsm_state42;
reg   [7:0] j_0_reg_475;
wire    ap_CS_fsm_state70;
reg   [3:0] belonging_cluster_in_reg_486;
reg   [31:0] min_distance_0_reg_497;
reg   [31:0] belonging_cluster_in_1_reg_509;
reg   [3:0] i_1_reg_521;
wire    ap_CS_fsm_state108;
reg   [7:0] j_1_reg_533;
reg   [31:0] size_0_reg_544;
reg   [31:0] X_clus_0_reg_556;
reg   [31:0] Y_clus_0_reg_568;
wire    ap_CS_fsm_state48;
wire   [63:0] zext_ln26_fu_767_p1;
wire   [63:0] zext_ln27_fu_784_p1;
wire   [63:0] zext_ln28_fu_801_p1;
wire   [63:0] zext_ln29_fu_818_p1;
wire   [63:0] zext_ln49_1_fu_869_p1;
wire   [63:0] zext_ln74_fu_1113_p1;
wire   [63:0] zext_ln79_fu_1131_p1;
wire   [63:0] empty_13_fu_709_p1;
wire   [63:0] empty_fu_719_p1;
wire   [63:0] empty_10_fu_728_p1;
wire   [63:0] empty_11_fu_737_p1;
wire   [63:0] empty_12_fu_746_p1;
wire    ap_block_pp4_stage0_01001;
wire    ap_CS_fsm_state81;
reg   [31:0] grp_fu_625_p0;
reg   [31:0] grp_fu_629_p0;
reg   [31:0] grp_fu_629_p1;
wire    ap_CS_fsm_state63;
wire   [31:0] bitcast_ln50_fu_875_p1;
wire   [31:0] bitcast_ln50_1_fu_892_p1;
wire   [7:0] tmp_1_fu_878_p4;
wire   [22:0] trunc_ln50_fu_888_p1;
wire   [0:0] icmp_ln50_1_fu_916_p2;
wire   [0:0] icmp_ln50_fu_910_p2;
wire   [7:0] tmp_5_fu_896_p4;
wire   [22:0] trunc_ln50_1_fu_906_p1;
wire   [0:0] icmp_ln50_3_fu_934_p2;
wire   [0:0] icmp_ln50_2_fu_928_p2;
wire   [0:0] or_ln50_fu_922_p2;
wire   [0:0] or_ln50_1_fu_940_p2;
wire   [0:0] and_ln50_fu_946_p2;
wire   [0:0] grp_fu_629_p2;
wire   [0:0] and_ln50_1_fu_952_p2;
wire   [22:0] trunc_ln67_fu_993_p1;
wire   [7:0] tmp_10_fu_1020_p4;
wire   [31:0] bitcast_ln67_fu_1035_p1;
wire   [7:0] tmp_8_fu_1039_p4;
wire   [22:0] trunc_ln67_1_fu_1049_p1;
wire   [0:0] or_ln67_fu_1065_p2;
wire   [0:0] or_ln67_1_fu_1069_p2;
wire   [0:0] and_ln67_fu_1073_p2;
wire   [31:0] size_fu_1085_p2;
wire   [31:0] grp_fu_615_p2;
wire   [31:0] grp_fu_620_p2;
reg   [4:0] grp_fu_629_opcode;
reg   [105:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 106'd1;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

Kmeans_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
Kmeans_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_X(in_X),
    .in_Y(in_Y),
    .in_X_prot(in_X_prot),
    .in_Y_prot(in_Y_prot),
    .out_clusters(out_clusters)
);

Kmeans_INPUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ))
Kmeans_INPUT_r_m_axi_U(
    .AWVALID(m_axi_INPUT_r_AWVALID),
    .AWREADY(m_axi_INPUT_r_AWREADY),
    .AWADDR(m_axi_INPUT_r_AWADDR),
    .AWID(m_axi_INPUT_r_AWID),
    .AWLEN(m_axi_INPUT_r_AWLEN),
    .AWSIZE(m_axi_INPUT_r_AWSIZE),
    .AWBURST(m_axi_INPUT_r_AWBURST),
    .AWLOCK(m_axi_INPUT_r_AWLOCK),
    .AWCACHE(m_axi_INPUT_r_AWCACHE),
    .AWPROT(m_axi_INPUT_r_AWPROT),
    .AWQOS(m_axi_INPUT_r_AWQOS),
    .AWREGION(m_axi_INPUT_r_AWREGION),
    .AWUSER(m_axi_INPUT_r_AWUSER),
    .WVALID(m_axi_INPUT_r_WVALID),
    .WREADY(m_axi_INPUT_r_WREADY),
    .WDATA(m_axi_INPUT_r_WDATA),
    .WSTRB(m_axi_INPUT_r_WSTRB),
    .WLAST(m_axi_INPUT_r_WLAST),
    .WID(m_axi_INPUT_r_WID),
    .WUSER(m_axi_INPUT_r_WUSER),
    .ARVALID(m_axi_INPUT_r_ARVALID),
    .ARREADY(m_axi_INPUT_r_ARREADY),
    .ARADDR(m_axi_INPUT_r_ARADDR),
    .ARID(m_axi_INPUT_r_ARID),
    .ARLEN(m_axi_INPUT_r_ARLEN),
    .ARSIZE(m_axi_INPUT_r_ARSIZE),
    .ARBURST(m_axi_INPUT_r_ARBURST),
    .ARLOCK(m_axi_INPUT_r_ARLOCK),
    .ARCACHE(m_axi_INPUT_r_ARCACHE),
    .ARPROT(m_axi_INPUT_r_ARPROT),
    .ARQOS(m_axi_INPUT_r_ARQOS),
    .ARREGION(m_axi_INPUT_r_ARREGION),
    .ARUSER(m_axi_INPUT_r_ARUSER),
    .RVALID(m_axi_INPUT_r_RVALID),
    .RREADY(m_axi_INPUT_r_RREADY),
    .RDATA(m_axi_INPUT_r_RDATA),
    .RLAST(m_axi_INPUT_r_RLAST),
    .RID(m_axi_INPUT_r_RID),
    .RUSER(m_axi_INPUT_r_RUSER),
    .RRESP(m_axi_INPUT_r_RRESP),
    .BVALID(m_axi_INPUT_r_BVALID),
    .BREADY(m_axi_INPUT_r_BREADY),
    .BRESP(m_axi_INPUT_r_BRESP),
    .BID(m_axi_INPUT_r_BID),
    .BUSER(m_axi_INPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_r_ARVALID),
    .I_ARREADY(INPUT_r_ARREADY),
    .I_ARADDR(INPUT_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(INPUT_r_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_r_RVALID),
    .I_RREADY(INPUT_r_RREADY),
    .I_RDATA(INPUT_r_RDATA),
    .I_RID(INPUT_r_RID),
    .I_RUSER(INPUT_r_RUSER),
    .I_RRESP(INPUT_r_RRESP),
    .I_RLAST(INPUT_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(INPUT_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_r_BRESP),
    .I_BID(INPUT_r_BID),
    .I_BUSER(INPUT_r_BUSER)
);

Kmeans_OUTPUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
Kmeans_OUTPUT_r_m_axi_U(
    .AWVALID(m_axi_OUTPUT_r_AWVALID),
    .AWREADY(m_axi_OUTPUT_r_AWREADY),
    .AWADDR(m_axi_OUTPUT_r_AWADDR),
    .AWID(m_axi_OUTPUT_r_AWID),
    .AWLEN(m_axi_OUTPUT_r_AWLEN),
    .AWSIZE(m_axi_OUTPUT_r_AWSIZE),
    .AWBURST(m_axi_OUTPUT_r_AWBURST),
    .AWLOCK(m_axi_OUTPUT_r_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_r_AWCACHE),
    .AWPROT(m_axi_OUTPUT_r_AWPROT),
    .AWQOS(m_axi_OUTPUT_r_AWQOS),
    .AWREGION(m_axi_OUTPUT_r_AWREGION),
    .AWUSER(m_axi_OUTPUT_r_AWUSER),
    .WVALID(m_axi_OUTPUT_r_WVALID),
    .WREADY(m_axi_OUTPUT_r_WREADY),
    .WDATA(m_axi_OUTPUT_r_WDATA),
    .WSTRB(m_axi_OUTPUT_r_WSTRB),
    .WLAST(m_axi_OUTPUT_r_WLAST),
    .WID(m_axi_OUTPUT_r_WID),
    .WUSER(m_axi_OUTPUT_r_WUSER),
    .ARVALID(m_axi_OUTPUT_r_ARVALID),
    .ARREADY(m_axi_OUTPUT_r_ARREADY),
    .ARADDR(m_axi_OUTPUT_r_ARADDR),
    .ARID(m_axi_OUTPUT_r_ARID),
    .ARLEN(m_axi_OUTPUT_r_ARLEN),
    .ARSIZE(m_axi_OUTPUT_r_ARSIZE),
    .ARBURST(m_axi_OUTPUT_r_ARBURST),
    .ARLOCK(m_axi_OUTPUT_r_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_r_ARCACHE),
    .ARPROT(m_axi_OUTPUT_r_ARPROT),
    .ARQOS(m_axi_OUTPUT_r_ARQOS),
    .ARREGION(m_axi_OUTPUT_r_ARREGION),
    .ARUSER(m_axi_OUTPUT_r_ARUSER),
    .RVALID(m_axi_OUTPUT_r_RVALID),
    .RREADY(m_axi_OUTPUT_r_RREADY),
    .RDATA(m_axi_OUTPUT_r_RDATA),
    .RLAST(m_axi_OUTPUT_r_RLAST),
    .RID(m_axi_OUTPUT_r_RID),
    .RUSER(m_axi_OUTPUT_r_RUSER),
    .RRESP(m_axi_OUTPUT_r_RRESP),
    .BVALID(m_axi_OUTPUT_r_BVALID),
    .BREADY(m_axi_OUTPUT_r_BREADY),
    .BRESP(m_axi_OUTPUT_r_BRESP),
    .BID(m_axi_OUTPUT_r_BID),
    .BUSER(m_axi_OUTPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_r_RDATA),
    .I_RID(OUTPUT_r_RID),
    .I_RUSER(OUTPUT_r_RUSER),
    .I_RRESP(OUTPUT_r_RRESP),
    .I_RLAST(OUTPUT_r_RLAST),
    .I_AWVALID(OUTPUT_r_AWVALID),
    .I_AWREADY(OUTPUT_r_AWREADY),
    .I_AWADDR(OUTPUT_addr_reg_1167),
    .I_AWID(1'd0),
    .I_AWLEN(32'd128),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_r_WVALID),
    .I_WREADY(OUTPUT_r_WREADY),
    .I_WDATA(reg_653),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(OUTPUT_r_BVALID),
    .I_BREADY(OUTPUT_r_BREADY),
    .I_BRESP(OUTPUT_r_BRESP),
    .I_BID(OUTPUT_r_BID),
    .I_BUSER(OUTPUT_r_BUSER)
);

Kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
X_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(X_address0),
    .ce0(X_ce0),
    .we0(X_we0),
    .d0(INPUT_addr_3_read_reg_1200),
    .q0(X_q0)
);

Kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Y_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Y_address0),
    .ce0(Y_ce0),
    .we0(Y_we0),
    .d0(INPUT_addr_2_read_reg_1214),
    .q0(Y_q0)
);

Kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
X_prot_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(X_prot_address0),
    .ce0(X_prot_ce0),
    .we0(X_prot_we0),
    .d0(X_prot_d0),
    .q0(X_prot_q0)
);

Kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Y_prot_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Y_prot_address0),
    .ce0(Y_prot_ce0),
    .we0(Y_prot_we0),
    .d0(Y_prot_d0),
    .q0(Y_prot_q0)
);

Kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
clusters_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(clusters_address0),
    .ce0(clusters_ce0),
    .we0(clusters_we0),
    .d0(reg_647),
    .q0(clusters_q0)
);

distance grp_distance_fu_591(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x1(X_prot_load_reg_1302),
    .y1(Y_prot_load_reg_1307),
    .x2(reg_635),
    .y2(reg_641),
    .ap_return(grp_distance_fu_591_ap_return)
);

moy grp_moy_fu_599(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .somme(X_clus_0_reg_556),
    .taille(size_0_reg_544),
    .ap_return(grp_moy_fu_599_ap_return)
);

moy grp_moy_fu_607(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .somme(Y_clus_0_reg_568),
    .taille(size_0_reg_544),
    .ap_return(grp_moy_fu_607_ap_return)
);

Kmeans_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_fadd_32ns_32ns_32_5_full_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(X_clus_0_reg_556),
    .din1(reg_635),
    .ce(1'b1),
    .dout(grp_fu_615_p2)
);

Kmeans_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_fadd_32ns_32ns_32_5_full_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Y_clus_0_reg_568),
    .din1(reg_641),
    .ce(1'b1),
    .dout(grp_fu_620_p2)
);

Kmeans_sitofp_32ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Kmeans_sitofp_32ns_32_6_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_625_p0),
    .ce(1'b1),
    .dout(grp_fu_625_p1)
);

Kmeans_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Kmeans_fcmp_32ns_32ns_1_2_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_629_p0),
    .din1(grp_fu_629_p1),
    .ce(1'b1),
    .opcode(grp_fu_629_opcode),
    .dout(grp_fu_629_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state29)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state39) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state39)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state39);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state109) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state109)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state109);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        X_clus_0_reg_556 <= X_clus_1_fu_1099_p3;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        X_clus_0_reg_556 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        Y_clus_0_reg_568 <= Y_clus_1_fu_1106_p3;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        Y_clus_0_reg_568 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        belonging_cluster_in_1_reg_509 <= belonging_cluster_in_2_fu_965_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        belonging_cluster_in_1_reg_509 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        belonging_cluster_in_reg_486 <= i_reg_1287;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        belonging_cluster_in_reg_486 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        i_1_reg_521 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        i_1_reg_521 <= i_2_reg_1337;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        iter_0_reg_464 <= 4'd0;
    end else if (((icmp_ln60_fu_977_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        iter_0_reg_464 <= iter_reg_1251;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        j_0_reg_475 <= j_reg_1259;
    end else if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        j_0_reg_475 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        j_1_reg_533 <= j_2_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        j_1_reg_533 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        min_distance_0_reg_497 <= min_distance_1_fu_958_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        min_distance_0_reg_497 <= 32'd1203982208;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln26_reg_416 <= add_ln26_reg_1195;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln26_reg_416 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_ln27_reg_428 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_reg_1205 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln27_reg_428 <= add_ln27_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        phi_ln28_reg_440 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln28_reg_1219 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        phi_ln28_reg_440 <= add_ln28_reg_1223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        phi_ln29_reg_452 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln29_reg_1233 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        phi_ln29_reg_452 <= add_ln29_reg_1237;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        phi_ln79_reg_580 <= 8'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln79_fu_1119_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        phi_ln79_reg_580 <= add_ln79_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        size_0_reg_544 <= size_1_reg_1402;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        size_0_reg_544 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln28_reg_1219 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        INPUT_addr_1_read_reg_1228 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        INPUT_addr_1_reg_1179[29 : 0] <= empty_11_fu_737_p1[29 : 0];
        INPUT_addr_2_reg_1185[29 : 0] <= empty_12_fu_746_p1[29 : 0];
        INPUT_addr_reg_1173[29 : 0] <= empty_10_fu_728_p1[29 : 0];
        OUTPUT_addr_reg_1167[29 : 0] <= empty_fu_719_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_reg_1205 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        INPUT_addr_2_read_reg_1214 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_1191 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INPUT_addr_3_read_reg_1200 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln29_reg_1233 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        INPUT_addr_read_reg_1242 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        X_prot_load_reg_1302 <= X_prot_q0;
        Y_prot_load_reg_1307 <= Y_prot_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln26_reg_1195 <= add_ln26_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln27_reg_1209 <= add_ln27_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln28_reg_1223 <= add_ln28_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln29_reg_1237 <= add_ln29_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        and_ln67_1_reg_1396 <= and_ln67_1_fu_1079_p2;
        size_1_reg_1402 <= size_1_fu_1091_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        bitcast_ln67_1_reg_1342 <= bitcast_ln67_1_fu_989_p1;
        icmp_ln67_3_reg_1347 <= icmp_ln67_3_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        i_2_reg_1337 <= i_2_fu_983_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        i_reg_1287 <= i_fu_863_p2;
        zext_ln47_reg_1279[3 : 0] <= zext_ln47_fu_853_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_1191 <= icmp_ln26_fu_755_p2;
        icmp_ln26_reg_1191_pp0_iter1_reg <= icmp_ln26_reg_1191;
        phi_ln26_reg_416_pp0_iter1_reg <= phi_ln26_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln27_reg_1205 <= icmp_ln27_fu_772_p2;
        icmp_ln27_reg_1205_pp1_iter1_reg <= icmp_ln27_reg_1205;
        phi_ln27_reg_428_pp1_iter1_reg <= phi_ln27_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln28_reg_1219 <= icmp_ln28_fu_789_p2;
        icmp_ln28_reg_1219_pp2_iter1_reg <= icmp_ln28_reg_1219;
        phi_ln28_reg_440_pp2_iter1_reg <= phi_ln28_reg_440;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln29_reg_1233 <= icmp_ln29_fu_806_p2;
        icmp_ln29_reg_1233_pp3_iter1_reg <= icmp_ln29_reg_1233;
        phi_ln29_reg_452_pp3_iter1_reg <= phi_ln29_reg_452;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        icmp_ln67_1_reg_1381 <= icmp_ln67_1_fu_1059_p2;
        icmp_ln67_reg_1376 <= icmp_ln67_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_1003_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        icmp_ln67_2_reg_1371 <= icmp_ln67_2_fu_1029_p2;
        zext_ln67_reg_1360[7 : 0] <= zext_ln67_fu_1015_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln79_reg_1427 <= icmp_ln79_fu_1119_p2;
        icmp_ln79_reg_1427_pp4_iter1_reg <= icmp_ln79_reg_1427;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_X1_reg_1156 <= {{in_X[31:2]}};
        in_X_prot5_reg_1146 <= {{in_X_prot[31:2]}};
        in_Y3_reg_1151 <= {{in_Y[31:2]}};
        in_Y_prot7_reg_1141 <= {{in_Y_prot[31:2]}};
        out_clusters9_reg_1136 <= {{out_clusters[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43))) begin
        iter_reg_1251 <= iter_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        j_2_reg_1355 <= j_2_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_reg_1259 <= j_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        new_distance_reg_1312 <= grp_distance_fu_591_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_635 <= X_q0;
        reg_641 <= Y_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state69))) begin
        reg_647 <= grp_fu_625_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state79) | ((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln79_reg_1427 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        reg_653 <= clusters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        tmp_9_reg_1417 <= grp_moy_fu_599_ap_return;
        tmp_s_reg_1422 <= grp_moy_fu_607_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_835_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        zext_ln49_reg_1264[7 : 0] <= zext_ln49_fu_847_p1[7 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            INPUT_r_ARADDR = INPUT_addr_reg_1173;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            INPUT_r_ARADDR = INPUT_addr_1_reg_1179;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            INPUT_r_ARADDR = INPUT_addr_2_reg_1185;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            INPUT_r_ARADDR = empty_13_fu_709_p1;
        end else begin
            INPUT_r_ARADDR = 'bx;
        end
    end else begin
        INPUT_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state32)))) begin
        INPUT_r_ARLEN = 32'd8;
    end else if ((((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state12)))) begin
        INPUT_r_ARLEN = 32'd128;
    end else begin
        INPUT_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state32)))) begin
        INPUT_r_ARVALID = 1'b1;
    end else begin
        INPUT_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_reg_1205 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln28_reg_1219 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln29_reg_1233 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        INPUT_r_RREADY = 1'b1;
    end else begin
        INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state32))) begin
        INPUT_r_blk_n_AR = m_axi_INPUT_r_ARREADY;
    end else begin
        INPUT_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln26_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln27_reg_1205 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln28_reg_1219 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln29_reg_1233 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        OUTPUT_r_AWVALID = 1'b1;
    end else begin
        OUTPUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state116))) begin
        OUTPUT_r_BREADY = 1'b1;
    end else begin
        OUTPUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln79_reg_1427_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        OUTPUT_r_WVALID = 1'b1;
    end else begin
        OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        OUTPUT_r_blk_n_AW = m_axi_OUTPUT_r_AWREADY;
    end else begin
        OUTPUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        OUTPUT_r_blk_n_B = m_axi_OUTPUT_r_BVALID;
    end else begin
        OUTPUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (icmp_ln79_reg_1427_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        X_address0 = zext_ln67_reg_1360;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        X_address0 = zext_ln49_fu_847_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        X_address0 = zext_ln26_fu_767_p1;
    end else begin
        X_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state79) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        X_ce0 = 1'b1;
    end else begin
        X_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        X_prot_address0 = zext_ln74_fu_1113_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        X_prot_address0 = zext_ln49_1_fu_869_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        X_prot_address0 = zext_ln28_fu_801_p1;
    end else begin
        X_prot_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state108) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        X_prot_ce0 = 1'b1;
    end else begin
        X_prot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        X_prot_d0 = tmp_9_reg_1417;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        X_prot_d0 = INPUT_addr_1_read_reg_1228;
    end else begin
        X_prot_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln28_reg_1219_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        X_prot_we0 = 1'b1;
    end else begin
        X_prot_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_1191_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        X_we0 = 1'b1;
    end else begin
        X_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        Y_address0 = zext_ln67_reg_1360;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        Y_address0 = zext_ln49_fu_847_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        Y_address0 = zext_ln27_fu_784_p1;
    end else begin
        Y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state79) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        Y_ce0 = 1'b1;
    end else begin
        Y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        Y_prot_address0 = zext_ln74_fu_1113_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        Y_prot_address0 = zext_ln49_1_fu_869_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        Y_prot_address0 = zext_ln29_fu_818_p1;
    end else begin
        Y_prot_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state108) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        Y_prot_ce0 = 1'b1;
    end else begin
        Y_prot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        Y_prot_d0 = tmp_s_reg_1422;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        Y_prot_d0 = INPUT_addr_read_reg_1242;
    end else begin
        Y_prot_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln29_reg_1233_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        Y_prot_we0 = 1'b1;
    end else begin
        Y_prot_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_reg_1205_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        Y_we0 = 1'b1;
    end else begin
        Y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_755_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_772_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln28_fu_789_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_806_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln79_fu_1119_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state109 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state109 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state116))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln26_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_ln26_phi_fu_420_p4 = add_ln26_reg_1195;
    end else begin
        ap_phi_mux_phi_ln26_phi_fu_420_p4 = phi_ln26_reg_416;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln27_reg_1205 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_phi_ln27_phi_fu_432_p4 = add_ln27_reg_1209;
    end else begin
        ap_phi_mux_phi_ln27_phi_fu_432_p4 = phi_ln27_reg_428;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln28_reg_1219 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_phi_ln28_phi_fu_444_p4 = add_ln28_reg_1223;
    end else begin
        ap_phi_mux_phi_ln28_phi_fu_444_p4 = phi_ln28_reg_440;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_1233 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_phi_ln29_phi_fu_456_p4 = add_ln29_reg_1237;
    end else begin
        ap_phi_mux_phi_ln29_phi_fu_456_p4 = phi_ln29_reg_452;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state116))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        clusters_address0 = zext_ln79_fu_1131_p1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        clusters_address0 = zext_ln67_fu_1015_p1;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        clusters_address0 = zext_ln49_reg_1264;
    end else begin
        clusters_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state70) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        clusters_ce0 = 1'b1;
    end else begin
        clusters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        clusters_we0 = 1'b1;
    end else begin
        clusters_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_625_p0 = zext_ln60_fu_972_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_625_p0 = belonging_cluster_in_1_reg_509;
    end else begin
        grp_fu_625_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_629_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_629_opcode = 5'd4;
    end else begin
        grp_fu_629_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_629_p0 = clusters_q0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_629_p0 = new_distance_reg_1312;
    end else begin
        grp_fu_629_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_629_p1 = reg_647;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_629_p1 = min_distance_0_reg_497;
    end else begin
        grp_fu_629_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln26_fu_755_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln26_fu_755_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln27_fu_772_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln27_fu_772_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln28_fu_789_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln28_fu_789_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln29_fu_806_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln29_fu_806_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_state43_io) & (icmp_ln39_fu_823_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln42_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln47_fu_857_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln60_fu_977_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((icmp_ln65_fu_1003_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln79_fu_1119_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln79_fu_1119_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_clus_1_fu_1099_p3 = ((and_ln67_1_reg_1396[0:0] === 1'b1) ? grp_fu_615_p2 : X_clus_0_reg_556);

assign Y_clus_1_fu_1106_p3 = ((and_ln67_1_reg_1396[0:0] === 1'b1) ? grp_fu_620_p2 : Y_clus_0_reg_568);

assign add_ln26_fu_761_p2 = (ap_phi_mux_phi_ln26_phi_fu_420_p4 + 8'd1);

assign add_ln27_fu_778_p2 = (ap_phi_mux_phi_ln27_phi_fu_432_p4 + 8'd1);

assign add_ln28_fu_795_p2 = (ap_phi_mux_phi_ln28_phi_fu_444_p4 + 4'd1);

assign add_ln29_fu_812_p2 = (ap_phi_mux_phi_ln29_phi_fu_456_p4 + 4'd1);

assign add_ln79_fu_1125_p2 = (phi_ln79_reg_580 + 8'd1);

assign and_ln50_1_fu_952_p2 = (grp_fu_629_p2 & and_ln50_fu_946_p2);

assign and_ln50_fu_946_p2 = (or_ln50_fu_922_p2 & or_ln50_1_fu_940_p2);

assign and_ln67_1_fu_1079_p2 = (grp_fu_629_p2 & and_ln67_fu_1073_p2);

assign and_ln67_fu_1073_p2 = (or_ln67_fu_1065_p2 & or_ln67_1_fu_1069_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd76];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln26_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln26_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln27_reg_1205 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln27_reg_1205 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln28_reg_1219 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln28_reg_1219 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln29_reg_1233 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln29_reg_1233 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state111_io));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state111_io));
end

assign ap_block_state109_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln26_reg_1191 == 1'd0));
end

assign ap_block_state110_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state111_io = ((1'b0 == OUTPUT_r_WREADY) & (icmp_ln79_reg_1427_pp4_iter1_reg == 1'd0));
end

assign ap_block_state111_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln27_reg_1205 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp2_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln28_reg_1219 == 1'd0));
end

assign ap_block_state31_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_pp3_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln29_reg_1233 == 1'd0));
end

assign ap_block_state41_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_io = ((icmp_ln39_fu_823_p2 == 1'd1) & (1'b0 == OUTPUT_r_AWREADY));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign belonging_cluster_in_2_fu_965_p3 = ((and_ln50_1_fu_952_p2[0:0] === 1'b1) ? zext_ln47_reg_1279 : belonging_cluster_in_1_reg_509);

assign bitcast_ln50_1_fu_892_p1 = min_distance_0_reg_497;

assign bitcast_ln50_fu_875_p1 = new_distance_reg_1312;

assign bitcast_ln67_1_fu_989_p1 = reg_647;

assign bitcast_ln67_fu_1035_p1 = clusters_q0;

assign empty_10_fu_728_p1 = in_Y_prot7_reg_1141;

assign empty_11_fu_737_p1 = in_X_prot5_reg_1146;

assign empty_12_fu_746_p1 = in_Y3_reg_1151;

assign empty_13_fu_709_p1 = in_X1_reg_1156;

assign empty_fu_719_p1 = out_clusters9_reg_1136;

assign i_2_fu_983_p2 = (i_1_reg_521 + 4'd1);

assign i_fu_863_p2 = (belonging_cluster_in_reg_486 + 4'd1);

assign icmp_ln26_fu_755_p2 = ((ap_phi_mux_phi_ln26_phi_fu_420_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_772_p2 = ((ap_phi_mux_phi_ln27_phi_fu_432_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_789_p2 = ((ap_phi_mux_phi_ln28_phi_fu_444_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_806_p2 = ((ap_phi_mux_phi_ln29_phi_fu_456_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_823_p2 = ((iter_0_reg_464 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_835_p2 = ((j_0_reg_475 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_857_p2 = ((belonging_cluster_in_reg_486 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_916_p2 = ((trunc_ln50_fu_888_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_928_p2 = ((tmp_5_fu_896_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_934_p2 = ((trunc_ln50_1_fu_906_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_910_p2 = ((tmp_1_fu_878_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_977_p2 = ((i_1_reg_521 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_1003_p2 = ((j_1_reg_533 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_1059_p2 = ((trunc_ln67_1_fu_1049_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_2_fu_1029_p2 = ((tmp_10_fu_1020_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_3_fu_997_p2 = ((trunc_ln67_fu_993_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1053_p2 = ((tmp_8_fu_1039_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1119_p2 = ((phi_ln79_reg_580 == 8'd128) ? 1'b1 : 1'b0);

assign iter_fu_829_p2 = (iter_0_reg_464 + 4'd1);

assign j_2_fu_1009_p2 = (j_1_reg_533 + 8'd1);

assign j_fu_841_p2 = (j_0_reg_475 + 8'd1);

assign min_distance_1_fu_958_p3 = ((and_ln50_1_fu_952_p2[0:0] === 1'b1) ? new_distance_reg_1312 : min_distance_0_reg_497);

assign or_ln50_1_fu_940_p2 = (icmp_ln50_3_fu_934_p2 | icmp_ln50_2_fu_928_p2);

assign or_ln50_fu_922_p2 = (icmp_ln50_fu_910_p2 | icmp_ln50_1_fu_916_p2);

assign or_ln67_1_fu_1069_p2 = (icmp_ln67_3_reg_1347 | icmp_ln67_2_reg_1371);

assign or_ln67_fu_1065_p2 = (icmp_ln67_reg_1376 | icmp_ln67_1_reg_1381);

assign size_1_fu_1091_p3 = ((and_ln67_1_fu_1079_p2[0:0] === 1'b1) ? size_fu_1085_p2 : size_0_reg_544);

assign size_fu_1085_p2 = (32'd1 + size_0_reg_544);

assign tmp_10_fu_1020_p4 = {{bitcast_ln67_1_reg_1342[30:23]}};

assign tmp_1_fu_878_p4 = {{bitcast_ln50_fu_875_p1[30:23]}};

assign tmp_5_fu_896_p4 = {{bitcast_ln50_1_fu_892_p1[30:23]}};

assign tmp_8_fu_1039_p4 = {{bitcast_ln67_fu_1035_p1[30:23]}};

assign trunc_ln50_1_fu_906_p1 = bitcast_ln50_1_fu_892_p1[22:0];

assign trunc_ln50_fu_888_p1 = bitcast_ln50_fu_875_p1[22:0];

assign trunc_ln67_1_fu_1049_p1 = bitcast_ln67_fu_1035_p1[22:0];

assign trunc_ln67_fu_993_p1 = bitcast_ln67_1_fu_989_p1[22:0];

assign zext_ln26_fu_767_p1 = phi_ln26_reg_416_pp0_iter1_reg;

assign zext_ln27_fu_784_p1 = phi_ln27_reg_428_pp1_iter1_reg;

assign zext_ln28_fu_801_p1 = phi_ln28_reg_440_pp2_iter1_reg;

assign zext_ln29_fu_818_p1 = phi_ln29_reg_452_pp3_iter1_reg;

assign zext_ln47_fu_853_p1 = belonging_cluster_in_reg_486;

assign zext_ln49_1_fu_869_p1 = belonging_cluster_in_reg_486;

assign zext_ln49_fu_847_p1 = j_0_reg_475;

assign zext_ln60_fu_972_p1 = i_1_reg_521;

assign zext_ln67_fu_1015_p1 = j_1_reg_533;

assign zext_ln74_fu_1113_p1 = i_1_reg_521;

assign zext_ln79_fu_1131_p1 = phi_ln79_reg_580;

always @ (posedge ap_clk) begin
    OUTPUT_addr_reg_1167[31:30] <= 2'b00;
    INPUT_addr_reg_1173[31:30] <= 2'b00;
    INPUT_addr_1_reg_1179[31:30] <= 2'b00;
    INPUT_addr_2_reg_1185[31:30] <= 2'b00;
    zext_ln49_reg_1264[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1279[31:4] <= 28'b0000000000000000000000000000;
    zext_ln67_reg_1360[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //Kmeans
