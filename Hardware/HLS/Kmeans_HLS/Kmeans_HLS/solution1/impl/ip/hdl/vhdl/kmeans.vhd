-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=128227,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=7,HLS_SYN_FF=5836,HLS_SYN_LUT=8087,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (111 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (111 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (111 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (111 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (111 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (111 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (111 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (111 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (111 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_47C34F80 : STD_LOGIC_VECTOR (31 downto 0) := "01000111110000110100111110000000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_X_prot : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Y_prot : STD_LOGIC_VECTOR (31 downto 0);
    signal in_X : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Y : STD_LOGIC_VECTOR (31 downto 0);
    signal out_cluster : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal INPUT_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln26_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_1507 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln28_reg_1616 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln27_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln36_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln75_reg_1942 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1942_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RLAST : STD_LOGIC;
    signal INPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal INPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_RLAST : STD_LOGIC;
    signal OUTPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal OUTPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln25_reg_430 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln25_reg_430_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phi_ln26_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln26_reg_442_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal phi_ln27_reg_454 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln28_reg_465 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln75_reg_615 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal Y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_cluster9_reg_1452 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_Y7_reg_1457 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_X5_reg_1462 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_Y_prot3_reg_1467 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_X_prot1_reg_1472 : STD_LOGIC_VECTOR (29 downto 0);
    signal OUTPUT_addr_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal INPUT_addr_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_addr_2_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_addr_3_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_1507_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_801_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln25_reg_1511 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_1_read_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1521_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_reg_1525 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_read_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln27_fu_835_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal trunc_ln27_fu_841_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln27_reg_1568 : STD_LOGIC_VECTOR (1 downto 0);
    signal X_prot_3_1_load_reg_1572 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_3_load_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_4_load_reg_1582 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_5_load_reg_1587 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state38_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln28_fu_883_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal trunc_ln28_fu_889_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_reg_1625 : STD_LOGIC_VECTOR (1 downto 0);
    signal Y_prot_3_1_load_reg_1629 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_3_load_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_4_load_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_5_load_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state41_io : BOOLEAN;
    signal it_fu_963_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal it_reg_1709 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_975_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_1717 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln45_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_1722 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln38_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln43_fu_987_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_reg_1737 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_fu_997_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1745 : STD_LOGIC_VECTOR (2 downto 0);
    signal x1_assign_fu_1007_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_assign_reg_1750 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y1_assign_fu_1021_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_assign_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_1039_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_1770 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal trunc_ln368_1_fu_1047_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_1_reg_1775 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_20_reg_1790 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_reg_1795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal min_distance_1_fu_1158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal belonging_cluster_in_2_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_fu_1172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_2_fu_1182_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1820 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_fu_1194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_1828 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln62_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1848 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_1852 : STD_LOGIC_VECTOR (0 downto 0);
    signal size_1_fu_1224_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal X_clus_1_fu_1231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_clus_1_fu_1238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_reg_1874 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal trunc_ln70_fu_1245_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1884 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln70_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1891 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal icmp_ln70_1_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_1897 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_reg_1904 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_prot_3_12_fu_1280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_12_reg_1912 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_15_fu_1304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_15_reg_1917 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_17_fu_1320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_17_reg_1922 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_18_fu_1328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_18_reg_1927 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_reg_1932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal icmp_ln75_fu_1435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state113_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state114_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state115_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state115_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln75_fu_1441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal cluster_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cluster_load_reg_1956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state113 : STD_LOGIC;
    signal X_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal X_ce0 : STD_LOGIC;
    signal X_we0 : STD_LOGIC;
    signal Y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Y_ce0 : STD_LOGIC;
    signal Y_we0 : STD_LOGIC;
    signal cluster_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cluster_ce0 : STD_LOGIC;
    signal cluster_we0 : STD_LOGIC;
    signal ap_phi_mux_phi_ln25_phi_fu_434_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_phi_ln26_phi_fu_446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal it_0_reg_476 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln56_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal belonging_cluster_in_reg_498 : STD_LOGIC_VECTOR (2 downto 0);
    signal min_distance_0_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal belonging_cluster_in_1_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_534 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal j_1_reg_546 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_taille_assign_phi_fu_561_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal taille_assign_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal somme_assign_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal somme_assign_1_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_19_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_19_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_1447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_6_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_7_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_8_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal X_prot_3_1_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_3_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_4_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_5_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_1_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_3_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_4_fu_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_5_fu_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_7_fu_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_8_fu_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_9_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_2_fu_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_6_fu_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_18_fu_1408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_7_fu_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_17_fu_1401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_8_fu_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_15_fu_1387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_2_fu_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_12_fu_1366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_626_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_630_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_636_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_fu_642_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_661_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln45_fu_1003_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_1051_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_1063_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln46_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_1_fu_1092_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1078_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_fu_1088_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln46_1_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1096_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_1_fu_1106_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln46_3_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_2_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal size_fu_1218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_fu_1254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_11_fu_1267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_13_fu_1288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_14_fu_1296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_3_16_fu_1312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_fu_1352_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_11_fu_1359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_13_fu_1373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_14_fu_1380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_3_16_fu_1394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_626_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_630_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fdiv_32ns_32ns_32_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_sitofp_32ns_32_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fptrunc_64ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kmeans_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_X_prot : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_Y_prot : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_X : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_cluster : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_INPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kmeans_OUTPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    kmeans_CONTROL_BUS_s_axi_U : component kmeans_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_X_prot => in_X_prot,
        in_Y_prot => in_Y_prot,
        in_X => in_X,
        in_Y => in_Y,
        out_cluster => out_cluster);

    kmeans_INPUT_r_m_axi_U : component kmeans_INPUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => INPUT_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => INPUT_r_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RID => INPUT_r_RID,
        I_RUSER => INPUT_r_RUSER,
        I_RRESP => INPUT_r_RRESP,
        I_RLAST => INPUT_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_r_BRESP,
        I_BID => INPUT_r_BID,
        I_BUSER => INPUT_r_BUSER);

    kmeans_OUTPUT_r_m_axi_U : component kmeans_OUTPUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RID => OUTPUT_r_RID,
        I_RUSER => OUTPUT_r_RUSER,
        I_RRESP => OUTPUT_r_RRESP,
        I_RLAST => OUTPUT_r_RLAST,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => OUTPUT_addr_reg_1483,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_80,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => cluster_load_reg_1956,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY,
        I_BRESP => OUTPUT_r_BRESP,
        I_BID => OUTPUT_r_BID,
        I_BUSER => OUTPUT_r_BUSER);

    X_U : component kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => X_address0,
        ce0 => X_ce0,
        we0 => X_we0,
        d0 => INPUT_addr_1_read_reg_1516,
        q0 => X_q0);

    Y_U : component kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Y_address0,
        ce0 => Y_ce0,
        we0 => Y_we0,
        d0 => INPUT_addr_read_reg_1530,
        q0 => Y_q0);

    cluster_U : component kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cluster_address0,
        ce0 => cluster_ce0,
        we0 => cluster_we0,
        d0 => belonging_cluster_in_1_reg_521,
        q0 => cluster_q0);

    kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_626_p0,
        din1 => reg_689,
        opcode => grp_fu_626_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_626_p2);

    kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1_U2 : component kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_630_p0,
        din1 => reg_694,
        opcode => grp_fu_630_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_630_p2);

    kmeans_fdiv_32ns_32ns_32_16_1_U3 : component kmeans_fdiv_32ns_32ns_32_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_636_p0,
        din1 => grp_fu_636_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_636_p2);

    kmeans_sitofp_32ns_32_6_1_U4 : component kmeans_sitofp_32ns_32_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_642_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_642_p1);

    kmeans_fptrunc_64ns_32_2_1_U5 : component kmeans_fptrunc_64ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_20_reg_1790,
        ce => ap_const_logic_1,
        dout => grp_fu_647_p1);

    kmeans_fpext_32ns_64_2_1_U6 : component kmeans_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_reg_1760,
        ce => ap_const_logic_1,
        dout => grp_fu_650_p1);

    kmeans_fpext_32ns_64_2_1_U7 : component kmeans_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_7_i_reg_1765,
        ce => ap_const_logic_1,
        dout => grp_fu_653_p1);

    kmeans_fcmp_32ns_32ns_1_2_1_U8 : component kmeans_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => distance_reg_1795,
        din1 => min_distance_0_reg_509,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_656_p2);

    kmeans_dadd_64ns_64ns_64_5_full_dsp_1_U9 : component kmeans_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_661_p0,
        din1 => grp_fu_661_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_661_p2);

    kmeans_mux_42_32_1_1_U10 : component kmeans_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => X_prot_3_7_fu_226,
        din1 => X_prot_3_8_fu_230,
        din2 => X_prot_3_9_fu_234,
        din3 => X_prot_3_2_fu_238,
        din4 => trunc_ln45_fu_1003_p1,
        dout => x1_assign_fu_1007_p6);

    kmeans_mux_42_32_1_1_U11 : component kmeans_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Y_prot_3_6_fu_242,
        din1 => Y_prot_3_7_fu_246,
        din2 => Y_prot_3_8_fu_250,
        din3 => Y_prot_3_2_fu_254,
        din4 => trunc_ln45_fu_1003_p1,
        dout => y1_assign_fu_1021_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln27_fu_829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln28_fu_877_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state113) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state113)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state113);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    X_prot_3_19_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_1207_p2 = ap_const_lv1_1) and (icmp_ln62_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                X_prot_3_19_reg_593 <= ap_const_lv32_0;
            elsif (((icmp_ln90_reg_1848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                X_prot_3_19_reg_593 <= grp_fu_636_p2;
            end if; 
        end if;
    end process;

    X_prot_3_2_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
                X_prot_3_2_fu_238 <= X_prot_3_12_reg_1912;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                X_prot_3_2_fu_238 <= X_prot_3_5_load_reg_1587;
            end if; 
        end if;
    end process;

    X_prot_3_7_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
                X_prot_3_7_fu_226 <= X_prot_3_18_reg_1927;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                X_prot_3_7_fu_226 <= X_prot_3_1_load_reg_1572;
            end if; 
        end if;
    end process;

    X_prot_3_8_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
                X_prot_3_8_fu_230 <= X_prot_3_17_reg_1922;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                X_prot_3_8_fu_230 <= X_prot_3_3_load_reg_1577;
            end if; 
        end if;
    end process;

    X_prot_3_9_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
                X_prot_3_9_fu_234 <= X_prot_3_15_reg_1917;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                X_prot_3_9_fu_234 <= X_prot_3_4_load_reg_1582;
            end if; 
        end if;
    end process;

    Y_prot_3_19_reg_604_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_1848 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                Y_prot_3_19_reg_604 <= ap_const_lv32_0;
            elsif (((icmp_ln90_reg_1848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                Y_prot_3_19_reg_604 <= grp_fu_636_p2;
            end if; 
        end if;
    end process;

    Y_prot_3_2_fu_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                Y_prot_3_2_fu_254 <= Y_prot_3_12_fu_1366_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                Y_prot_3_2_fu_254 <= Y_prot_3_5_load_reg_1644;
            end if; 
        end if;
    end process;

    Y_prot_3_6_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                Y_prot_3_6_fu_242 <= Y_prot_3_18_fu_1408_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                Y_prot_3_6_fu_242 <= Y_prot_3_1_load_reg_1629;
            end if; 
        end if;
    end process;

    Y_prot_3_7_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                Y_prot_3_7_fu_246 <= Y_prot_3_17_fu_1401_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                Y_prot_3_7_fu_246 <= Y_prot_3_3_load_reg_1634;
            end if; 
        end if;
    end process;

    Y_prot_3_8_fu_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                Y_prot_3_8_fu_250 <= Y_prot_3_15_fu_1387_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                Y_prot_3_8_fu_250 <= Y_prot_3_4_load_reg_1639;
            end if; 
        end if;
    end process;

    belonging_cluster_in_1_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                belonging_cluster_in_1_reg_521 <= belonging_cluster_in_2_fu_1165_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                belonging_cluster_in_1_reg_521 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    belonging_cluster_in_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                belonging_cluster_in_reg_498 <= i_reg_1745;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                belonging_cluster_in_reg_498 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_969_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_1_reg_534 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                i_1_reg_534 <= i_2_reg_1820;
            end if; 
        end if;
    end process;

    it_0_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                it_0_reg_476 <= it_reg_1709;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                it_0_reg_476 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                j_0_reg_487 <= ap_const_lv8_0;
            elsif (((icmp_ln43_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                j_0_reg_487 <= j_reg_1717;
            end if; 
        end if;
    end process;

    j_1_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                j_1_reg_546 <= j_2_reg_1828;
            elsif (((icmp_ln56_fu_1176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                j_1_reg_546 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    min_distance_0_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                min_distance_0_reg_509 <= min_distance_1_fu_1158_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                min_distance_0_reg_509 <= ap_const_lv32_47C34F80;
            end if; 
        end if;
    end process;

    phi_ln25_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln25_reg_430 <= add_ln25_reg_1511;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln25_reg_430 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_ln26_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_ln26_reg_442 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_ln26_reg_442 <= add_ln26_reg_1525;
            end if; 
        end if;
    end process;

    phi_ln27_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                phi_ln27_reg_454 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_fu_829_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                phi_ln27_reg_454 <= add_ln27_fu_835_p2;
            end if; 
        end if;
    end process;

    phi_ln28_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                phi_ln28_reg_465 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_fu_877_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                phi_ln28_reg_465 <= add_ln28_fu_883_p2;
            end if; 
        end if;
    end process;

    phi_ln75_reg_615_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                phi_ln75_reg_615 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_fu_1435_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                phi_ln75_reg_615 <= add_ln75_fu_1441_p2;
            end if; 
        end if;
    end process;

    somme_assign_1_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                somme_assign_1_reg_581 <= Y_clus_1_fu_1238_p3;
            elsif (((icmp_ln56_fu_1176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                somme_assign_1_reg_581 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    somme_assign_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                somme_assign_reg_569 <= X_clus_1_fu_1231_p3;
            elsif (((icmp_ln56_fu_1176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                somme_assign_reg_569 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    taille_assign_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                taille_assign_reg_557 <= size_1_fu_1224_p3;
            elsif (((icmp_ln56_fu_1176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                taille_assign_reg_557 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                INPUT_addr_1_read_reg_1516 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    INPUT_addr_2_reg_1495(29 downto 0) <= empty_7_fu_777_p1(32 - 1 downto 0)(29 downto 0);
                    INPUT_addr_3_reg_1501(29 downto 0) <= empty_8_fu_786_p1(32 - 1 downto 0)(29 downto 0);
                    INPUT_addr_reg_1489(29 downto 0) <= empty_5_fu_768_p1(32 - 1 downto 0)(29 downto 0);
                    OUTPUT_addr_reg_1483(29 downto 0) <= empty_fu_759_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                INPUT_addr_read_reg_1530 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                X_prot_3_12_reg_1912 <= X_prot_3_12_fu_1280_p3;
                X_prot_3_15_reg_1917 <= X_prot_3_15_fu_1304_p3;
                X_prot_3_17_reg_1922 <= X_prot_3_17_fu_1320_p3;
                X_prot_3_18_reg_1927 <= X_prot_3_18_fu_1328_p3;
                icmp_ln70_1_reg_1897 <= icmp_ln70_1_fu_1262_p2;
                icmp_ln70_2_reg_1904 <= icmp_ln70_2_fu_1275_p2;
                icmp_ln70_reg_1891 <= icmp_ln70_fu_1249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln27_reg_1568 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                X_prot_3_1_fu_194 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                X_prot_3_1_load_reg_1572 <= X_prot_3_1_fu_194;
                X_prot_3_3_load_reg_1577 <= X_prot_3_3_fu_198;
                X_prot_3_4_load_reg_1582 <= X_prot_3_4_fu_202;
                X_prot_3_5_load_reg_1587 <= X_prot_3_5_fu_206;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln27_reg_1568 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                X_prot_3_3_fu_198 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln27_reg_1568 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                X_prot_3_4_fu_202 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln27_reg_1568 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                X_prot_3_5_fu_206 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_1625 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                Y_prot_3_1_fu_210 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                Y_prot_3_1_load_reg_1629 <= Y_prot_3_1_fu_210;
                Y_prot_3_3_load_reg_1634 <= Y_prot_3_3_fu_214;
                Y_prot_3_4_load_reg_1639 <= Y_prot_3_4_fu_218;
                Y_prot_3_5_load_reg_1644 <= Y_prot_3_5_fu_222;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_1625 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                Y_prot_3_3_fu_214 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_1625 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                Y_prot_3_4_fu_218 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_1625 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                Y_prot_3_5_fu_222 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln25_reg_1511 <= add_ln25_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln26_reg_1525 <= add_ln26_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1942 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                cluster_load_reg_1956 <= cluster_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                distance_reg_1795 <= grp_fu_647_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_2_reg_1820 <= i_2_fu_1182_p2;
                    zext_ln56_reg_1812(2 downto 0) <= zext_ln56_fu_1172_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                i_reg_1745 <= i_fu_997_p2;
                    zext_ln43_reg_1737(2 downto 0) <= zext_ln43_fu_987_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln25_reg_1507 <= icmp_ln25_fu_795_p2;
                icmp_ln25_reg_1507_pp0_iter1_reg <= icmp_ln25_reg_1507;
                phi_ln25_reg_430_pp0_iter1_reg <= phi_ln25_reg_430;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln26_reg_1521 <= icmp_ln26_fu_812_p2;
                icmp_ln26_reg_1521_pp1_iter1_reg <= icmp_ln26_reg_1521;
                phi_ln26_reg_442_pp1_iter1_reg <= phi_ln26_reg_442;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln27_reg_1559 <= icmp_ln27_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln28_reg_1616 <= icmp_ln28_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                icmp_ln63_reg_1852 <= icmp_ln63_fu_1213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln75_reg_1942 <= icmp_ln75_fu_1435_p2;
                icmp_ln75_reg_1942_pp4_iter1_reg <= icmp_ln75_reg_1942;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                icmp_ln90_reg_1848 <= icmp_ln90_fu_1207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_X5_reg_1462 <= in_X(31 downto 2);
                in_X_prot1_reg_1472 <= in_X_prot(31 downto 2);
                in_Y7_reg_1457 <= in_Y(31 downto 2);
                in_Y_prot3_reg_1467 <= in_Y_prot(31 downto 2);
                out_cluster9_reg_1452 <= out_cluster(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                it_reg_1709 <= it_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                j_2_reg_1828 <= j_2_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                j_reg_1717 <= j_fu_975_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_689 <= X_q0;
                reg_694 <= Y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_7_i_reg_1765 <= grp_fu_630_p2;
                tmp_i_reg_1760 <= grp_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                tmp_i1_reg_1874 <= grp_fu_642_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                tmp_i2_reg_1932 <= grp_fu_642_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                tmp_i_20_reg_1790 <= grp_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_fu_829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                trunc_ln27_reg_1568 <= trunc_ln27_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_fu_877_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                trunc_ln28_reg_1625 <= trunc_ln28_fu_889_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                trunc_ln368_1_reg_1775 <= trunc_ln368_1_fu_1047_p1;
                trunc_ln368_reg_1770 <= trunc_ln368_fu_1039_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                trunc_ln70_reg_1884 <= trunc_ln70_fu_1245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                x1_assign_reg_1750 <= x1_assign_fu_1007_p6;
                y1_assign_reg_1755 <= y1_assign_fu_1021_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    zext_ln45_reg_1722(7 downto 0) <= zext_ln45_fu_981_p1(7 downto 0);
            end if;
        end if;
    end process;
    OUTPUT_addr_reg_1483(31 downto 30) <= "00";
    INPUT_addr_reg_1489(31 downto 30) <= "00";
    INPUT_addr_2_reg_1495(31 downto 30) <= "00";
    INPUT_addr_3_reg_1501(31 downto 30) <= "00";
    zext_ln45_reg_1722(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln43_reg_1737(31 downto 3) <= "00000000000000000000000000000";
    zext_ln56_reg_1812(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state31, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state22, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state41, icmp_ln36_fu_957_p2, ap_enable_reg_pp4_iter2, ap_CS_fsm_state120, INPUT_r_ARREADY, OUTPUT_r_BVALID, icmp_ln25_fu_795_p2, ap_enable_reg_pp0_iter0, icmp_ln26_fu_812_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_block_state41_io, ap_CS_fsm_state42, icmp_ln38_fu_969_p2, ap_CS_fsm_state44, icmp_ln43_fu_991_p2, ap_CS_fsm_state61, ap_CS_fsm_state62, icmp_ln62_fu_1188_p2, icmp_ln90_fu_1207_p2, icmp_ln90_reg_1848, ap_CS_fsm_state90, icmp_ln75_fu_1435_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, icmp_ln56_fu_1176_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_795_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_795_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln26_fu_812_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln26_fu_812_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln38_fu_969_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln43_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln56_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln90_fu_1207_p2 = ap_const_lv1_1) and (icmp_ln62_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                elsif (((icmp_ln62_fu_1188_p2 = ap_const_lv1_1) and (icmp_ln90_fu_1207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((icmp_ln90_reg_1848 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln75_fu_1435_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln75_fu_1435_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_ARADDR_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state22, INPUT_r_ARREADY, INPUT_addr_reg_1489, INPUT_addr_2_reg_1495, INPUT_addr_3_reg_1501, empty_6_fu_749_p1)
    begin
        if ((ap_const_logic_1 = INPUT_r_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                INPUT_r_ARADDR <= INPUT_addr_2_reg_1495;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                INPUT_r_ARADDR <= INPUT_addr_3_reg_1501;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                INPUT_r_ARADDR <= INPUT_addr_reg_1489;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                INPUT_r_ARADDR <= empty_6_fu_749_p1(32 - 1 downto 0);
            else 
                INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARLEN_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state22, INPUT_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            INPUT_r_ARLEN <= ap_const_lv32_4;
        elsif ((((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            INPUT_r_ARLEN <= ap_const_lv32_80;
        else 
            INPUT_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state22, INPUT_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            INPUT_r_ARVALID <= ap_const_logic_1;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln26_reg_1521, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_1507, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln28_reg_1616, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln27_reg_1559, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            INPUT_r_RREADY <= ap_const_logic_1;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_blk_n_AR_assign_proc : process(m_axi_INPUT_r_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            INPUT_r_blk_n_AR <= m_axi_INPUT_r_ARREADY;
        else 
            INPUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_r_blk_n_R_assign_proc : process(m_axi_INPUT_r_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln26_reg_1521, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_1507, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln28_reg_1616, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln27_reg_1559)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            INPUT_r_blk_n_R <= m_axi_INPUT_r_RVALID;
        else 
            INPUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state41, icmp_ln36_fu_957_p2, ap_block_state41_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state41_io) and (icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            OUTPUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(ap_CS_fsm_state120, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            OUTPUT_r_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln75_reg_1942_pp4_iter1_reg, ap_block_pp4_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1942_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_blk_n_AW_assign_proc : process(m_axi_OUTPUT_r_AWREADY, ap_CS_fsm_state41, icmp_ln36_fu_957_p2)
    begin
        if (((icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            OUTPUT_r_blk_n_AW <= m_axi_OUTPUT_r_AWREADY;
        else 
            OUTPUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_B_assign_proc : process(m_axi_OUTPUT_r_BVALID, ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            OUTPUT_r_blk_n_B <= m_axi_OUTPUT_r_BVALID;
        else 
            OUTPUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_W_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, icmp_ln75_reg_1942_pp4_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln75_reg_1942_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    X_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state42, zext_ln45_fu_981_p1, ap_CS_fsm_state62, ap_enable_reg_pp0_iter2, zext_ln25_fu_807_p1, zext_ln63_fu_1200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            X_address0 <= zext_ln63_fu_1200_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            X_address0 <= zext_ln45_fu_981_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_address0 <= zext_ln25_fu_807_p1(7 - 1 downto 0);
        else 
            X_address0 <= "XXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state42, ap_CS_fsm_state62, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_clus_1_fu_1231_p3 <= 
        grp_fu_626_p2 when (icmp_ln63_reg_1852(0) = '1') else 
        somme_assign_reg_569;
    X_prot_3_11_fu_1267_p3 <= 
        X_prot_3_2_fu_238 when (icmp_ln70_1_fu_1262_p2(0) = '1') else 
        X_prot_3_fu_1254_p3;
    X_prot_3_12_fu_1280_p3 <= 
        X_prot_3_2_fu_238 when (icmp_ln70_2_fu_1275_p2(0) = '1') else 
        X_prot_3_11_fu_1267_p3;
    X_prot_3_13_fu_1288_p3 <= 
        X_prot_3_19_reg_593 when (icmp_ln70_fu_1249_p2(0) = '1') else 
        X_prot_3_9_fu_234;
    X_prot_3_14_fu_1296_p3 <= 
        X_prot_3_9_fu_234 when (icmp_ln70_1_fu_1262_p2(0) = '1') else 
        X_prot_3_13_fu_1288_p3;
    X_prot_3_15_fu_1304_p3 <= 
        X_prot_3_9_fu_234 when (icmp_ln70_2_fu_1275_p2(0) = '1') else 
        X_prot_3_14_fu_1296_p3;
    X_prot_3_16_fu_1312_p3 <= 
        X_prot_3_19_reg_593 when (icmp_ln70_1_fu_1262_p2(0) = '1') else 
        X_prot_3_8_fu_230;
    X_prot_3_17_fu_1320_p3 <= 
        X_prot_3_8_fu_230 when (icmp_ln70_2_fu_1275_p2(0) = '1') else 
        X_prot_3_16_fu_1312_p3;
    X_prot_3_18_fu_1328_p3 <= 
        X_prot_3_19_reg_593 when (icmp_ln70_2_fu_1275_p2(0) = '1') else 
        X_prot_3_7_fu_226;
    X_prot_3_fu_1254_p3 <= 
        X_prot_3_2_fu_238 when (icmp_ln70_fu_1249_p2(0) = '1') else 
        X_prot_3_19_reg_593;

    X_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln25_reg_1507_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_1507_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_we0 <= ap_const_logic_1;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state42, zext_ln45_fu_981_p1, ap_CS_fsm_state62, ap_enable_reg_pp1_iter2, zext_ln26_fu_824_p1, zext_ln63_fu_1200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            Y_address0 <= zext_ln63_fu_1200_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            Y_address0 <= zext_ln45_fu_981_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            Y_address0 <= zext_ln26_fu_824_p1(7 - 1 downto 0);
        else 
            Y_address0 <= "XXXXXXX";
        end if; 
    end process;


    Y_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state42, ap_CS_fsm_state62, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_clus_1_fu_1238_p3 <= 
        grp_fu_630_p2 when (icmp_ln63_reg_1852(0) = '1') else 
        somme_assign_1_reg_581;
    Y_prot_3_11_fu_1359_p3 <= 
        Y_prot_3_2_fu_254 when (icmp_ln70_1_reg_1897(0) = '1') else 
        Y_prot_3_fu_1352_p3;
    Y_prot_3_12_fu_1366_p3 <= 
        Y_prot_3_2_fu_254 when (icmp_ln70_2_reg_1904(0) = '1') else 
        Y_prot_3_11_fu_1359_p3;
    Y_prot_3_13_fu_1373_p3 <= 
        Y_prot_3_19_reg_604 when (icmp_ln70_reg_1891(0) = '1') else 
        Y_prot_3_8_fu_250;
    Y_prot_3_14_fu_1380_p3 <= 
        Y_prot_3_8_fu_250 when (icmp_ln70_1_reg_1897(0) = '1') else 
        Y_prot_3_13_fu_1373_p3;
    Y_prot_3_15_fu_1387_p3 <= 
        Y_prot_3_8_fu_250 when (icmp_ln70_2_reg_1904(0) = '1') else 
        Y_prot_3_14_fu_1380_p3;
    Y_prot_3_16_fu_1394_p3 <= 
        Y_prot_3_19_reg_604 when (icmp_ln70_1_reg_1897(0) = '1') else 
        Y_prot_3_7_fu_246;
    Y_prot_3_17_fu_1401_p3 <= 
        Y_prot_3_7_fu_246 when (icmp_ln70_2_reg_1904(0) = '1') else 
        Y_prot_3_16_fu_1394_p3;
    Y_prot_3_18_fu_1408_p3 <= 
        Y_prot_3_19_reg_604 when (icmp_ln70_2_reg_1904(0) = '1') else 
        Y_prot_3_6_fu_242;
    Y_prot_3_fu_1352_p3 <= 
        Y_prot_3_2_fu_254 when (icmp_ln70_reg_1891(0) = '1') else 
        Y_prot_3_19_reg_604;

    Y_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln26_reg_1521_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln26_reg_1521_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            Y_we0 <= ap_const_logic_1;
        else 
            Y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_fu_801_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln25_phi_fu_434_p4) + unsigned(ap_const_lv8_1));
    add_ln26_fu_818_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln26_phi_fu_446_p4) + unsigned(ap_const_lv8_1));
    add_ln27_fu_835_p2 <= std_logic_vector(unsigned(phi_ln27_reg_454) + unsigned(ap_const_lv3_1));
    add_ln28_fu_883_p2 <= std_logic_vector(unsigned(phi_ln28_reg_465) + unsigned(ap_const_lv3_1));
    add_ln75_fu_1441_p2 <= std_logic_vector(unsigned(phi_ln75_reg_615) + unsigned(ap_const_lv8_1));
    and_ln46_1_fu_1152_p2 <= (grp_fu_656_p2 and and_ln46_fu_1146_p2);
    and_ln46_fu_1146_p2 <= (or_ln46_fu_1122_p2 and or_ln46_1_fu_1140_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(106);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state111 <= ap_CS_fsm(104);
    ap_CS_fsm_state112 <= ap_CS_fsm(105);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state120 <= ap_CS_fsm(111);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state37 <= ap_CS_fsm(31);
    ap_CS_fsm_state40 <= ap_CS_fsm(33);
    ap_CS_fsm_state41 <= ap_CS_fsm(34);
    ap_CS_fsm_state42 <= ap_CS_fsm(35);
    ap_CS_fsm_state43 <= ap_CS_fsm(36);
    ap_CS_fsm_state44 <= ap_CS_fsm(37);
    ap_CS_fsm_state45 <= ap_CS_fsm(38);
    ap_CS_fsm_state49 <= ap_CS_fsm(42);
    ap_CS_fsm_state50 <= ap_CS_fsm(43);
    ap_CS_fsm_state51 <= ap_CS_fsm(44);
    ap_CS_fsm_state52 <= ap_CS_fsm(45);
    ap_CS_fsm_state56 <= ap_CS_fsm(49);
    ap_CS_fsm_state57 <= ap_CS_fsm(50);
    ap_CS_fsm_state58 <= ap_CS_fsm(51);
    ap_CS_fsm_state59 <= ap_CS_fsm(52);
    ap_CS_fsm_state60 <= ap_CS_fsm(53);
    ap_CS_fsm_state61 <= ap_CS_fsm(54);
    ap_CS_fsm_state62 <= ap_CS_fsm(55);
    ap_CS_fsm_state63 <= ap_CS_fsm(56);
    ap_CS_fsm_state64 <= ap_CS_fsm(57);
    ap_CS_fsm_state68 <= ap_CS_fsm(61);
    ap_CS_fsm_state73 <= ap_CS_fsm(66);
    ap_CS_fsm_state74 <= ap_CS_fsm(67);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state89 <= ap_CS_fsm(82);
    ap_CS_fsm_state90 <= ap_CS_fsm(83);
    ap_CS_fsm_state95 <= ap_CS_fsm(88);
    ap_CS_fsm_state96 <= ap_CS_fsm(89);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln25_reg_1507, INPUT_r_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln25_reg_1507, INPUT_r_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln26_reg_1521, INPUT_r_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln26_reg_1521, INPUT_r_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln27_reg_1559, INPUT_r_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln27_reg_1559, INPUT_r_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln27_reg_1559 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln28_reg_1616, INPUT_r_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln28_reg_1616, INPUT_r_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln28_reg_1616 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state115_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state115_io));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state115_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state115_io));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln25_reg_1507, INPUT_r_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln25_reg_1507 = ap_const_lv1_0));
    end process;

        ap_block_state113_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state115_io_assign_proc : process(icmp_ln75_reg_1942_pp4_iter1_reg, OUTPUT_r_WREADY)
    begin
                ap_block_state115_io <= ((ap_const_logic_0 = OUTPUT_r_WREADY) and (icmp_ln75_reg_1942_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state115_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(icmp_ln26_reg_1521, INPUT_r_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln26_reg_1521 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_pp2_stage0_iter1_assign_proc : process(icmp_ln27_reg_1559, INPUT_r_RVALID)
    begin
                ap_block_state30_pp2_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln27_reg_1559 = ap_const_lv1_0));
    end process;

        ap_block_state38_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp3_stage0_iter1_assign_proc : process(icmp_ln28_reg_1616, INPUT_r_RVALID)
    begin
                ap_block_state39_pp3_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln28_reg_1616 = ap_const_lv1_0));
    end process;


    ap_block_state41_io_assign_proc : process(icmp_ln36_fu_957_p2, OUTPUT_r_AWREADY)
    begin
                ap_block_state41_io <= ((icmp_ln36_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_AWREADY));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln25_fu_795_p2)
    begin
        if ((icmp_ln25_fu_795_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln26_fu_812_p2)
    begin
        if ((icmp_ln26_fu_812_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state113_assign_proc : process(icmp_ln75_fu_1435_p2)
    begin
        if ((icmp_ln75_fu_1435_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state113 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state113 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state120, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln25_phi_fu_434_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_1507, phi_ln25_reg_430, add_ln25_reg_1511)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln25_reg_1507 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_phi_ln25_phi_fu_434_p4 <= add_ln25_reg_1511;
        else 
            ap_phi_mux_phi_ln25_phi_fu_434_p4 <= phi_ln25_reg_430;
        end if; 
    end process;


    ap_phi_mux_phi_ln26_phi_fu_446_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln26_reg_1521, phi_ln26_reg_442, add_ln26_reg_1525)
    begin
        if (((icmp_ln26_reg_1521 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_phi_ln26_phi_fu_446_p4 <= add_ln26_reg_1525;
        else 
            ap_phi_mux_phi_ln26_phi_fu_446_p4 <= phi_ln26_reg_442;
        end if; 
    end process;

    ap_phi_mux_taille_assign_phi_fu_561_p4 <= taille_assign_reg_557;

    ap_ready_assign_proc : process(ap_CS_fsm_state120, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    belonging_cluster_in_2_fu_1165_p3 <= 
        zext_ln43_reg_1737 when (and_ln46_1_fu_1152_p2(0) = '1') else 
        belonging_cluster_in_1_reg_521;
    bitcast_ln46_1_fu_1092_p1 <= min_distance_0_reg_509;
    bitcast_ln46_fu_1075_p1 <= distance_reg_1795;

    cluster_address0_assign_proc : process(ap_block_pp4_stage0, zext_ln45_reg_1722, ap_CS_fsm_state44, ap_CS_fsm_state62, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln63_fu_1200_p1, zext_ln75_fu_1447_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            cluster_address0 <= zext_ln75_fu_1447_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            cluster_address0 <= zext_ln63_fu_1200_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            cluster_address0 <= zext_ln45_reg_1722(7 - 1 downto 0);
        else 
            cluster_address0 <= "XXXXXXX";
        end if; 
    end process;


    cluster_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state62, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            cluster_ce0 <= ap_const_logic_1;
        else 
            cluster_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cluster_we0_assign_proc : process(ap_CS_fsm_state44, icmp_ln43_fu_991_p2)
    begin
        if (((icmp_ln43_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            cluster_we0 <= ap_const_logic_1;
        else 
            cluster_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_Y7_reg_1457),64));
    empty_6_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_X5_reg_1462),64));
    empty_7_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_Y_prot3_reg_1467),64));
    empty_8_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_X_prot1_reg_1472),64));
    empty_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_cluster9_reg_1452),64));

    grp_fu_626_opcode_assign_proc : process(icmp_ln63_reg_1852, ap_CS_fsm_state45, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_626_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln63_reg_1852 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            grp_fu_626_opcode <= ap_const_lv2_0;
        else 
            grp_fu_626_opcode <= "XX";
        end if; 
    end process;


    grp_fu_626_p0_assign_proc : process(x1_assign_reg_1750, somme_assign_reg_569, ap_CS_fsm_state45, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_626_p0 <= somme_assign_reg_569;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_626_p0 <= x1_assign_reg_1750;
        else 
            grp_fu_626_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_630_opcode_assign_proc : process(icmp_ln63_reg_1852, ap_CS_fsm_state45, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_630_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln63_reg_1852 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            grp_fu_630_opcode <= ap_const_lv2_0;
        else 
            grp_fu_630_opcode <= "XX";
        end if; 
    end process;


    grp_fu_630_p0_assign_proc : process(y1_assign_reg_1755, somme_assign_1_reg_581, ap_CS_fsm_state45, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_630_p0 <= somme_assign_1_reg_581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_630_p0 <= y1_assign_reg_1755;
        else 
            grp_fu_630_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_636_p0_assign_proc : process(somme_assign_reg_569, somme_assign_1_reg_581, ap_CS_fsm_state74, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_636_p0 <= somme_assign_1_reg_581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_636_p0 <= somme_assign_reg_569;
        else 
            grp_fu_636_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_636_p1_assign_proc : process(tmp_i1_reg_1874, tmp_i2_reg_1932, ap_CS_fsm_state74, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_636_p1 <= tmp_i2_reg_1932;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_636_p1 <= tmp_i1_reg_1874;
        else 
            grp_fu_636_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_642_p0_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state90, ap_phi_mux_taille_assign_phi_fu_561_p4, taille_assign_reg_557)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_642_p0 <= taille_assign_reg_557;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_642_p0 <= ap_phi_mux_taille_assign_phi_fu_561_p4;
        else 
            grp_fu_642_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_661_p0 <= p_Result_s_fu_1051_p3;
    grp_fu_661_p1 <= p_Result_1_fu_1063_p3;
    i_2_fu_1182_p2 <= std_logic_vector(unsigned(i_1_reg_534) + unsigned(ap_const_lv3_1));
    i_fu_997_p2 <= std_logic_vector(unsigned(belonging_cluster_in_reg_498) + unsigned(ap_const_lv3_1));
    icmp_ln25_fu_795_p2 <= "1" when (ap_phi_mux_phi_ln25_phi_fu_434_p4 = ap_const_lv8_80) else "0";
    icmp_ln26_fu_812_p2 <= "1" when (ap_phi_mux_phi_ln26_phi_fu_446_p4 = ap_const_lv8_80) else "0";
    icmp_ln27_fu_829_p2 <= "1" when (phi_ln27_reg_454 = ap_const_lv3_4) else "0";
    icmp_ln28_fu_877_p2 <= "1" when (phi_ln28_reg_465 = ap_const_lv3_4) else "0";
    icmp_ln36_fu_957_p2 <= "1" when (it_0_reg_476 = ap_const_lv4_A) else "0";
    icmp_ln38_fu_969_p2 <= "1" when (j_0_reg_487 = ap_const_lv8_80) else "0";
    icmp_ln43_fu_991_p2 <= "1" when (belonging_cluster_in_reg_498 = ap_const_lv3_4) else "0";
    icmp_ln46_1_fu_1116_p2 <= "1" when (trunc_ln46_fu_1088_p1 = ap_const_lv23_0) else "0";
    icmp_ln46_2_fu_1128_p2 <= "0" when (tmp_6_fu_1096_p4 = ap_const_lv8_FF) else "1";
    icmp_ln46_3_fu_1134_p2 <= "1" when (trunc_ln46_1_fu_1106_p1 = ap_const_lv23_0) else "0";
    icmp_ln46_fu_1110_p2 <= "0" when (tmp_fu_1078_p4 = ap_const_lv8_FF) else "1";
    icmp_ln56_fu_1176_p2 <= "1" when (i_1_reg_534 = ap_const_lv3_4) else "0";
    icmp_ln62_fu_1188_p2 <= "1" when (j_1_reg_546 = ap_const_lv8_80) else "0";
    icmp_ln63_fu_1213_p2 <= "1" when (cluster_q0 = zext_ln56_reg_1812) else "0";
    icmp_ln70_1_fu_1262_p2 <= "1" when (trunc_ln70_reg_1884 = ap_const_lv2_1) else "0";
    icmp_ln70_2_fu_1275_p2 <= "1" when (trunc_ln70_reg_1884 = ap_const_lv2_0) else "0";
    icmp_ln70_fu_1249_p2 <= "1" when (trunc_ln70_reg_1884 = ap_const_lv2_2) else "0";
    icmp_ln75_fu_1435_p2 <= "1" when (phi_ln75_reg_615 = ap_const_lv8_80) else "0";
    icmp_ln90_fu_1207_p2 <= "1" when (taille_assign_reg_557 = ap_const_lv32_0) else "0";
    it_fu_963_p2 <= std_logic_vector(unsigned(it_0_reg_476) + unsigned(ap_const_lv4_1));
    j_2_fu_1194_p2 <= std_logic_vector(unsigned(j_1_reg_546) + unsigned(ap_const_lv8_1));
    j_fu_975_p2 <= std_logic_vector(unsigned(j_0_reg_487) + unsigned(ap_const_lv8_1));
    min_distance_1_fu_1158_p3 <= 
        distance_reg_1795 when (and_ln46_1_fu_1152_p2(0) = '1') else 
        min_distance_0_reg_509;
    or_ln46_1_fu_1140_p2 <= (icmp_ln46_3_fu_1134_p2 or icmp_ln46_2_fu_1128_p2);
    or_ln46_fu_1122_p2 <= (icmp_ln46_fu_1110_p2 or icmp_ln46_1_fu_1116_p2);
    p_Result_1_fu_1063_p3 <= (ap_const_lv1_0 & trunc_ln368_1_reg_1775);
    p_Result_s_fu_1051_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_1770);
    p_Val2_1_fu_1043_p1 <= grp_fu_653_p1;
    p_Val2_s_fu_1035_p1 <= grp_fu_650_p1;
    size_1_fu_1224_p3 <= 
        size_fu_1218_p2 when (icmp_ln63_reg_1852(0) = '1') else 
        taille_assign_reg_557;
    size_fu_1218_p2 <= std_logic_vector(unsigned(taille_assign_reg_557) + unsigned(ap_const_lv32_1));
    tmp_6_fu_1096_p4 <= bitcast_ln46_1_fu_1092_p1(30 downto 23);
    tmp_fu_1078_p4 <= bitcast_ln46_fu_1075_p1(30 downto 23);
    trunc_ln27_fu_841_p1 <= phi_ln27_reg_454(2 - 1 downto 0);
    trunc_ln28_fu_889_p1 <= phi_ln28_reg_465(2 - 1 downto 0);
    trunc_ln368_1_fu_1047_p1 <= p_Val2_1_fu_1043_p1(63 - 1 downto 0);
    trunc_ln368_fu_1039_p1 <= p_Val2_s_fu_1035_p1(63 - 1 downto 0);
    trunc_ln45_fu_1003_p1 <= belonging_cluster_in_reg_498(2 - 1 downto 0);
    trunc_ln46_1_fu_1106_p1 <= bitcast_ln46_1_fu_1092_p1(23 - 1 downto 0);
    trunc_ln46_fu_1088_p1 <= bitcast_ln46_fu_1075_p1(23 - 1 downto 0);
    trunc_ln70_fu_1245_p1 <= i_1_reg_534(2 - 1 downto 0);
    zext_ln25_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln25_reg_430_pp0_iter1_reg),64));
    zext_ln26_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln26_reg_442_pp1_iter1_reg),64));
    zext_ln43_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(belonging_cluster_in_reg_498),32));
    zext_ln45_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_487),64));
    zext_ln56_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_534),32));
    zext_ln63_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_546),64));
    zext_ln75_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln75_reg_615),64));
end behav;
