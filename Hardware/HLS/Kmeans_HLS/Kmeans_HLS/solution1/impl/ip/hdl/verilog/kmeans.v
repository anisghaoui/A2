// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=128227,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=7,HLS_SYN_FF=5836,HLS_SYN_LUT=8087,HLS_VERSION=2019_1}" *)

module kmeans (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 112'd1;
parameter    ap_ST_fsm_state2 = 112'd2;
parameter    ap_ST_fsm_state3 = 112'd4;
parameter    ap_ST_fsm_state4 = 112'd8;
parameter    ap_ST_fsm_state5 = 112'd16;
parameter    ap_ST_fsm_state6 = 112'd32;
parameter    ap_ST_fsm_state7 = 112'd64;
parameter    ap_ST_fsm_state8 = 112'd128;
parameter    ap_ST_fsm_pp0_stage0 = 112'd256;
parameter    ap_ST_fsm_state12 = 112'd512;
parameter    ap_ST_fsm_state13 = 112'd1024;
parameter    ap_ST_fsm_state14 = 112'd2048;
parameter    ap_ST_fsm_state15 = 112'd4096;
parameter    ap_ST_fsm_state16 = 112'd8192;
parameter    ap_ST_fsm_state17 = 112'd16384;
parameter    ap_ST_fsm_state18 = 112'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 112'd65536;
parameter    ap_ST_fsm_state22 = 112'd131072;
parameter    ap_ST_fsm_state23 = 112'd262144;
parameter    ap_ST_fsm_state24 = 112'd524288;
parameter    ap_ST_fsm_state25 = 112'd1048576;
parameter    ap_ST_fsm_state26 = 112'd2097152;
parameter    ap_ST_fsm_state27 = 112'd4194304;
parameter    ap_ST_fsm_state28 = 112'd8388608;
parameter    ap_ST_fsm_pp2_stage0 = 112'd16777216;
parameter    ap_ST_fsm_state31 = 112'd33554432;
parameter    ap_ST_fsm_state32 = 112'd67108864;
parameter    ap_ST_fsm_state33 = 112'd134217728;
parameter    ap_ST_fsm_state34 = 112'd268435456;
parameter    ap_ST_fsm_state35 = 112'd536870912;
parameter    ap_ST_fsm_state36 = 112'd1073741824;
parameter    ap_ST_fsm_state37 = 112'd2147483648;
parameter    ap_ST_fsm_pp3_stage0 = 112'd4294967296;
parameter    ap_ST_fsm_state40 = 112'd8589934592;
parameter    ap_ST_fsm_state41 = 112'd17179869184;
parameter    ap_ST_fsm_state42 = 112'd34359738368;
parameter    ap_ST_fsm_state43 = 112'd68719476736;
parameter    ap_ST_fsm_state44 = 112'd137438953472;
parameter    ap_ST_fsm_state45 = 112'd274877906944;
parameter    ap_ST_fsm_state46 = 112'd549755813888;
parameter    ap_ST_fsm_state47 = 112'd1099511627776;
parameter    ap_ST_fsm_state48 = 112'd2199023255552;
parameter    ap_ST_fsm_state49 = 112'd4398046511104;
parameter    ap_ST_fsm_state50 = 112'd8796093022208;
parameter    ap_ST_fsm_state51 = 112'd17592186044416;
parameter    ap_ST_fsm_state52 = 112'd35184372088832;
parameter    ap_ST_fsm_state53 = 112'd70368744177664;
parameter    ap_ST_fsm_state54 = 112'd140737488355328;
parameter    ap_ST_fsm_state55 = 112'd281474976710656;
parameter    ap_ST_fsm_state56 = 112'd562949953421312;
parameter    ap_ST_fsm_state57 = 112'd1125899906842624;
parameter    ap_ST_fsm_state58 = 112'd2251799813685248;
parameter    ap_ST_fsm_state59 = 112'd4503599627370496;
parameter    ap_ST_fsm_state60 = 112'd9007199254740992;
parameter    ap_ST_fsm_state61 = 112'd18014398509481984;
parameter    ap_ST_fsm_state62 = 112'd36028797018963968;
parameter    ap_ST_fsm_state63 = 112'd72057594037927936;
parameter    ap_ST_fsm_state64 = 112'd144115188075855872;
parameter    ap_ST_fsm_state65 = 112'd288230376151711744;
parameter    ap_ST_fsm_state66 = 112'd576460752303423488;
parameter    ap_ST_fsm_state67 = 112'd1152921504606846976;
parameter    ap_ST_fsm_state68 = 112'd2305843009213693952;
parameter    ap_ST_fsm_state69 = 112'd4611686018427387904;
parameter    ap_ST_fsm_state70 = 112'd9223372036854775808;
parameter    ap_ST_fsm_state71 = 112'd18446744073709551616;
parameter    ap_ST_fsm_state72 = 112'd36893488147419103232;
parameter    ap_ST_fsm_state73 = 112'd73786976294838206464;
parameter    ap_ST_fsm_state74 = 112'd147573952589676412928;
parameter    ap_ST_fsm_state75 = 112'd295147905179352825856;
parameter    ap_ST_fsm_state76 = 112'd590295810358705651712;
parameter    ap_ST_fsm_state77 = 112'd1180591620717411303424;
parameter    ap_ST_fsm_state78 = 112'd2361183241434822606848;
parameter    ap_ST_fsm_state79 = 112'd4722366482869645213696;
parameter    ap_ST_fsm_state80 = 112'd9444732965739290427392;
parameter    ap_ST_fsm_state81 = 112'd18889465931478580854784;
parameter    ap_ST_fsm_state82 = 112'd37778931862957161709568;
parameter    ap_ST_fsm_state83 = 112'd75557863725914323419136;
parameter    ap_ST_fsm_state84 = 112'd151115727451828646838272;
parameter    ap_ST_fsm_state85 = 112'd302231454903657293676544;
parameter    ap_ST_fsm_state86 = 112'd604462909807314587353088;
parameter    ap_ST_fsm_state87 = 112'd1208925819614629174706176;
parameter    ap_ST_fsm_state88 = 112'd2417851639229258349412352;
parameter    ap_ST_fsm_state89 = 112'd4835703278458516698824704;
parameter    ap_ST_fsm_state90 = 112'd9671406556917033397649408;
parameter    ap_ST_fsm_state91 = 112'd19342813113834066795298816;
parameter    ap_ST_fsm_state92 = 112'd38685626227668133590597632;
parameter    ap_ST_fsm_state93 = 112'd77371252455336267181195264;
parameter    ap_ST_fsm_state94 = 112'd154742504910672534362390528;
parameter    ap_ST_fsm_state95 = 112'd309485009821345068724781056;
parameter    ap_ST_fsm_state96 = 112'd618970019642690137449562112;
parameter    ap_ST_fsm_state97 = 112'd1237940039285380274899124224;
parameter    ap_ST_fsm_state98 = 112'd2475880078570760549798248448;
parameter    ap_ST_fsm_state99 = 112'd4951760157141521099596496896;
parameter    ap_ST_fsm_state100 = 112'd9903520314283042199192993792;
parameter    ap_ST_fsm_state101 = 112'd19807040628566084398385987584;
parameter    ap_ST_fsm_state102 = 112'd39614081257132168796771975168;
parameter    ap_ST_fsm_state103 = 112'd79228162514264337593543950336;
parameter    ap_ST_fsm_state104 = 112'd158456325028528675187087900672;
parameter    ap_ST_fsm_state105 = 112'd316912650057057350374175801344;
parameter    ap_ST_fsm_state106 = 112'd633825300114114700748351602688;
parameter    ap_ST_fsm_state107 = 112'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state108 = 112'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state109 = 112'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state110 = 112'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state111 = 112'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state112 = 112'd40564819207303340847894502572032;
parameter    ap_ST_fsm_pp4_stage0 = 112'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state116 = 112'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state117 = 112'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state118 = 112'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state119 = 112'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state120 = 112'd2596148429267413814265248164610048;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_AWID;
output  [7:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_ARID;
output  [7:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1:0] m_axi_INPUT_r_BUSER;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_AWID;
output  [7:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_ARID;
output  [7:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_OUTPUT_r_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [111:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_X_prot;
wire   [31:0] in_Y_prot;
wire   [31:0] in_X;
wire   [31:0] in_Y;
wire   [31:0] out_cluster;
reg    INPUT_r_blk_n_AR;
wire    ap_CS_fsm_state12;
reg    INPUT_r_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln26_reg_1521;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_1507;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln28_reg_1616;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln27_reg_1559;
reg    OUTPUT_r_blk_n_AW;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln36_fu_957_p2;
reg    OUTPUT_r_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln75_reg_1942;
reg   [0:0] icmp_ln75_reg_1942_pp4_iter1_reg;
reg    OUTPUT_r_blk_n_B;
wire    ap_CS_fsm_state120;
wire    INPUT_r_AWREADY;
wire    INPUT_r_WREADY;
reg    INPUT_r_ARVALID;
wire    INPUT_r_ARREADY;
reg   [31:0] INPUT_r_ARADDR;
reg   [31:0] INPUT_r_ARLEN;
wire    INPUT_r_RVALID;
reg    INPUT_r_RREADY;
wire   [31:0] INPUT_r_RDATA;
wire    INPUT_r_RLAST;
wire   [0:0] INPUT_r_RID;
wire   [0:0] INPUT_r_RUSER;
wire   [1:0] INPUT_r_RRESP;
wire    INPUT_r_BVALID;
wire   [1:0] INPUT_r_BRESP;
wire   [0:0] INPUT_r_BID;
wire   [0:0] INPUT_r_BUSER;
reg    OUTPUT_r_AWVALID;
wire    OUTPUT_r_AWREADY;
reg    OUTPUT_r_WVALID;
wire    OUTPUT_r_WREADY;
wire    OUTPUT_r_ARREADY;
wire    OUTPUT_r_RVALID;
wire   [31:0] OUTPUT_r_RDATA;
wire    OUTPUT_r_RLAST;
wire   [0:0] OUTPUT_r_RID;
wire   [0:0] OUTPUT_r_RUSER;
wire   [1:0] OUTPUT_r_RRESP;
wire    OUTPUT_r_BVALID;
reg    OUTPUT_r_BREADY;
wire   [1:0] OUTPUT_r_BRESP;
wire   [0:0] OUTPUT_r_BID;
wire   [0:0] OUTPUT_r_BUSER;
reg   [7:0] phi_ln25_reg_430;
reg   [7:0] phi_ln25_reg_430_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] phi_ln26_reg_442;
reg   [7:0] phi_ln26_reg_442_pp1_iter1_reg;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [2:0] phi_ln27_reg_454;
reg   [2:0] phi_ln28_reg_465;
reg   [7:0] phi_ln75_reg_615;
wire   [31:0] X_q0;
reg   [31:0] reg_689;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state63;
wire   [31:0] Y_q0;
reg   [31:0] reg_694;
reg   [29:0] out_cluster9_reg_1452;
reg   [29:0] in_Y7_reg_1457;
reg   [29:0] in_X5_reg_1462;
reg   [29:0] in_Y_prot3_reg_1467;
reg   [29:0] in_X_prot1_reg_1472;
reg   [31:0] OUTPUT_addr_reg_1483;
wire    ap_CS_fsm_state8;
reg   [31:0] INPUT_addr_reg_1489;
reg   [31:0] INPUT_addr_2_reg_1495;
reg   [31:0] INPUT_addr_3_reg_1501;
wire   [0:0] icmp_ln25_fu_795_p2;
reg   [0:0] icmp_ln25_reg_1507_pp0_iter1_reg;
wire   [7:0] add_ln25_fu_801_p2;
reg   [7:0] add_ln25_reg_1511;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] INPUT_addr_1_read_reg_1516;
wire   [0:0] icmp_ln26_fu_812_p2;
reg   [0:0] icmp_ln26_reg_1521_pp1_iter1_reg;
wire   [7:0] add_ln26_fu_818_p2;
reg   [7:0] add_ln26_reg_1525;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] INPUT_addr_read_reg_1530;
wire   [0:0] icmp_ln27_fu_829_p2;
wire    ap_block_state29_pp2_stage0_iter0;
reg    ap_block_state30_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [2:0] add_ln27_fu_835_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [1:0] trunc_ln27_fu_841_p1;
reg   [1:0] trunc_ln27_reg_1568;
reg   [31:0] X_prot_3_1_load_reg_1572;
reg   [31:0] X_prot_3_3_load_reg_1577;
reg   [31:0] X_prot_3_4_load_reg_1582;
reg   [31:0] X_prot_3_5_load_reg_1587;
wire   [0:0] icmp_ln28_fu_877_p2;
wire    ap_block_state38_pp3_stage0_iter0;
reg    ap_block_state39_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [2:0] add_ln28_fu_883_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [1:0] trunc_ln28_fu_889_p1;
reg   [1:0] trunc_ln28_reg_1625;
reg   [31:0] Y_prot_3_1_load_reg_1629;
reg   [31:0] Y_prot_3_3_load_reg_1634;
reg   [31:0] Y_prot_3_4_load_reg_1639;
reg   [31:0] Y_prot_3_5_load_reg_1644;
reg    ap_block_state41_io;
wire   [3:0] it_fu_963_p2;
reg   [3:0] it_reg_1709;
wire   [7:0] j_fu_975_p2;
reg   [7:0] j_reg_1717;
wire    ap_CS_fsm_state42;
wire   [63:0] zext_ln45_fu_981_p1;
reg   [63:0] zext_ln45_reg_1722;
wire   [0:0] icmp_ln38_fu_969_p2;
wire   [31:0] zext_ln43_fu_987_p1;
reg   [31:0] zext_ln43_reg_1737;
wire    ap_CS_fsm_state44;
wire   [2:0] i_fu_997_p2;
reg   [2:0] i_reg_1745;
wire   [31:0] x1_assign_fu_1007_p6;
reg   [31:0] x1_assign_reg_1750;
wire   [0:0] icmp_ln43_fu_991_p2;
wire   [31:0] y1_assign_fu_1021_p6;
reg   [31:0] y1_assign_reg_1755;
wire   [31:0] grp_fu_626_p2;
reg   [31:0] tmp_i_reg_1760;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_630_p2;
reg   [31:0] tmp_7_i_reg_1765;
wire   [62:0] trunc_ln368_fu_1039_p1;
reg   [62:0] trunc_ln368_reg_1770;
wire    ap_CS_fsm_state51;
wire   [62:0] trunc_ln368_1_fu_1047_p1;
reg   [62:0] trunc_ln368_1_reg_1775;
wire    ap_CS_fsm_state52;
wire   [63:0] grp_fu_661_p2;
reg   [63:0] tmp_i_20_reg_1790;
wire    ap_CS_fsm_state56;
wire   [31:0] grp_fu_647_p1;
reg   [31:0] distance_reg_1795;
wire    ap_CS_fsm_state58;
wire   [31:0] min_distance_1_fu_1158_p3;
wire    ap_CS_fsm_state60;
wire   [31:0] belonging_cluster_in_2_fu_1165_p3;
wire   [31:0] zext_ln56_fu_1172_p1;
reg   [31:0] zext_ln56_reg_1812;
wire    ap_CS_fsm_state61;
wire   [2:0] i_2_fu_1182_p2;
reg   [2:0] i_2_reg_1820;
wire   [7:0] j_2_fu_1194_p2;
reg   [7:0] j_2_reg_1828;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln62_fu_1188_p2;
wire   [0:0] icmp_ln90_fu_1207_p2;
reg   [0:0] icmp_ln90_reg_1848;
wire   [0:0] icmp_ln63_fu_1213_p2;
reg   [0:0] icmp_ln63_reg_1852;
wire   [31:0] size_1_fu_1224_p3;
wire    ap_CS_fsm_state68;
wire   [31:0] X_clus_1_fu_1231_p3;
wire   [31:0] Y_clus_1_fu_1238_p3;
wire   [31:0] grp_fu_642_p1;
reg   [31:0] tmp_i1_reg_1874;
wire    ap_CS_fsm_state73;
wire   [31:0] grp_fu_636_p2;
wire    ap_CS_fsm_state89;
wire   [1:0] trunc_ln70_fu_1245_p1;
reg   [1:0] trunc_ln70_reg_1884;
wire   [0:0] icmp_ln70_fu_1249_p2;
reg   [0:0] icmp_ln70_reg_1891;
wire    ap_CS_fsm_state90;
wire   [0:0] icmp_ln70_1_fu_1262_p2;
reg   [0:0] icmp_ln70_1_reg_1897;
wire   [0:0] icmp_ln70_2_fu_1275_p2;
reg   [0:0] icmp_ln70_2_reg_1904;
wire   [31:0] X_prot_3_12_fu_1280_p3;
reg   [31:0] X_prot_3_12_reg_1912;
wire   [31:0] X_prot_3_15_fu_1304_p3;
reg   [31:0] X_prot_3_15_reg_1917;
wire   [31:0] X_prot_3_17_fu_1320_p3;
reg   [31:0] X_prot_3_17_reg_1922;
wire   [31:0] X_prot_3_18_fu_1328_p3;
reg   [31:0] X_prot_3_18_reg_1927;
reg   [31:0] tmp_i2_reg_1932;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state111;
wire   [0:0] icmp_ln75_fu_1435_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state113_pp4_stage0_iter0;
wire    ap_block_state114_pp4_stage0_iter1;
wire    ap_block_state115_pp4_stage0_iter2;
reg    ap_block_state115_io;
reg    ap_block_pp4_stage0_11001;
wire   [7:0] add_ln75_fu_1441_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [31:0] cluster_q0;
reg   [31:0] cluster_load_reg_1956;
reg    ap_enable_reg_pp4_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state28;
reg    ap_block_pp2_stage0_subdone;
wire    ap_CS_fsm_state37;
reg    ap_block_pp3_stage0_subdone;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state113;
reg   [6:0] X_address0;
reg    X_ce0;
reg    X_we0;
reg   [6:0] Y_address0;
reg    Y_ce0;
reg    Y_we0;
reg   [6:0] cluster_address0;
reg    cluster_ce0;
reg    cluster_we0;
reg   [7:0] ap_phi_mux_phi_ln25_phi_fu_434_p4;
reg   [7:0] ap_phi_mux_phi_ln26_phi_fu_446_p4;
reg   [3:0] it_0_reg_476;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln56_fu_1176_p2;
reg   [7:0] j_0_reg_487;
reg   [2:0] belonging_cluster_in_reg_498;
reg   [31:0] min_distance_0_reg_509;
reg   [31:0] belonging_cluster_in_1_reg_521;
reg   [2:0] i_1_reg_534;
wire    ap_CS_fsm_state112;
reg   [7:0] j_1_reg_546;
wire   [31:0] ap_phi_mux_taille_assign_phi_fu_561_p4;
reg   [31:0] taille_assign_reg_557;
reg   [31:0] somme_assign_reg_569;
reg   [31:0] somme_assign_1_reg_581;
reg   [31:0] X_prot_3_19_reg_593;
reg   [31:0] Y_prot_3_19_reg_604;
wire   [63:0] zext_ln25_fu_807_p1;
wire   [63:0] zext_ln26_fu_824_p1;
wire   [63:0] zext_ln63_fu_1200_p1;
wire   [63:0] zext_ln75_fu_1447_p1;
wire   [63:0] empty_6_fu_749_p1;
wire   [63:0] empty_fu_759_p1;
wire   [63:0] empty_5_fu_768_p1;
wire   [63:0] empty_7_fu_777_p1;
wire   [63:0] empty_8_fu_786_p1;
wire    ap_block_pp4_stage0_01001;
reg   [31:0] X_prot_3_1_fu_194;
reg   [31:0] X_prot_3_3_fu_198;
reg   [31:0] X_prot_3_4_fu_202;
reg   [31:0] X_prot_3_5_fu_206;
reg   [31:0] Y_prot_3_1_fu_210;
reg   [31:0] Y_prot_3_3_fu_214;
reg   [31:0] Y_prot_3_4_fu_218;
reg   [31:0] Y_prot_3_5_fu_222;
reg   [31:0] X_prot_3_7_fu_226;
reg   [31:0] X_prot_3_8_fu_230;
reg   [31:0] X_prot_3_9_fu_234;
reg   [31:0] X_prot_3_2_fu_238;
reg   [31:0] Y_prot_3_6_fu_242;
wire   [31:0] Y_prot_3_18_fu_1408_p3;
reg   [31:0] Y_prot_3_7_fu_246;
wire   [31:0] Y_prot_3_17_fu_1401_p3;
reg   [31:0] Y_prot_3_8_fu_250;
wire   [31:0] Y_prot_3_15_fu_1387_p3;
reg   [31:0] Y_prot_3_2_fu_254;
wire   [31:0] Y_prot_3_12_fu_1366_p3;
reg   [31:0] grp_fu_626_p0;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state64;
reg   [31:0] grp_fu_630_p0;
reg   [31:0] grp_fu_636_p0;
reg   [31:0] grp_fu_636_p1;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state96;
reg   [31:0] grp_fu_642_p0;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state59;
wire   [63:0] grp_fu_661_p0;
wire   [63:0] grp_fu_661_p1;
wire   [1:0] trunc_ln45_fu_1003_p1;
wire   [63:0] grp_fu_650_p1;
wire   [63:0] p_Val2_s_fu_1035_p1;
wire   [63:0] grp_fu_653_p1;
wire   [63:0] p_Val2_1_fu_1043_p1;
wire   [63:0] p_Result_s_fu_1051_p3;
wire   [63:0] p_Result_1_fu_1063_p3;
wire   [31:0] bitcast_ln46_fu_1075_p1;
wire   [31:0] bitcast_ln46_1_fu_1092_p1;
wire   [7:0] tmp_fu_1078_p4;
wire   [22:0] trunc_ln46_fu_1088_p1;
wire   [0:0] icmp_ln46_1_fu_1116_p2;
wire   [0:0] icmp_ln46_fu_1110_p2;
wire   [7:0] tmp_6_fu_1096_p4;
wire   [22:0] trunc_ln46_1_fu_1106_p1;
wire   [0:0] icmp_ln46_3_fu_1134_p2;
wire   [0:0] icmp_ln46_2_fu_1128_p2;
wire   [0:0] or_ln46_fu_1122_p2;
wire   [0:0] or_ln46_1_fu_1140_p2;
wire   [0:0] and_ln46_fu_1146_p2;
wire   [0:0] grp_fu_656_p2;
wire   [0:0] and_ln46_1_fu_1152_p2;
wire   [31:0] size_fu_1218_p2;
wire   [31:0] X_prot_3_fu_1254_p3;
wire   [31:0] X_prot_3_11_fu_1267_p3;
wire   [31:0] X_prot_3_13_fu_1288_p3;
wire   [31:0] X_prot_3_14_fu_1296_p3;
wire   [31:0] X_prot_3_16_fu_1312_p3;
wire   [31:0] Y_prot_3_fu_1352_p3;
wire   [31:0] Y_prot_3_11_fu_1359_p3;
wire   [31:0] Y_prot_3_13_fu_1373_p3;
wire   [31:0] Y_prot_3_14_fu_1380_p3;
wire   [31:0] Y_prot_3_16_fu_1394_p3;
reg   [1:0] grp_fu_626_opcode;
reg   [1:0] grp_fu_630_opcode;
reg   [111:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 112'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

kmeans_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
kmeans_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_X_prot(in_X_prot),
    .in_Y_prot(in_Y_prot),
    .in_X(in_X),
    .in_Y(in_Y),
    .out_cluster(out_cluster)
);

kmeans_INPUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ))
kmeans_INPUT_r_m_axi_U(
    .AWVALID(m_axi_INPUT_r_AWVALID),
    .AWREADY(m_axi_INPUT_r_AWREADY),
    .AWADDR(m_axi_INPUT_r_AWADDR),
    .AWID(m_axi_INPUT_r_AWID),
    .AWLEN(m_axi_INPUT_r_AWLEN),
    .AWSIZE(m_axi_INPUT_r_AWSIZE),
    .AWBURST(m_axi_INPUT_r_AWBURST),
    .AWLOCK(m_axi_INPUT_r_AWLOCK),
    .AWCACHE(m_axi_INPUT_r_AWCACHE),
    .AWPROT(m_axi_INPUT_r_AWPROT),
    .AWQOS(m_axi_INPUT_r_AWQOS),
    .AWREGION(m_axi_INPUT_r_AWREGION),
    .AWUSER(m_axi_INPUT_r_AWUSER),
    .WVALID(m_axi_INPUT_r_WVALID),
    .WREADY(m_axi_INPUT_r_WREADY),
    .WDATA(m_axi_INPUT_r_WDATA),
    .WSTRB(m_axi_INPUT_r_WSTRB),
    .WLAST(m_axi_INPUT_r_WLAST),
    .WID(m_axi_INPUT_r_WID),
    .WUSER(m_axi_INPUT_r_WUSER),
    .ARVALID(m_axi_INPUT_r_ARVALID),
    .ARREADY(m_axi_INPUT_r_ARREADY),
    .ARADDR(m_axi_INPUT_r_ARADDR),
    .ARID(m_axi_INPUT_r_ARID),
    .ARLEN(m_axi_INPUT_r_ARLEN),
    .ARSIZE(m_axi_INPUT_r_ARSIZE),
    .ARBURST(m_axi_INPUT_r_ARBURST),
    .ARLOCK(m_axi_INPUT_r_ARLOCK),
    .ARCACHE(m_axi_INPUT_r_ARCACHE),
    .ARPROT(m_axi_INPUT_r_ARPROT),
    .ARQOS(m_axi_INPUT_r_ARQOS),
    .ARREGION(m_axi_INPUT_r_ARREGION),
    .ARUSER(m_axi_INPUT_r_ARUSER),
    .RVALID(m_axi_INPUT_r_RVALID),
    .RREADY(m_axi_INPUT_r_RREADY),
    .RDATA(m_axi_INPUT_r_RDATA),
    .RLAST(m_axi_INPUT_r_RLAST),
    .RID(m_axi_INPUT_r_RID),
    .RUSER(m_axi_INPUT_r_RUSER),
    .RRESP(m_axi_INPUT_r_RRESP),
    .BVALID(m_axi_INPUT_r_BVALID),
    .BREADY(m_axi_INPUT_r_BREADY),
    .BRESP(m_axi_INPUT_r_BRESP),
    .BID(m_axi_INPUT_r_BID),
    .BUSER(m_axi_INPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_r_ARVALID),
    .I_ARREADY(INPUT_r_ARREADY),
    .I_ARADDR(INPUT_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(INPUT_r_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_r_RVALID),
    .I_RREADY(INPUT_r_RREADY),
    .I_RDATA(INPUT_r_RDATA),
    .I_RID(INPUT_r_RID),
    .I_RUSER(INPUT_r_RUSER),
    .I_RRESP(INPUT_r_RRESP),
    .I_RLAST(INPUT_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(INPUT_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_r_BRESP),
    .I_BID(INPUT_r_BID),
    .I_BUSER(INPUT_r_BUSER)
);

kmeans_OUTPUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
kmeans_OUTPUT_r_m_axi_U(
    .AWVALID(m_axi_OUTPUT_r_AWVALID),
    .AWREADY(m_axi_OUTPUT_r_AWREADY),
    .AWADDR(m_axi_OUTPUT_r_AWADDR),
    .AWID(m_axi_OUTPUT_r_AWID),
    .AWLEN(m_axi_OUTPUT_r_AWLEN),
    .AWSIZE(m_axi_OUTPUT_r_AWSIZE),
    .AWBURST(m_axi_OUTPUT_r_AWBURST),
    .AWLOCK(m_axi_OUTPUT_r_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_r_AWCACHE),
    .AWPROT(m_axi_OUTPUT_r_AWPROT),
    .AWQOS(m_axi_OUTPUT_r_AWQOS),
    .AWREGION(m_axi_OUTPUT_r_AWREGION),
    .AWUSER(m_axi_OUTPUT_r_AWUSER),
    .WVALID(m_axi_OUTPUT_r_WVALID),
    .WREADY(m_axi_OUTPUT_r_WREADY),
    .WDATA(m_axi_OUTPUT_r_WDATA),
    .WSTRB(m_axi_OUTPUT_r_WSTRB),
    .WLAST(m_axi_OUTPUT_r_WLAST),
    .WID(m_axi_OUTPUT_r_WID),
    .WUSER(m_axi_OUTPUT_r_WUSER),
    .ARVALID(m_axi_OUTPUT_r_ARVALID),
    .ARREADY(m_axi_OUTPUT_r_ARREADY),
    .ARADDR(m_axi_OUTPUT_r_ARADDR),
    .ARID(m_axi_OUTPUT_r_ARID),
    .ARLEN(m_axi_OUTPUT_r_ARLEN),
    .ARSIZE(m_axi_OUTPUT_r_ARSIZE),
    .ARBURST(m_axi_OUTPUT_r_ARBURST),
    .ARLOCK(m_axi_OUTPUT_r_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_r_ARCACHE),
    .ARPROT(m_axi_OUTPUT_r_ARPROT),
    .ARQOS(m_axi_OUTPUT_r_ARQOS),
    .ARREGION(m_axi_OUTPUT_r_ARREGION),
    .ARUSER(m_axi_OUTPUT_r_ARUSER),
    .RVALID(m_axi_OUTPUT_r_RVALID),
    .RREADY(m_axi_OUTPUT_r_RREADY),
    .RDATA(m_axi_OUTPUT_r_RDATA),
    .RLAST(m_axi_OUTPUT_r_RLAST),
    .RID(m_axi_OUTPUT_r_RID),
    .RUSER(m_axi_OUTPUT_r_RUSER),
    .RRESP(m_axi_OUTPUT_r_RRESP),
    .BVALID(m_axi_OUTPUT_r_BVALID),
    .BREADY(m_axi_OUTPUT_r_BREADY),
    .BRESP(m_axi_OUTPUT_r_BRESP),
    .BID(m_axi_OUTPUT_r_BID),
    .BUSER(m_axi_OUTPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_r_RDATA),
    .I_RID(OUTPUT_r_RID),
    .I_RUSER(OUTPUT_r_RUSER),
    .I_RRESP(OUTPUT_r_RRESP),
    .I_RLAST(OUTPUT_r_RLAST),
    .I_AWVALID(OUTPUT_r_AWVALID),
    .I_AWREADY(OUTPUT_r_AWREADY),
    .I_AWADDR(OUTPUT_addr_reg_1483),
    .I_AWID(1'd0),
    .I_AWLEN(32'd128),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_r_WVALID),
    .I_WREADY(OUTPUT_r_WREADY),
    .I_WDATA(cluster_load_reg_1956),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(OUTPUT_r_BVALID),
    .I_BREADY(OUTPUT_r_BREADY),
    .I_BRESP(OUTPUT_r_BRESP),
    .I_BID(OUTPUT_r_BID),
    .I_BUSER(OUTPUT_r_BUSER)
);

kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
X_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(X_address0),
    .ce0(X_ce0),
    .we0(X_we0),
    .d0(INPUT_addr_1_read_reg_1516),
    .q0(X_q0)
);

kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Y_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Y_address0),
    .ce0(Y_ce0),
    .we0(Y_we0),
    .d0(INPUT_addr_read_reg_1530),
    .q0(Y_q0)
);

kmeans_X #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
cluster_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cluster_address0),
    .ce0(cluster_ce0),
    .we0(cluster_we0),
    .d0(belonging_cluster_in_1_reg_521),
    .q0(cluster_q0)
);

kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_626_p0),
    .din1(reg_689),
    .opcode(grp_fu_626_opcode),
    .ce(1'b1),
    .dout(grp_fu_626_p2)
);

kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_faddfsub_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_630_p0),
    .din1(reg_694),
    .opcode(grp_fu_630_opcode),
    .ce(1'b1),
    .dout(grp_fu_630_p2)
);

kmeans_fdiv_32ns_32ns_32_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fdiv_32ns_32ns_32_16_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_636_p0),
    .din1(grp_fu_636_p1),
    .ce(1'b1),
    .dout(grp_fu_636_p2)
);

kmeans_sitofp_32ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_sitofp_32ns_32_6_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_642_p0),
    .ce(1'b1),
    .dout(grp_fu_642_p1)
);

kmeans_fptrunc_64ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kmeans_fptrunc_64ns_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_20_reg_1790),
    .ce(1'b1),
    .dout(grp_fu_647_p1)
);

kmeans_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_fpext_32ns_64_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_reg_1760),
    .ce(1'b1),
    .dout(grp_fu_650_p1)
);

kmeans_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_fpext_32ns_64_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_7_i_reg_1765),
    .ce(1'b1),
    .dout(grp_fu_653_p1)
);

kmeans_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kmeans_fcmp_32ns_32ns_1_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(distance_reg_1795),
    .din1(min_distance_0_reg_509),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_656_p2)
);

kmeans_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kmeans_dadd_64ns_64ns_64_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_661_p0),
    .din1(grp_fu_661_p1),
    .ce(1'b1),
    .dout(grp_fu_661_p2)
);

kmeans_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
kmeans_mux_42_32_1_1_U10(
    .din0(X_prot_3_7_fu_226),
    .din1(X_prot_3_8_fu_230),
    .din2(X_prot_3_9_fu_234),
    .din3(X_prot_3_2_fu_238),
    .din4(trunc_ln45_fu_1003_p1),
    .dout(x1_assign_fu_1007_p6)
);

kmeans_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
kmeans_mux_42_32_1_1_U11(
    .din0(Y_prot_3_6_fu_242),
    .din1(Y_prot_3_7_fu_246),
    .din2(Y_prot_3_8_fu_250),
    .din3(Y_prot_3_2_fu_254),
    .din4(trunc_ln45_fu_1003_p1),
    .dout(y1_assign_fu_1021_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln27_fu_829_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln28_fu_877_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state113) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state113)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state113);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_1207_p2 == 1'd1) & (icmp_ln62_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        X_prot_3_19_reg_593 <= 32'd0;
    end else if (((icmp_ln90_reg_1848 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
        X_prot_3_19_reg_593 <= grp_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        X_prot_3_2_fu_238 <= X_prot_3_12_reg_1912;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        X_prot_3_2_fu_238 <= X_prot_3_5_load_reg_1587;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        X_prot_3_7_fu_226 <= X_prot_3_18_reg_1927;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        X_prot_3_7_fu_226 <= X_prot_3_1_load_reg_1572;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        X_prot_3_8_fu_230 <= X_prot_3_17_reg_1922;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        X_prot_3_8_fu_230 <= X_prot_3_3_load_reg_1577;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        X_prot_3_9_fu_234 <= X_prot_3_15_reg_1917;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        X_prot_3_9_fu_234 <= X_prot_3_4_load_reg_1582;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_1848 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
        Y_prot_3_19_reg_604 <= 32'd0;
    end else if (((icmp_ln90_reg_1848 == 1'd0) & (1'b1 == ap_CS_fsm_state111))) begin
        Y_prot_3_19_reg_604 <= grp_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        Y_prot_3_2_fu_254 <= Y_prot_3_12_fu_1366_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        Y_prot_3_2_fu_254 <= Y_prot_3_5_load_reg_1644;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        Y_prot_3_6_fu_242 <= Y_prot_3_18_fu_1408_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        Y_prot_3_6_fu_242 <= Y_prot_3_1_load_reg_1629;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        Y_prot_3_7_fu_246 <= Y_prot_3_17_fu_1401_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        Y_prot_3_7_fu_246 <= Y_prot_3_3_load_reg_1634;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        Y_prot_3_8_fu_250 <= Y_prot_3_15_fu_1387_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        Y_prot_3_8_fu_250 <= Y_prot_3_4_load_reg_1639;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        belonging_cluster_in_1_reg_521 <= belonging_cluster_in_2_fu_1165_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        belonging_cluster_in_1_reg_521 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        belonging_cluster_in_reg_498 <= i_reg_1745;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        belonging_cluster_in_reg_498 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        i_1_reg_534 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        i_1_reg_534 <= i_2_reg_1820;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_1176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
        it_0_reg_476 <= it_reg_1709;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        it_0_reg_476 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        j_0_reg_487 <= 8'd0;
    end else if (((icmp_ln43_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        j_0_reg_487 <= j_reg_1717;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        j_1_reg_546 <= j_2_reg_1828;
    end else if (((icmp_ln56_fu_1176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        j_1_reg_546 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        min_distance_0_reg_509 <= min_distance_1_fu_1158_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        min_distance_0_reg_509 <= 32'd1203982208;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_1507 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln25_reg_430 <= add_ln25_reg_1511;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln25_reg_430 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_ln26_reg_442 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln26_reg_1521 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln26_reg_442 <= add_ln26_reg_1525;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        phi_ln27_reg_454 <= 3'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_fu_829_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        phi_ln27_reg_454 <= add_ln27_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        phi_ln28_reg_465 <= 3'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_fu_877_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        phi_ln28_reg_465 <= add_ln28_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        phi_ln75_reg_615 <= 8'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_fu_1435_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        phi_ln75_reg_615 <= add_ln75_fu_1441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        somme_assign_1_reg_581 <= Y_clus_1_fu_1238_p3;
    end else if (((icmp_ln56_fu_1176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        somme_assign_1_reg_581 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        somme_assign_reg_569 <= X_clus_1_fu_1231_p3;
    end else if (((icmp_ln56_fu_1176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        somme_assign_reg_569 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        taille_assign_reg_557 <= size_1_fu_1224_p3;
    end else if (((icmp_ln56_fu_1176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        taille_assign_reg_557 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_1507 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INPUT_addr_1_read_reg_1516 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        INPUT_addr_2_reg_1495[29 : 0] <= empty_7_fu_777_p1[29 : 0];
        INPUT_addr_3_reg_1501[29 : 0] <= empty_8_fu_786_p1[29 : 0];
        INPUT_addr_reg_1489[29 : 0] <= empty_5_fu_768_p1[29 : 0];
        OUTPUT_addr_reg_1483[29 : 0] <= empty_fu_759_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln26_reg_1521 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        INPUT_addr_read_reg_1530 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        X_prot_3_12_reg_1912 <= X_prot_3_12_fu_1280_p3;
        X_prot_3_15_reg_1917 <= X_prot_3_15_fu_1304_p3;
        X_prot_3_17_reg_1922 <= X_prot_3_17_fu_1320_p3;
        X_prot_3_18_reg_1927 <= X_prot_3_18_fu_1328_p3;
        icmp_ln70_1_reg_1897 <= icmp_ln70_1_fu_1262_p2;
        icmp_ln70_2_reg_1904 <= icmp_ln70_2_fu_1275_p2;
        icmp_ln70_reg_1891 <= icmp_ln70_fu_1249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln27_reg_1568 == 2'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        X_prot_3_1_fu_194 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        X_prot_3_1_load_reg_1572 <= X_prot_3_1_fu_194;
        X_prot_3_3_load_reg_1577 <= X_prot_3_3_fu_198;
        X_prot_3_4_load_reg_1582 <= X_prot_3_4_fu_202;
        X_prot_3_5_load_reg_1587 <= X_prot_3_5_fu_206;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln27_reg_1568 == 2'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        X_prot_3_3_fu_198 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln27_reg_1568 == 2'd2) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        X_prot_3_4_fu_202 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln27_reg_1568 == 2'd3) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        X_prot_3_5_fu_206 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln28_reg_1625 == 2'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        Y_prot_3_1_fu_210 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        Y_prot_3_1_load_reg_1629 <= Y_prot_3_1_fu_210;
        Y_prot_3_3_load_reg_1634 <= Y_prot_3_3_fu_214;
        Y_prot_3_4_load_reg_1639 <= Y_prot_3_4_fu_218;
        Y_prot_3_5_load_reg_1644 <= Y_prot_3_5_fu_222;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln28_reg_1625 == 2'd1) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        Y_prot_3_3_fu_214 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln28_reg_1625 == 2'd2) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        Y_prot_3_4_fu_218 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln28_reg_1625 == 2'd3) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        Y_prot_3_5_fu_222 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln25_reg_1511 <= add_ln25_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln26_reg_1525 <= add_ln26_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1942 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        cluster_load_reg_1956 <= cluster_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        distance_reg_1795 <= grp_fu_647_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_2_reg_1820 <= i_2_fu_1182_p2;
        zext_ln56_reg_1812[2 : 0] <= zext_ln56_fu_1172_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_reg_1745 <= i_fu_997_p2;
        zext_ln43_reg_1737[2 : 0] <= zext_ln43_fu_987_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln25_reg_1507 <= icmp_ln25_fu_795_p2;
        icmp_ln25_reg_1507_pp0_iter1_reg <= icmp_ln25_reg_1507;
        phi_ln25_reg_430_pp0_iter1_reg <= phi_ln25_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln26_reg_1521 <= icmp_ln26_fu_812_p2;
        icmp_ln26_reg_1521_pp1_iter1_reg <= icmp_ln26_reg_1521;
        phi_ln26_reg_442_pp1_iter1_reg <= phi_ln26_reg_442;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln27_reg_1559 <= icmp_ln27_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln28_reg_1616 <= icmp_ln28_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        icmp_ln63_reg_1852 <= icmp_ln63_fu_1213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln75_reg_1942 <= icmp_ln75_fu_1435_p2;
        icmp_ln75_reg_1942_pp4_iter1_reg <= icmp_ln75_reg_1942;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        icmp_ln90_reg_1848 <= icmp_ln90_fu_1207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_X5_reg_1462 <= {{in_X[31:2]}};
        in_X_prot1_reg_1472 <= {{in_X_prot[31:2]}};
        in_Y7_reg_1457 <= {{in_Y[31:2]}};
        in_Y_prot3_reg_1467 <= {{in_Y_prot[31:2]}};
        out_cluster9_reg_1452 <= {{out_cluster[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41))) begin
        it_reg_1709 <= it_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        j_2_reg_1828 <= j_2_fu_1194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        j_reg_1717 <= j_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_689 <= X_q0;
        reg_694 <= Y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_7_i_reg_1765 <= grp_fu_630_p2;
        tmp_i_reg_1760 <= grp_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        tmp_i1_reg_1874 <= grp_fu_642_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        tmp_i2_reg_1932 <= grp_fu_642_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_i_20_reg_1790 <= grp_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_fu_829_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        trunc_ln27_reg_1568 <= trunc_ln27_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_fu_877_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        trunc_ln28_reg_1625 <= trunc_ln28_fu_889_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        trunc_ln368_1_reg_1775 <= trunc_ln368_1_fu_1047_p1;
        trunc_ln368_reg_1770 <= trunc_ln368_fu_1039_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        trunc_ln70_reg_1884 <= trunc_ln70_fu_1245_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_991_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        x1_assign_reg_1750 <= x1_assign_fu_1007_p6;
        y1_assign_reg_1755 <= y1_assign_fu_1021_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_969_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        zext_ln45_reg_1722[7 : 0] <= zext_ln45_fu_981_p1[7 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            INPUT_r_ARADDR = INPUT_addr_2_reg_1495;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            INPUT_r_ARADDR = INPUT_addr_3_reg_1501;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            INPUT_r_ARADDR = INPUT_addr_reg_1489;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            INPUT_r_ARADDR = empty_6_fu_749_p1;
        end else begin
            INPUT_r_ARADDR = 'bx;
        end
    end else begin
        INPUT_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state31)))) begin
        INPUT_r_ARLEN = 32'd4;
    end else if ((((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state12)))) begin
        INPUT_r_ARLEN = 32'd128;
    end else begin
        INPUT_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state12)))) begin
        INPUT_r_ARVALID = 1'b1;
    end else begin
        INPUT_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_1507 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln26_reg_1521 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        INPUT_r_RREADY = 1'b1;
    end else begin
        INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12))) begin
        INPUT_r_blk_n_AR = m_axi_INPUT_r_ARREADY;
    end else begin
        INPUT_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln25_reg_1507 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln26_reg_1521 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        OUTPUT_r_AWVALID = 1'b1;
    end else begin
        OUTPUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state120))) begin
        OUTPUT_r_BREADY = 1'b1;
    end else begin
        OUTPUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1942_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        OUTPUT_r_WVALID = 1'b1;
    end else begin
        OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        OUTPUT_r_blk_n_AW = m_axi_OUTPUT_r_AWREADY;
    end else begin
        OUTPUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        OUTPUT_r_blk_n_B = m_axi_OUTPUT_r_BVALID;
    end else begin
        OUTPUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (icmp_ln75_reg_1942_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        X_address0 = zext_ln63_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        X_address0 = zext_ln45_fu_981_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        X_address0 = zext_ln25_fu_807_p1;
    end else begin
        X_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state42) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        X_ce0 = 1'b1;
    end else begin
        X_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_1507_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        X_we0 = 1'b1;
    end else begin
        X_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        Y_address0 = zext_ln63_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        Y_address0 = zext_ln45_fu_981_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        Y_address0 = zext_ln26_fu_824_p1;
    end else begin
        Y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state42) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        Y_ce0 = 1'b1;
    end else begin
        Y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln26_reg_1521_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        Y_we0 = 1'b1;
    end else begin
        Y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_795_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_812_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_1435_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state113 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state113 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln25_reg_1507 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_ln25_phi_fu_434_p4 = add_ln25_reg_1511;
    end else begin
        ap_phi_mux_phi_ln25_phi_fu_434_p4 = phi_ln25_reg_430;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_1521 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_phi_ln26_phi_fu_446_p4 = add_ln26_reg_1525;
    end else begin
        ap_phi_mux_phi_ln26_phi_fu_446_p4 = phi_ln26_reg_442;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        cluster_address0 = zext_ln75_fu_1447_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        cluster_address0 = zext_ln63_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        cluster_address0 = zext_ln45_reg_1722;
    end else begin
        cluster_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state44) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        cluster_ce0 = 1'b1;
    end else begin
        cluster_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        cluster_we0 = 1'b1;
    end else begin
        cluster_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_626_opcode = 2'd1;
    end else if (((icmp_ln63_reg_1852 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
        grp_fu_626_opcode = 2'd0;
    end else begin
        grp_fu_626_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_626_p0 = somme_assign_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_626_p0 = x1_assign_reg_1750;
    end else begin
        grp_fu_626_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_630_opcode = 2'd1;
    end else if (((icmp_ln63_reg_1852 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
        grp_fu_630_opcode = 2'd0;
    end else begin
        grp_fu_630_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_630_p0 = somme_assign_1_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_630_p0 = y1_assign_reg_1755;
    end else begin
        grp_fu_630_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_636_p0 = somme_assign_1_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_636_p0 = somme_assign_reg_569;
    end else begin
        grp_fu_636_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_636_p1 = tmp_i2_reg_1932;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_636_p1 = tmp_i1_reg_1874;
    end else begin
        grp_fu_636_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_642_p0 = taille_assign_reg_557;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_642_p0 = ap_phi_mux_taille_assign_phi_fu_561_p4;
    end else begin
        grp_fu_642_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_795_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_795_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln26_fu_812_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln26_fu_812_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == INPUT_r_ARREADY) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_state41_io) & (icmp_ln36_fu_957_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((icmp_ln38_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln43_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state61 : begin
            if (((icmp_ln56_fu_1176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln90_fu_1207_p2 == 1'd1) & (icmp_ln62_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else if (((icmp_ln62_fu_1188_p2 == 1'd1) & (icmp_ln90_fu_1207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((icmp_ln90_reg_1848 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln75_fu_1435_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln75_fu_1435_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_clus_1_fu_1231_p3 = ((icmp_ln63_reg_1852[0:0] === 1'b1) ? grp_fu_626_p2 : somme_assign_reg_569);

assign X_prot_3_11_fu_1267_p3 = ((icmp_ln70_1_fu_1262_p2[0:0] === 1'b1) ? X_prot_3_2_fu_238 : X_prot_3_fu_1254_p3);

assign X_prot_3_12_fu_1280_p3 = ((icmp_ln70_2_fu_1275_p2[0:0] === 1'b1) ? X_prot_3_2_fu_238 : X_prot_3_11_fu_1267_p3);

assign X_prot_3_13_fu_1288_p3 = ((icmp_ln70_fu_1249_p2[0:0] === 1'b1) ? X_prot_3_19_reg_593 : X_prot_3_9_fu_234);

assign X_prot_3_14_fu_1296_p3 = ((icmp_ln70_1_fu_1262_p2[0:0] === 1'b1) ? X_prot_3_9_fu_234 : X_prot_3_13_fu_1288_p3);

assign X_prot_3_15_fu_1304_p3 = ((icmp_ln70_2_fu_1275_p2[0:0] === 1'b1) ? X_prot_3_9_fu_234 : X_prot_3_14_fu_1296_p3);

assign X_prot_3_16_fu_1312_p3 = ((icmp_ln70_1_fu_1262_p2[0:0] === 1'b1) ? X_prot_3_19_reg_593 : X_prot_3_8_fu_230);

assign X_prot_3_17_fu_1320_p3 = ((icmp_ln70_2_fu_1275_p2[0:0] === 1'b1) ? X_prot_3_8_fu_230 : X_prot_3_16_fu_1312_p3);

assign X_prot_3_18_fu_1328_p3 = ((icmp_ln70_2_fu_1275_p2[0:0] === 1'b1) ? X_prot_3_19_reg_593 : X_prot_3_7_fu_226);

assign X_prot_3_fu_1254_p3 = ((icmp_ln70_fu_1249_p2[0:0] === 1'b1) ? X_prot_3_2_fu_238 : X_prot_3_19_reg_593);

assign Y_clus_1_fu_1238_p3 = ((icmp_ln63_reg_1852[0:0] === 1'b1) ? grp_fu_630_p2 : somme_assign_1_reg_581);

assign Y_prot_3_11_fu_1359_p3 = ((icmp_ln70_1_reg_1897[0:0] === 1'b1) ? Y_prot_3_2_fu_254 : Y_prot_3_fu_1352_p3);

assign Y_prot_3_12_fu_1366_p3 = ((icmp_ln70_2_reg_1904[0:0] === 1'b1) ? Y_prot_3_2_fu_254 : Y_prot_3_11_fu_1359_p3);

assign Y_prot_3_13_fu_1373_p3 = ((icmp_ln70_reg_1891[0:0] === 1'b1) ? Y_prot_3_19_reg_604 : Y_prot_3_8_fu_250);

assign Y_prot_3_14_fu_1380_p3 = ((icmp_ln70_1_reg_1897[0:0] === 1'b1) ? Y_prot_3_8_fu_250 : Y_prot_3_13_fu_1373_p3);

assign Y_prot_3_15_fu_1387_p3 = ((icmp_ln70_2_reg_1904[0:0] === 1'b1) ? Y_prot_3_8_fu_250 : Y_prot_3_14_fu_1380_p3);

assign Y_prot_3_16_fu_1394_p3 = ((icmp_ln70_1_reg_1897[0:0] === 1'b1) ? Y_prot_3_19_reg_604 : Y_prot_3_7_fu_246);

assign Y_prot_3_17_fu_1401_p3 = ((icmp_ln70_2_reg_1904[0:0] === 1'b1) ? Y_prot_3_7_fu_246 : Y_prot_3_16_fu_1394_p3);

assign Y_prot_3_18_fu_1408_p3 = ((icmp_ln70_2_reg_1904[0:0] === 1'b1) ? Y_prot_3_19_reg_604 : Y_prot_3_6_fu_242);

assign Y_prot_3_fu_1352_p3 = ((icmp_ln70_reg_1891[0:0] === 1'b1) ? Y_prot_3_2_fu_254 : Y_prot_3_19_reg_604);

assign add_ln25_fu_801_p2 = (ap_phi_mux_phi_ln25_phi_fu_434_p4 + 8'd1);

assign add_ln26_fu_818_p2 = (ap_phi_mux_phi_ln26_phi_fu_446_p4 + 8'd1);

assign add_ln27_fu_835_p2 = (phi_ln27_reg_454 + 3'd1);

assign add_ln28_fu_883_p2 = (phi_ln28_reg_465 + 3'd1);

assign add_ln75_fu_1441_p2 = (phi_ln75_reg_615 + 8'd1);

assign and_ln46_1_fu_1152_p2 = (grp_fu_656_p2 & and_ln46_fu_1146_p2);

assign and_ln46_fu_1146_p2 = (or_ln46_fu_1122_p2 & or_ln46_1_fu_1140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd89];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln25_reg_1507 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln25_reg_1507 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln26_reg_1521 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln26_reg_1521 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln27_reg_1559 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b0 == INPUT_r_RVALID) & (icmp_ln28_reg_1616 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state115_io));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state115_io));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln25_reg_1507 == 1'd0));
end

assign ap_block_state113_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115_io = ((1'b0 == OUTPUT_r_WREADY) & (icmp_ln75_reg_1942_pp4_iter1_reg == 1'd0));
end

assign ap_block_state115_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln26_reg_1521 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp2_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln27_reg_1559 == 1'd0));
end

assign ap_block_state38_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_pp3_stage0_iter1 = ((1'b0 == INPUT_r_RVALID) & (icmp_ln28_reg_1616 == 1'd0));
end

always @ (*) begin
    ap_block_state41_io = ((icmp_ln36_fu_957_p2 == 1'd1) & (1'b0 == OUTPUT_r_AWREADY));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_phi_mux_taille_assign_phi_fu_561_p4 = taille_assign_reg_557;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign belonging_cluster_in_2_fu_1165_p3 = ((and_ln46_1_fu_1152_p2[0:0] === 1'b1) ? zext_ln43_reg_1737 : belonging_cluster_in_1_reg_521);

assign bitcast_ln46_1_fu_1092_p1 = min_distance_0_reg_509;

assign bitcast_ln46_fu_1075_p1 = distance_reg_1795;

assign empty_5_fu_768_p1 = in_Y7_reg_1457;

assign empty_6_fu_749_p1 = in_X5_reg_1462;

assign empty_7_fu_777_p1 = in_Y_prot3_reg_1467;

assign empty_8_fu_786_p1 = in_X_prot1_reg_1472;

assign empty_fu_759_p1 = out_cluster9_reg_1452;

assign grp_fu_661_p0 = p_Result_s_fu_1051_p3;

assign grp_fu_661_p1 = p_Result_1_fu_1063_p3;

assign i_2_fu_1182_p2 = (i_1_reg_534 + 3'd1);

assign i_fu_997_p2 = (belonging_cluster_in_reg_498 + 3'd1);

assign icmp_ln25_fu_795_p2 = ((ap_phi_mux_phi_ln25_phi_fu_434_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_812_p2 = ((ap_phi_mux_phi_ln26_phi_fu_446_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_829_p2 = ((phi_ln27_reg_454 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_877_p2 = ((phi_ln28_reg_465 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_957_p2 = ((it_0_reg_476 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_969_p2 = ((j_0_reg_487 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_991_p2 = ((belonging_cluster_in_reg_498 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_1116_p2 = ((trunc_ln46_fu_1088_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_2_fu_1128_p2 = ((tmp_6_fu_1096_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_3_fu_1134_p2 = ((trunc_ln46_1_fu_1106_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_1110_p2 = ((tmp_fu_1078_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1176_p2 = ((i_1_reg_534 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1188_p2 = ((j_1_reg_546 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1213_p2 = ((cluster_q0 == zext_ln56_reg_1812) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_1262_p2 = ((trunc_ln70_reg_1884 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_1275_p2 = ((trunc_ln70_reg_1884 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1249_p2 = ((trunc_ln70_reg_1884 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_1435_p2 = ((phi_ln75_reg_615 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_1207_p2 = ((taille_assign_reg_557 == 32'd0) ? 1'b1 : 1'b0);

assign it_fu_963_p2 = (it_0_reg_476 + 4'd1);

assign j_2_fu_1194_p2 = (j_1_reg_546 + 8'd1);

assign j_fu_975_p2 = (j_0_reg_487 + 8'd1);

assign min_distance_1_fu_1158_p3 = ((and_ln46_1_fu_1152_p2[0:0] === 1'b1) ? distance_reg_1795 : min_distance_0_reg_509);

assign or_ln46_1_fu_1140_p2 = (icmp_ln46_3_fu_1134_p2 | icmp_ln46_2_fu_1128_p2);

assign or_ln46_fu_1122_p2 = (icmp_ln46_fu_1110_p2 | icmp_ln46_1_fu_1116_p2);

assign p_Result_1_fu_1063_p3 = {{1'd0}, {trunc_ln368_1_reg_1775}};

assign p_Result_s_fu_1051_p3 = {{1'd0}, {trunc_ln368_reg_1770}};

assign p_Val2_1_fu_1043_p1 = grp_fu_653_p1;

assign p_Val2_s_fu_1035_p1 = grp_fu_650_p1;

assign size_1_fu_1224_p3 = ((icmp_ln63_reg_1852[0:0] === 1'b1) ? size_fu_1218_p2 : taille_assign_reg_557);

assign size_fu_1218_p2 = (taille_assign_reg_557 + 32'd1);

assign tmp_6_fu_1096_p4 = {{bitcast_ln46_1_fu_1092_p1[30:23]}};

assign tmp_fu_1078_p4 = {{bitcast_ln46_fu_1075_p1[30:23]}};

assign trunc_ln27_fu_841_p1 = phi_ln27_reg_454[1:0];

assign trunc_ln28_fu_889_p1 = phi_ln28_reg_465[1:0];

assign trunc_ln368_1_fu_1047_p1 = p_Val2_1_fu_1043_p1[62:0];

assign trunc_ln368_fu_1039_p1 = p_Val2_s_fu_1035_p1[62:0];

assign trunc_ln45_fu_1003_p1 = belonging_cluster_in_reg_498[1:0];

assign trunc_ln46_1_fu_1106_p1 = bitcast_ln46_1_fu_1092_p1[22:0];

assign trunc_ln46_fu_1088_p1 = bitcast_ln46_fu_1075_p1[22:0];

assign trunc_ln70_fu_1245_p1 = i_1_reg_534[1:0];

assign zext_ln25_fu_807_p1 = phi_ln25_reg_430_pp0_iter1_reg;

assign zext_ln26_fu_824_p1 = phi_ln26_reg_442_pp1_iter1_reg;

assign zext_ln43_fu_987_p1 = belonging_cluster_in_reg_498;

assign zext_ln45_fu_981_p1 = j_0_reg_487;

assign zext_ln56_fu_1172_p1 = i_1_reg_534;

assign zext_ln63_fu_1200_p1 = j_1_reg_546;

assign zext_ln75_fu_1447_p1 = phi_ln75_reg_615;

always @ (posedge ap_clk) begin
    OUTPUT_addr_reg_1483[31:30] <= 2'b00;
    INPUT_addr_reg_1489[31:30] <= 2'b00;
    INPUT_addr_2_reg_1495[31:30] <= 2'b00;
    INPUT_addr_3_reg_1501[31:30] <= 2'b00;
    zext_ln45_reg_1722[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln43_reg_1737[31:3] <= 29'b00000000000000000000000000000;
    zext_ln56_reg_1812[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //kmeans
