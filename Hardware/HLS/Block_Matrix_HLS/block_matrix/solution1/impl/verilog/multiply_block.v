// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiply_block,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=738,HLS_SYN_LUT=1116,HLS_VERSION=2019_1}" *)

module multiply_block (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mA_address0,
        mA_ce0,
        mA_q0,
        mB_address0,
        mB_ce0,
        mB_q0,
        mC_address0,
        mC_ce0,
        mC_we0,
        mC_d0,
        mC_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] mA_address0;
output   mA_ce0;
input  [31:0] mA_q0;
output  [7:0] mB_address0;
output   mB_ce0;
input  [31:0] mB_q0;
output  [7:0] mC_address0;
output   mC_ce0;
output   mC_we0;
output  [31:0] mC_d0;
input  [31:0] mC_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mA_ce0;
reg mB_ce0;
reg mC_ce0;
reg mC_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln14_fu_158_p1;
reg   [31:0] zext_ln14_reg_319;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_170_p2;
reg   [4:0] i_reg_327;
wire   [0:0] tmp_7_fu_162_p3;
wire   [31:0] zext_ln19_fu_176_p1;
reg   [31:0] zext_ln19_reg_332;
wire   [31:0] zext_ln15_fu_180_p1;
reg   [31:0] zext_ln15_reg_337;
wire    ap_CS_fsm_state3;
wire   [4:0] j_fu_192_p2;
reg   [4:0] j_reg_345;
wire   [0:0] tmp_8_fu_184_p3;
wire   [31:0] zext_ln20_fu_198_p1;
reg   [31:0] zext_ln20_reg_350;
wire   [31:0] zext_ln16_fu_202_p1;
reg   [31:0] zext_ln16_reg_355;
wire    ap_CS_fsm_state4;
wire   [4:0] k_fu_214_p2;
reg   [4:0] k_reg_363;
wire   [0:0] tmp_9_fu_206_p3;
wire   [31:0] zext_ln21_fu_220_p1;
reg   [31:0] zext_ln21_reg_368;
wire   [9:0] sext_ln22_cast_fu_233_p3;
reg   [9:0] sext_ln22_cast_reg_376;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln19_fu_224_p2;
wire   [9:0] trunc_ln22_fu_246_p1;
reg   [9:0] trunc_ln22_reg_385;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln20_fu_241_p2;
reg   [7:0] mC_addr_reg_390;
wire   [31:0] ii_1_fu_260_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_fu_266_p2;
wire   [31:0] kk_1_fu_307_p2;
reg   [31:0] kk_1_reg_413;
wire   [31:0] jj_1_fu_313_p2;
reg   [31:0] mA_load_reg_423;
wire    ap_CS_fsm_state8;
reg   [31:0] mB_load_reg_428;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] tmp_reg_433;
wire    ap_CS_fsm_state12;
reg   [31:0] mC_load_reg_438;
wire   [31:0] grp_fu_150_p2;
reg   [31:0] tmp_1_reg_443;
wire    ap_CS_fsm_state17;
reg   [4:0] ii_reg_88;
reg   [4:0] jj_reg_99;
reg   [4:0] kk_reg_110;
reg   [31:0] ii_0_reg_121;
reg   [31:0] jj_0_reg_131;
reg   [31:0] kk_0_reg_141;
wire    ap_CS_fsm_state18;
wire  signed [63:0] sext_ln22_fu_255_p1;
wire  signed [63:0] sext_ln22_1_fu_280_p1;
wire  signed [63:0] sext_ln22_2_fu_302_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state9;
wire   [5:0] trunc_ln20_fu_229_p1;
wire   [9:0] add_ln22_fu_250_p2;
wire   [9:0] trunc_ln22_1_fu_271_p1;
wire   [9:0] add_ln22_1_fu_275_p2;
wire   [5:0] trunc_ln22_2_fu_285_p1;
wire   [9:0] sext_ln22_3_cast_fu_289_p3;
wire   [9:0] add_ln22_2_fu_297_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

multiply_block_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
multiply_block_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mC_load_reg_438),
    .din1(tmp_reg_433),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

multiply_block_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
multiply_block_fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mA_load_reg_423),
    .din1(mB_load_reg_428),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ii_0_reg_121 <= ii_1_fu_260_p2;
    end else if (((tmp_9_fu_206_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ii_0_reg_121 <= zext_ln14_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_184_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ii_reg_88 <= i_reg_327;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_88 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        jj_0_reg_131 <= jj_1_fu_313_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_224_p2 == 1'd1))) begin
        jj_0_reg_131 <= zext_ln15_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_206_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        jj_reg_99 <= j_reg_345;
    end else if (((tmp_7_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        jj_reg_99 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        kk_0_reg_141 <= kk_1_reg_413;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_241_p2 == 1'd1))) begin
        kk_0_reg_141 <= zext_ln16_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        kk_reg_110 <= k_reg_363;
    end else if (((tmp_8_fu_184_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kk_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_327 <= i_fu_170_p2;
        zext_ln19_reg_332[4 : 0] <= zext_ln19_fu_176_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_184_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_345 <= j_fu_192_p2;
        zext_ln20_reg_350[4 : 0] <= zext_ln20_fu_198_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_206_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_reg_363 <= k_fu_214_p2;
        zext_ln21_reg_368[4 : 0] <= zext_ln21_fu_220_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln21_fu_266_p2 == 1'd1))) begin
        kk_1_reg_413 <= kk_1_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mA_load_reg_423 <= mA_q0;
        mB_load_reg_428 <= mB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_241_p2 == 1'd1))) begin
        mC_addr_reg_390 <= sext_ln22_fu_255_p1;
        trunc_ln22_reg_385 <= trunc_ln22_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mC_load_reg_438 <= mC_q0;
        tmp_reg_433 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_224_p2 == 1'd1))) begin
        sext_ln22_cast_reg_376[9 : 4] <= sext_ln22_cast_fu_233_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_1_reg_443 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln14_reg_319[4 : 0] <= zext_ln14_fu_158_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln15_reg_337[4 : 0] <= zext_ln15_fu_180_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln16_reg_355[4 : 0] <= zext_ln16_fu_202_p1[4 : 0];
    end
end

always @ (*) begin
    if (((tmp_7_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_7_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mA_ce0 = 1'b1;
    end else begin
        mA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mB_ce0 = 1'b1;
    end else begin
        mB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18))) begin
        mC_ce0 = 1'b1;
    end else begin
        mC_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mC_we0 = 1'b1;
    end else begin
        mC_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_7_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_8_fu_184_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_9_fu_206_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln19_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln20_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_275_p2 = (sext_ln22_cast_reg_376 + trunc_ln22_1_fu_271_p1);

assign add_ln22_2_fu_297_p2 = (sext_ln22_3_cast_fu_289_p3 + trunc_ln22_reg_385);

assign add_ln22_fu_250_p2 = (sext_ln22_cast_reg_376 + trunc_ln22_fu_246_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_170_p2 = (ii_reg_88 + 5'd4);

assign icmp_ln19_fu_224_p2 = (($signed(ii_0_reg_121) < $signed(zext_ln19_reg_332)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_241_p2 = (($signed(jj_0_reg_131) < $signed(zext_ln20_reg_350)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_266_p2 = (($signed(kk_0_reg_141) < $signed(zext_ln21_reg_368)) ? 1'b1 : 1'b0);

assign ii_1_fu_260_p2 = (ii_0_reg_121 + 32'd1);

assign j_fu_192_p2 = (jj_reg_99 + 5'd4);

assign jj_1_fu_313_p2 = (jj_0_reg_131 + 32'd1);

assign k_fu_214_p2 = (kk_reg_110 + 5'd4);

assign kk_1_fu_307_p2 = (32'd1 + kk_0_reg_141);

assign mA_address0 = sext_ln22_1_fu_280_p1;

assign mB_address0 = sext_ln22_2_fu_302_p1;

assign mC_address0 = mC_addr_reg_390;

assign mC_d0 = tmp_1_reg_443;

assign sext_ln22_1_fu_280_p1 = $signed(add_ln22_1_fu_275_p2);

assign sext_ln22_2_fu_302_p1 = $signed(add_ln22_2_fu_297_p2);

assign sext_ln22_3_cast_fu_289_p3 = {{trunc_ln22_2_fu_285_p1}, {4'd0}};

assign sext_ln22_cast_fu_233_p3 = {{trunc_ln20_fu_229_p1}, {4'd0}};

assign sext_ln22_fu_255_p1 = $signed(add_ln22_fu_250_p2);

assign tmp_7_fu_162_p3 = ii_reg_88[32'd4];

assign tmp_8_fu_184_p3 = jj_reg_99[32'd4];

assign tmp_9_fu_206_p3 = kk_reg_110[32'd4];

assign trunc_ln20_fu_229_p1 = ii_0_reg_121[5:0];

assign trunc_ln22_1_fu_271_p1 = kk_0_reg_141[9:0];

assign trunc_ln22_2_fu_285_p1 = kk_0_reg_141[5:0];

assign trunc_ln22_fu_246_p1 = jj_0_reg_131[9:0];

assign zext_ln14_fu_158_p1 = ii_reg_88;

assign zext_ln15_fu_180_p1 = jj_reg_99;

assign zext_ln16_fu_202_p1 = kk_reg_110;

assign zext_ln19_fu_176_p1 = i_fu_170_p2;

assign zext_ln20_fu_198_p1 = j_fu_192_p2;

assign zext_ln21_fu_220_p1 = k_fu_214_p2;

always @ (posedge ap_clk) begin
    zext_ln14_reg_319[31:5] <= 27'b000000000000000000000000000;
    zext_ln19_reg_332[31:5] <= 27'b000000000000000000000000000;
    zext_ln15_reg_337[31:5] <= 27'b000000000000000000000000000;
    zext_ln20_reg_350[31:5] <= 27'b000000000000000000000000000;
    zext_ln16_reg_355[31:5] <= 27'b000000000000000000000000000;
    zext_ln21_reg_368[31:5] <= 27'b000000000000000000000000000;
    sext_ln22_cast_reg_376[3:0] <= 4'b0000;
end

endmodule //multiply_block
