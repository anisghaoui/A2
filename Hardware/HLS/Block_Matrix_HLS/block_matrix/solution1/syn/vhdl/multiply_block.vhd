-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiply_block is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mA_ce0 : OUT STD_LOGIC;
    mA_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mB_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mB_ce0 : OUT STD_LOGIC;
    mB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mC_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mC_ce0 : OUT STD_LOGIC;
    mC_we0 : OUT STD_LOGIC;
    mC_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mC_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of multiply_block is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multiply_block,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=738,HLS_SYN_LUT=1116,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln14_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_170_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_327 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_192_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_345 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln20_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_fu_214_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_363 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln22_cast_fu_233_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln22_cast_reg_376 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln19_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_fu_246_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln22_reg_385 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln20_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mC_addr_reg_390 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_1_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln21_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kk_1_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kk_1_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_1_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mA_load_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mB_load_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mC_load_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ii_reg_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal jj_reg_99 : STD_LOGIC_VECTOR (4 downto 0);
    signal kk_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_0_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_0_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal kk_0_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sext_ln22_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln22_1_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln22_2_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln20_fu_229_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln22_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln22_1_fu_271_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_1_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln22_2_fu_285_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln22_3_cast_fu_289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_2_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component multiply_block_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component multiply_block_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    multiply_block_fadd_32ns_32ns_32_5_full_dsp_1_U1 : component multiply_block_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mC_load_reg_438,
        din1 => tmp_reg_433,
        ce => ap_const_logic_1,
        dout => grp_fu_150_p2);

    multiply_block_fmul_32ns_32ns_32_4_max_dsp_1_U2 : component multiply_block_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mA_load_reg_423,
        din1 => mB_load_reg_428,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ii_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ii_0_reg_121 <= ii_1_fu_260_p2;
            elsif (((tmp_9_fu_206_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ii_0_reg_121 <= zext_ln14_reg_319;
            end if; 
        end if;
    end process;

    ii_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_184_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ii_reg_88 <= i_reg_327;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_88 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    jj_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                jj_0_reg_131 <= jj_1_fu_313_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln19_fu_224_p2 = ap_const_lv1_1))) then 
                jj_0_reg_131 <= zext_ln15_reg_337;
            end if; 
        end if;
    end process;

    jj_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_206_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                jj_reg_99 <= j_reg_345;
            elsif (((tmp_7_fu_162_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                jj_reg_99 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    kk_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                kk_0_reg_141 <= kk_1_reg_413;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln20_fu_241_p2 = ap_const_lv1_1))) then 
                kk_0_reg_141 <= zext_ln16_reg_355;
            end if; 
        end if;
    end process;

    kk_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                kk_reg_110 <= k_reg_363;
            elsif (((tmp_8_fu_184_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                kk_reg_110 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_162_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_327 <= i_fu_170_p2;
                    zext_ln19_reg_332(4 downto 0) <= zext_ln19_fu_176_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_184_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_reg_345 <= j_fu_192_p2;
                    zext_ln20_reg_350(4 downto 0) <= zext_ln20_fu_198_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_206_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                k_reg_363 <= k_fu_214_p2;
                    zext_ln21_reg_368(4 downto 0) <= zext_ln21_fu_220_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln21_fu_266_p2 = ap_const_lv1_1))) then
                kk_1_reg_413 <= kk_1_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mA_load_reg_423 <= mA_q0;
                mB_load_reg_428 <= mB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln20_fu_241_p2 = ap_const_lv1_1))) then
                mC_addr_reg_390 <= sext_ln22_fu_255_p1(8 - 1 downto 0);
                trunc_ln22_reg_385 <= trunc_ln22_fu_246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mC_load_reg_438 <= mC_q0;
                tmp_reg_433 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln19_fu_224_p2 = ap_const_lv1_1))) then
                    sext_ln22_cast_reg_376(9 downto 4) <= sext_ln22_cast_fu_233_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_1_reg_443 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln14_reg_319(4 downto 0) <= zext_ln14_fu_158_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln15_reg_337(4 downto 0) <= zext_ln15_fu_180_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln16_reg_355(4 downto 0) <= zext_ln16_fu_202_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_319(31 downto 5) <= "000000000000000000000000000";
    zext_ln19_reg_332(31 downto 5) <= "000000000000000000000000000";
    zext_ln15_reg_337(31 downto 5) <= "000000000000000000000000000";
    zext_ln20_reg_350(31 downto 5) <= "000000000000000000000000000";
    zext_ln16_reg_355(31 downto 5) <= "000000000000000000000000000";
    zext_ln21_reg_368(31 downto 5) <= "000000000000000000000000000";
    sext_ln22_cast_reg_376(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_7_fu_162_p3, ap_CS_fsm_state3, tmp_8_fu_184_p3, ap_CS_fsm_state4, tmp_9_fu_206_p3, ap_CS_fsm_state5, icmp_ln19_fu_224_p2, ap_CS_fsm_state6, icmp_ln20_fu_241_p2, ap_CS_fsm_state7, icmp_ln21_fu_266_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_7_fu_162_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_8_fu_184_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_9_fu_206_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln19_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln20_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln21_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_1_fu_275_p2 <= std_logic_vector(unsigned(sext_ln22_cast_reg_376) + unsigned(trunc_ln22_1_fu_271_p1));
    add_ln22_2_fu_297_p2 <= std_logic_vector(unsigned(sext_ln22_3_cast_fu_289_p3) + unsigned(trunc_ln22_reg_385));
    add_ln22_fu_250_p2 <= std_logic_vector(unsigned(sext_ln22_cast_reg_376) + unsigned(trunc_ln22_fu_246_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_7_fu_162_p3)
    begin
        if (((tmp_7_fu_162_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_7_fu_162_p3)
    begin
        if (((tmp_7_fu_162_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_170_p2 <= std_logic_vector(unsigned(ii_reg_88) + unsigned(ap_const_lv5_4));
    icmp_ln19_fu_224_p2 <= "1" when (signed(ii_0_reg_121) < signed(zext_ln19_reg_332)) else "0";
    icmp_ln20_fu_241_p2 <= "1" when (signed(jj_0_reg_131) < signed(zext_ln20_reg_350)) else "0";
    icmp_ln21_fu_266_p2 <= "1" when (signed(kk_0_reg_141) < signed(zext_ln21_reg_368)) else "0";
    ii_1_fu_260_p2 <= std_logic_vector(unsigned(ii_0_reg_121) + unsigned(ap_const_lv32_1));
    j_fu_192_p2 <= std_logic_vector(unsigned(jj_reg_99) + unsigned(ap_const_lv5_4));
    jj_1_fu_313_p2 <= std_logic_vector(unsigned(jj_0_reg_131) + unsigned(ap_const_lv32_1));
    k_fu_214_p2 <= std_logic_vector(unsigned(kk_reg_110) + unsigned(ap_const_lv5_4));
    kk_1_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(kk_0_reg_141));
    mA_address0 <= sext_ln22_1_fu_280_p1(8 - 1 downto 0);

    mA_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mA_ce0 <= ap_const_logic_1;
        else 
            mA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mB_address0 <= sext_ln22_2_fu_302_p1(8 - 1 downto 0);

    mB_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mB_ce0 <= ap_const_logic_1;
        else 
            mB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mC_address0 <= mC_addr_reg_390;

    mC_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            mC_ce0 <= ap_const_logic_1;
        else 
            mC_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mC_d0 <= tmp_1_reg_443;

    mC_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mC_we0 <= ap_const_logic_1;
        else 
            mC_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln22_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_1_fu_275_p2),64));

        sext_ln22_2_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_2_fu_297_p2),64));

    sext_ln22_3_cast_fu_289_p3 <= (trunc_ln22_2_fu_285_p1 & ap_const_lv4_0);
    sext_ln22_cast_fu_233_p3 <= (trunc_ln20_fu_229_p1 & ap_const_lv4_0);
        sext_ln22_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_fu_250_p2),64));

    tmp_7_fu_162_p3 <= ii_reg_88(4 downto 4);
    tmp_8_fu_184_p3 <= jj_reg_99(4 downto 4);
    tmp_9_fu_206_p3 <= kk_reg_110(4 downto 4);
    trunc_ln20_fu_229_p1 <= ii_0_reg_121(6 - 1 downto 0);
    trunc_ln22_1_fu_271_p1 <= kk_0_reg_141(10 - 1 downto 0);
    trunc_ln22_2_fu_285_p1 <= kk_0_reg_141(6 - 1 downto 0);
    trunc_ln22_fu_246_p1 <= jj_0_reg_131(10 - 1 downto 0);
    zext_ln14_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_88),32));
    zext_ln15_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_99),32));
    zext_ln16_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kk_reg_110),32));
    zext_ln19_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_170_p2),32));
    zext_ln20_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_192_p2),32));
    zext_ln21_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_214_p2),32));
end behav;
