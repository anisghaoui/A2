-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity distance is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x2 : IN STD_LOGIC_VECTOR (31 downto 0);
    y2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of distance is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_48_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_77_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_143 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_1_fu_85_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_1_reg_148 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_69_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_69_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_69_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_63_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_73_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_66_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_89_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_101_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_60_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal y2_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component Kmeans_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_fptrunc_64ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Kmeans_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    Kmeans_fsub_32ns_32ns_32_5_full_dsp_1_U1 : component Kmeans_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x1_int_reg,
        din1 => x2_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_48_p2);

    Kmeans_fsub_32ns_32ns_32_5_full_dsp_1_U2 : component Kmeans_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y1_int_reg,
        din1 => y2_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_54_p2);

    Kmeans_fptrunc_64ns_32_2_1_U3 : component Kmeans_fptrunc_64ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_163,
        ce => ap_const_logic_1,
        dout => grp_fu_60_p1);

    Kmeans_fpext_32ns_64_2_1_U4 : component Kmeans_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_133,
        ce => ap_const_logic_1,
        dout => grp_fu_63_p1);

    Kmeans_fpext_32ns_64_2_1_U5 : component Kmeans_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_138,
        ce => ap_const_logic_1,
        dout => grp_fu_66_p1);

    Kmeans_dadd_64ns_64ns_64_5_full_dsp_1_U6 : component Kmeans_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_69_p0,
        din1 => grp_fu_69_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_69_p2);





    x1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            x1_int_reg <= x1;
        end if;
    end process;

    x2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            x2_int_reg <= x2;
        end if;
    end process;

    y1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            y1_int_reg <= y1;
        end if;
    end process;

    y2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            y2_int_reg <= y2;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_3_reg_138 <= grp_fu_54_p2;
                tmp_6_reg_163 <= grp_fu_69_p2;
                tmp_reg_133 <= grp_fu_48_p2;
                trunc_ln368_1_reg_148 <= trunc_ln368_1_fu_85_p1;
                trunc_ln368_reg_143 <= trunc_ln368_fu_77_p1;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= grp_fu_60_p1;
    grp_fu_69_p0 <= p_Result_s_fu_89_p3;
    grp_fu_69_p1 <= p_Result_1_fu_101_p3;
    p_Result_1_fu_101_p3 <= (ap_const_lv1_0 & trunc_ln368_1_reg_148);
    p_Result_s_fu_89_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_143);
    p_Val2_1_fu_81_p1 <= grp_fu_66_p1;
    p_Val2_s_fu_73_p1 <= grp_fu_63_p1;
    trunc_ln368_1_fu_85_p1 <= p_Val2_1_fu_81_p1(63 - 1 downto 0);
    trunc_ln368_fu_77_p1 <= p_Val2_s_fu_73_p1(63 - 1 downto 0);
end behav;
