-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Kmeans is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=290955,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=11,HLS_SYN_FF=8893,HLS_SYN_LUT=10514,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (105 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (105 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (105 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (105 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (105 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (105 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (105 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (105 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (105 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (105 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_47C34F80 : STD_LOGIC_VECTOR (31 downto 0) := "01000111110000110100111110000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_X : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Y : STD_LOGIC_VECTOR (31 downto 0);
    signal in_X_prot : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Y_prot : STD_LOGIC_VECTOR (31 downto 0);
    signal out_clusters : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal INPUT_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln29_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln28_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln27_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln26_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln39_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln79_reg_1427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_1427_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RLAST : STD_LOGIC;
    signal INPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal INPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_RLAST : STD_LOGIC;
    signal OUTPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal OUTPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln26_reg_416 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln26_reg_416_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phi_ln27_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln27_reg_428_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal phi_ln28_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln28_reg_440_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal phi_ln29_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln29_reg_452_pp3_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state39_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal phi_ln79_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal Y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal clusters_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state109_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state110_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state111_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state111_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal out_clusters9_reg_1136 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_Y_prot7_reg_1141 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_X_prot5_reg_1146 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_Y3_reg_1151 : STD_LOGIC_VECTOR (29 downto 0);
    signal in_X1_reg_1156 : STD_LOGIC_VECTOR (29 downto 0);
    signal OUTPUT_addr_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal INPUT_addr_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_addr_1_reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_addr_2_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1191_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_reg_1195 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_3_read_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1205_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_2_read_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1219_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_795_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_reg_1223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_1_read_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_1233_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_fu_812_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln29_reg_1237 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_read_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state43_io : BOOLEAN;
    signal iter_fu_829_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal iter_reg_1251 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_841_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_1259 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln49_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_reg_1264 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_fu_853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_fu_863_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1287 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln47_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_prot_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_prot_load_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal Y_prot_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_load_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_distance_fu_591_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal new_distance_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal min_distance_1_fu_958_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal belonging_cluster_in_2_fu_965_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal i_2_fu_983_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1337 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln67_1_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln67_1_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal icmp_ln67_3_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_3_reg_1347 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_1009_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_1355 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal zext_ln67_fu_1015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_1360 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln65_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_2_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_2_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_1_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_1_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_1_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_1_reg_1396 : STD_LOGIC_VECTOR (0 downto 0);
    signal size_1_fu_1091_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_1_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_clus_1_fu_1099_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal Y_clus_1_fu_1106_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_moy_fu_599_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_moy_fu_607_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_1125_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state39 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state109 : STD_LOGIC;
    signal X_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal X_ce0 : STD_LOGIC;
    signal X_we0 : STD_LOGIC;
    signal Y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Y_ce0 : STD_LOGIC;
    signal Y_we0 : STD_LOGIC;
    signal X_prot_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal X_prot_ce0 : STD_LOGIC;
    signal X_prot_we0 : STD_LOGIC;
    signal X_prot_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_prot_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Y_prot_ce0 : STD_LOGIC;
    signal Y_prot_we0 : STD_LOGIC;
    signal Y_prot_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal clusters_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal clusters_ce0 : STD_LOGIC;
    signal clusters_we0 : STD_LOGIC;
    signal ap_phi_mux_phi_ln26_phi_fu_420_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_phi_ln27_phi_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_phi_ln28_phi_fu_444_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_phi_ln29_phi_fu_456_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal iter_0_reg_464 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln60_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal j_0_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal belonging_cluster_in_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_distance_0_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal belonging_cluster_in_1_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal j_1_reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal size_0_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_clus_0_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_clus_0_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal zext_ln26_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_1131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_13_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_10_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_11_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_12_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_fu_625_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal bitcast_ln50_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln50_1_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_878_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_fu_888_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln50_1_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_896_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_1_fu_906_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln50_3_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_2_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_1_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_1_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln67_fu_993_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_10_fu_1020_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln67_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1039_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_1_fu_1049_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln67_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_1_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal size_fu_1085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (105 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component distance IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x1 : IN STD_LOGIC_VECTOR (31 downto 0);
        y1 : IN STD_LOGIC_VECTOR (31 downto 0);
        x2 : IN STD_LOGIC_VECTOR (31 downto 0);
        y2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component moy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        somme : IN STD_LOGIC_VECTOR (31 downto 0);
        taille : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_sitofp_32ns_32_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Kmeans_X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_X : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_X_prot : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_Y_prot : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_clusters : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Kmeans_INPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Kmeans_OUTPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Kmeans_CTRL_BUS_s_axi_U : component Kmeans_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_X => in_X,
        in_Y => in_Y,
        in_X_prot => in_X_prot,
        in_Y_prot => in_Y_prot,
        out_clusters => out_clusters);

    Kmeans_INPUT_r_m_axi_U : component Kmeans_INPUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => INPUT_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => INPUT_r_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RID => INPUT_r_RID,
        I_RUSER => INPUT_r_RUSER,
        I_RRESP => INPUT_r_RRESP,
        I_RLAST => INPUT_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_r_BRESP,
        I_BID => INPUT_r_BID,
        I_BUSER => INPUT_r_BUSER);

    Kmeans_OUTPUT_r_m_axi_U : component Kmeans_OUTPUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RID => OUTPUT_r_RID,
        I_RUSER => OUTPUT_r_RUSER,
        I_RRESP => OUTPUT_r_RRESP,
        I_RLAST => OUTPUT_r_RLAST,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => OUTPUT_addr_reg_1167,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_80,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => reg_653,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY,
        I_BRESP => OUTPUT_r_BRESP,
        I_BID => OUTPUT_r_BID,
        I_BUSER => OUTPUT_r_BUSER);

    X_U : component Kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => X_address0,
        ce0 => X_ce0,
        we0 => X_we0,
        d0 => INPUT_addr_3_read_reg_1200,
        q0 => X_q0);

    Y_U : component Kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Y_address0,
        ce0 => Y_ce0,
        we0 => Y_we0,
        d0 => INPUT_addr_2_read_reg_1214,
        q0 => Y_q0);

    X_prot_U : component Kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => X_prot_address0,
        ce0 => X_prot_ce0,
        we0 => X_prot_we0,
        d0 => X_prot_d0,
        q0 => X_prot_q0);

    Y_prot_U : component Kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Y_prot_address0,
        ce0 => Y_prot_ce0,
        we0 => Y_prot_we0,
        d0 => Y_prot_d0,
        q0 => Y_prot_q0);

    clusters_U : component Kmeans_X
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => clusters_address0,
        ce0 => clusters_ce0,
        we0 => clusters_we0,
        d0 => reg_647,
        q0 => clusters_q0);

    grp_distance_fu_591 : component distance
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x1 => X_prot_load_reg_1302,
        y1 => Y_prot_load_reg_1307,
        x2 => reg_635,
        y2 => reg_641,
        ap_return => grp_distance_fu_591_ap_return);

    grp_moy_fu_599 : component moy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        somme => X_clus_0_reg_556,
        taille => size_0_reg_544,
        ap_return => grp_moy_fu_599_ap_return);

    grp_moy_fu_607 : component moy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        somme => Y_clus_0_reg_568,
        taille => size_0_reg_544,
        ap_return => grp_moy_fu_607_ap_return);

    Kmeans_fadd_32ns_32ns_32_5_full_dsp_1_U21 : component Kmeans_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => X_clus_0_reg_556,
        din1 => reg_635,
        ce => ap_const_logic_1,
        dout => grp_fu_615_p2);

    Kmeans_fadd_32ns_32ns_32_5_full_dsp_1_U22 : component Kmeans_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Y_clus_0_reg_568,
        din1 => reg_641,
        ce => ap_const_logic_1,
        dout => grp_fu_620_p2);

    Kmeans_sitofp_32ns_32_6_1_U23 : component Kmeans_sitofp_32ns_32_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_625_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_625_p1);

    Kmeans_fcmp_32ns_32ns_1_2_1_U24 : component Kmeans_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_629_p0,
        din1 => grp_fu_629_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_629_opcode,
        dout => grp_fu_629_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state29);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state39) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state39)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state39);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state109) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state109)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state109);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    X_clus_0_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                X_clus_0_reg_556 <= X_clus_1_fu_1099_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                X_clus_0_reg_556 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    Y_clus_0_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                Y_clus_0_reg_568 <= Y_clus_1_fu_1106_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                Y_clus_0_reg_568 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    belonging_cluster_in_1_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                belonging_cluster_in_1_reg_509 <= belonging_cluster_in_2_fu_965_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                belonging_cluster_in_1_reg_509 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    belonging_cluster_in_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                belonging_cluster_in_reg_486 <= i_reg_1287;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                belonging_cluster_in_reg_486 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_835_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_1_reg_521 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                i_1_reg_521 <= i_2_reg_1337;
            end if; 
        end if;
    end process;

    iter_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                iter_0_reg_464 <= ap_const_lv4_0;
            elsif (((icmp_ln60_fu_977_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                iter_0_reg_464 <= iter_reg_1251;
            end if; 
        end if;
    end process;

    j_0_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                j_0_reg_475 <= j_reg_1259;
            elsif (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                j_0_reg_475 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_1_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                j_1_reg_533 <= j_2_reg_1355;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                j_1_reg_533 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    min_distance_0_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                min_distance_0_reg_497 <= min_distance_1_fu_958_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                min_distance_0_reg_497 <= ap_const_lv32_47C34F80;
            end if; 
        end if;
    end process;

    phi_ln26_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln26_reg_416 <= add_ln26_reg_1195;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln26_reg_416 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_ln27_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_ln27_reg_428 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_ln27_reg_428 <= add_ln27_reg_1209;
            end if; 
        end if;
    end process;

    phi_ln28_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                phi_ln28_reg_440 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                phi_ln28_reg_440 <= add_ln28_reg_1223;
            end if; 
        end if;
    end process;

    phi_ln29_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                phi_ln29_reg_452 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                phi_ln29_reg_452 <= add_ln29_reg_1237;
            end if; 
        end if;
    end process;

    phi_ln79_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_ln79_reg_580 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln79_fu_1119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                phi_ln79_reg_580 <= add_ln79_fu_1125_p2;
            end if; 
        end if;
    end process;

    size_0_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                size_0_reg_544 <= size_1_reg_1402;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                size_0_reg_544 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                INPUT_addr_1_read_reg_1228 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    INPUT_addr_1_reg_1179(29 downto 0) <= empty_11_fu_737_p1(32 - 1 downto 0)(29 downto 0);
                    INPUT_addr_2_reg_1185(29 downto 0) <= empty_12_fu_746_p1(32 - 1 downto 0)(29 downto 0);
                    INPUT_addr_reg_1173(29 downto 0) <= empty_10_fu_728_p1(32 - 1 downto 0)(29 downto 0);
                    OUTPUT_addr_reg_1167(29 downto 0) <= empty_fu_719_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                INPUT_addr_2_read_reg_1214 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                INPUT_addr_3_read_reg_1200 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                INPUT_addr_read_reg_1242 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                X_prot_load_reg_1302 <= X_prot_q0;
                Y_prot_load_reg_1307 <= Y_prot_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_reg_1195 <= add_ln26_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln27_reg_1209 <= add_ln27_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln28_reg_1223 <= add_ln28_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln29_reg_1237 <= add_ln29_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                and_ln67_1_reg_1396 <= and_ln67_1_fu_1079_p2;
                size_1_reg_1402 <= size_1_fu_1091_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                bitcast_ln67_1_reg_1342 <= bitcast_ln67_1_fu_989_p1;
                icmp_ln67_3_reg_1347 <= icmp_ln67_3_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                i_2_reg_1337 <= i_2_fu_983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                i_reg_1287 <= i_fu_863_p2;
                    zext_ln47_reg_1279(3 downto 0) <= zext_ln47_fu_853_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln26_reg_1191 <= icmp_ln26_fu_755_p2;
                icmp_ln26_reg_1191_pp0_iter1_reg <= icmp_ln26_reg_1191;
                phi_ln26_reg_416_pp0_iter1_reg <= phi_ln26_reg_416;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln27_reg_1205 <= icmp_ln27_fu_772_p2;
                icmp_ln27_reg_1205_pp1_iter1_reg <= icmp_ln27_reg_1205;
                phi_ln27_reg_428_pp1_iter1_reg <= phi_ln27_reg_428;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln28_reg_1219 <= icmp_ln28_fu_789_p2;
                icmp_ln28_reg_1219_pp2_iter1_reg <= icmp_ln28_reg_1219;
                phi_ln28_reg_440_pp2_iter1_reg <= phi_ln28_reg_440;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln29_reg_1233 <= icmp_ln29_fu_806_p2;
                icmp_ln29_reg_1233_pp3_iter1_reg <= icmp_ln29_reg_1233;
                phi_ln29_reg_452_pp3_iter1_reg <= phi_ln29_reg_452;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                icmp_ln67_1_reg_1381 <= icmp_ln67_1_fu_1059_p2;
                icmp_ln67_reg_1376 <= icmp_ln67_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_1003_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                icmp_ln67_2_reg_1371 <= icmp_ln67_2_fu_1029_p2;
                    zext_ln67_reg_1360(7 downto 0) <= zext_ln67_fu_1015_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln79_reg_1427 <= icmp_ln79_fu_1119_p2;
                icmp_ln79_reg_1427_pp4_iter1_reg <= icmp_ln79_reg_1427;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_X1_reg_1156 <= in_X(31 downto 2);
                in_X_prot5_reg_1146 <= in_X_prot(31 downto 2);
                in_Y3_reg_1151 <= in_Y(31 downto 2);
                in_Y_prot7_reg_1141 <= in_Y_prot(31 downto 2);
                out_clusters9_reg_1136 <= out_clusters(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                iter_reg_1251 <= iter_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                j_2_reg_1355 <= j_2_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                j_reg_1259 <= j_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                new_distance_reg_1312 <= grp_distance_fu_591_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
                reg_635 <= X_q0;
                reg_641 <= Y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state69))) then
                reg_647 <= grp_fu_625_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln79_reg_1427 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then
                reg_653 <= clusters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                tmp_9_reg_1417 <= grp_moy_fu_599_ap_return;
                tmp_s_reg_1422 <= grp_moy_fu_607_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_835_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    zext_ln49_reg_1264(7 downto 0) <= zext_ln49_fu_847_p1(7 downto 0);
            end if;
        end if;
    end process;
    OUTPUT_addr_reg_1167(31 downto 30) <= "00";
    INPUT_addr_reg_1173(31 downto 30) <= "00";
    INPUT_addr_1_reg_1179(31 downto 30) <= "00";
    INPUT_addr_2_reg_1185(31 downto 30) <= "00";
    zext_ln49_reg_1264(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln47_reg_1279(31 downto 4) <= "0000000000000000000000000000";
    zext_ln67_reg_1360(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state32, ap_enable_reg_pp3_iter1, ap_CS_fsm_state22, ap_enable_reg_pp2_iter1, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state43, icmp_ln39_fu_823_p2, ap_enable_reg_pp4_iter2, ap_CS_fsm_state116, INPUT_r_ARREADY, OUTPUT_r_BVALID, ap_enable_reg_pp4_iter1, icmp_ln26_fu_755_p2, ap_enable_reg_pp0_iter0, icmp_ln27_fu_772_p2, ap_enable_reg_pp1_iter0, icmp_ln28_fu_789_p2, ap_enable_reg_pp2_iter0, icmp_ln29_fu_806_p2, ap_enable_reg_pp3_iter0, ap_block_state43_io, ap_CS_fsm_state44, icmp_ln42_fu_835_p2, ap_CS_fsm_state46, icmp_ln47_fu_857_p2, ap_CS_fsm_state71, ap_CS_fsm_state78, icmp_ln65_fu_1003_p2, icmp_ln79_fu_1119_p2, ap_enable_reg_pp4_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, icmp_ln60_fu_977_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln26_fu_755_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln26_fu_755_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln27_fu_772_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln27_fu_772_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln28_fu_789_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln28_fu_789_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln29_fu_806_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln29_fu_806_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln42_fu_835_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln47_fu_857_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state71 => 
                if (((icmp_ln60_fu_977_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((icmp_ln65_fu_1003_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln79_fu_1119_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln79_fu_1119_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_ARADDR_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state2, INPUT_r_ARREADY, INPUT_addr_reg_1173, INPUT_addr_1_reg_1179, INPUT_addr_2_reg_1185, empty_13_fu_709_p1)
    begin
        if ((ap_const_logic_1 = INPUT_r_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                INPUT_r_ARADDR <= INPUT_addr_reg_1173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                INPUT_r_ARADDR <= INPUT_addr_1_reg_1179;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                INPUT_r_ARADDR <= INPUT_addr_2_reg_1185;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                INPUT_r_ARADDR <= empty_13_fu_709_p1(32 - 1 downto 0);
            else 
                INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARLEN_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state2, INPUT_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            INPUT_r_ARLEN <= ap_const_lv32_8;
        elsif ((((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            INPUT_r_ARLEN <= ap_const_lv32_80;
        else 
            INPUT_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state2, INPUT_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = INPUT_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            INPUT_r_ARVALID <= ap_const_logic_1;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln29_reg_1233, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln28_reg_1219, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln27_reg_1205, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln26_reg_1191, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            INPUT_r_RREADY <= ap_const_logic_1;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_blk_n_AR_assign_proc : process(m_axi_INPUT_r_ARREADY, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            INPUT_r_blk_n_AR <= m_axi_INPUT_r_ARREADY;
        else 
            INPUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_r_blk_n_R_assign_proc : process(m_axi_INPUT_r_RVALID, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln29_reg_1233, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln28_reg_1219, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln27_reg_1205, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln26_reg_1191)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            INPUT_r_blk_n_R <= m_axi_INPUT_r_RVALID;
        else 
            INPUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state43, icmp_ln39_fu_823_p2, ap_block_state43_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state43_io) and (icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            OUTPUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(ap_CS_fsm_state116, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            OUTPUT_r_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln79_reg_1427_pp4_iter1_reg, ap_block_pp4_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln79_reg_1427_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_blk_n_AW_assign_proc : process(m_axi_OUTPUT_r_AWREADY, ap_CS_fsm_state43, icmp_ln39_fu_823_p2)
    begin
        if (((icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            OUTPUT_r_blk_n_AW <= m_axi_OUTPUT_r_AWREADY;
        else 
            OUTPUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_B_assign_proc : process(m_axi_OUTPUT_r_BVALID, ap_CS_fsm_state116)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            OUTPUT_r_blk_n_B <= m_axi_OUTPUT_r_BVALID;
        else 
            OUTPUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_W_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, icmp_ln79_reg_1427_pp4_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln79_reg_1427_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    X_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state79, ap_CS_fsm_state44, zext_ln49_fu_847_p1, zext_ln67_reg_1360, ap_enable_reg_pp0_iter2, zext_ln26_fu_767_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            X_address0 <= zext_ln67_reg_1360(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            X_address0 <= zext_ln49_fu_847_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_address0 <= zext_ln26_fu_767_p1(7 - 1 downto 0);
        else 
            X_address0 <= "XXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state79, ap_CS_fsm_state44, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_clus_1_fu_1099_p3 <= 
        grp_fu_615_p2 when (and_ln67_1_reg_1396(0) = '1') else 
        X_clus_0_reg_556;

    X_prot_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state46, ap_enable_reg_pp2_iter2, ap_CS_fsm_state108, zext_ln28_fu_801_p1, zext_ln49_1_fu_869_p1, zext_ln74_fu_1113_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            X_prot_address0 <= zext_ln74_fu_1113_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            X_prot_address0 <= zext_ln49_1_fu_869_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            X_prot_address0 <= zext_ln28_fu_801_p1(7 - 1 downto 0);
        else 
            X_prot_address0 <= "XXXXXXX";
        end if; 
    end process;


    X_prot_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state46, ap_enable_reg_pp2_iter2, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state108) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            X_prot_ce0 <= ap_const_logic_1;
        else 
            X_prot_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_prot_d0_assign_proc : process(ap_block_pp2_stage0, INPUT_addr_1_read_reg_1228, tmp_9_reg_1417, ap_enable_reg_pp2_iter2, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            X_prot_d0 <= tmp_9_reg_1417;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            X_prot_d0 <= INPUT_addr_1_read_reg_1228;
        else 
            X_prot_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_prot_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln28_reg_1219_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln28_reg_1219_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            X_prot_we0 <= ap_const_logic_1;
        else 
            X_prot_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_1191_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1191_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_we0 <= ap_const_logic_1;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state79, ap_CS_fsm_state44, zext_ln49_fu_847_p1, zext_ln67_reg_1360, ap_enable_reg_pp1_iter2, zext_ln27_fu_784_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            Y_address0 <= zext_ln67_reg_1360(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            Y_address0 <= zext_ln49_fu_847_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            Y_address0 <= zext_ln27_fu_784_p1(7 - 1 downto 0);
        else 
            Y_address0 <= "XXXXXXX";
        end if; 
    end process;


    Y_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state79, ap_CS_fsm_state44, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_clus_1_fu_1106_p3 <= 
        grp_fu_620_p2 when (and_ln67_1_reg_1396(0) = '1') else 
        Y_clus_0_reg_568;

    Y_prot_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_state46, ap_enable_reg_pp3_iter2, ap_CS_fsm_state108, zext_ln29_fu_818_p1, zext_ln49_1_fu_869_p1, zext_ln74_fu_1113_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            Y_prot_address0 <= zext_ln74_fu_1113_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Y_prot_address0 <= zext_ln49_1_fu_869_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            Y_prot_address0 <= zext_ln29_fu_818_p1(7 - 1 downto 0);
        else 
            Y_prot_address0 <= "XXXXXXX";
        end if; 
    end process;


    Y_prot_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state46, ap_enable_reg_pp3_iter2, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state108) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then 
            Y_prot_ce0 <= ap_const_logic_1;
        else 
            Y_prot_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_prot_d0_assign_proc : process(ap_block_pp3_stage0, INPUT_addr_read_reg_1242, tmp_s_reg_1422, ap_enable_reg_pp3_iter2, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            Y_prot_d0 <= tmp_s_reg_1422;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            Y_prot_d0 <= INPUT_addr_read_reg_1242;
        else 
            Y_prot_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Y_prot_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln29_reg_1233_pp3_iter1_reg, ap_enable_reg_pp3_iter2, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln29_reg_1233_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then 
            Y_prot_we0 <= ap_const_logic_1;
        else 
            Y_prot_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln27_reg_1205_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln27_reg_1205_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            Y_we0 <= ap_const_logic_1;
        else 
            Y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln26_fu_761_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln26_phi_fu_420_p4) + unsigned(ap_const_lv8_1));
    add_ln27_fu_778_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln27_phi_fu_432_p4) + unsigned(ap_const_lv8_1));
    add_ln28_fu_795_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln28_phi_fu_444_p4) + unsigned(ap_const_lv4_1));
    add_ln29_fu_812_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln29_phi_fu_456_p4) + unsigned(ap_const_lv4_1));
    add_ln79_fu_1125_p2 <= std_logic_vector(unsigned(phi_ln79_reg_580) + unsigned(ap_const_lv8_1));
    and_ln50_1_fu_952_p2 <= (grp_fu_629_p2 and and_ln50_fu_946_p2);
    and_ln50_fu_946_p2 <= (or_ln50_fu_922_p2 and or_ln50_1_fu_940_p2);
    and_ln67_1_fu_1079_p2 <= (grp_fu_629_p2 and and_ln67_fu_1073_p2);
    and_ln67_fu_1073_p2 <= (or_ln67_fu_1065_p2 and or_ln67_1_fu_1069_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(100);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state107 <= ap_CS_fsm(98);
    ap_CS_fsm_state108 <= ap_CS_fsm(99);
    ap_CS_fsm_state116 <= ap_CS_fsm(105);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state32 <= ap_CS_fsm(25);
    ap_CS_fsm_state38 <= ap_CS_fsm(31);
    ap_CS_fsm_state42 <= ap_CS_fsm(33);
    ap_CS_fsm_state43 <= ap_CS_fsm(34);
    ap_CS_fsm_state44 <= ap_CS_fsm(35);
    ap_CS_fsm_state45 <= ap_CS_fsm(36);
    ap_CS_fsm_state46 <= ap_CS_fsm(37);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state48 <= ap_CS_fsm(39);
    ap_CS_fsm_state62 <= ap_CS_fsm(53);
    ap_CS_fsm_state63 <= ap_CS_fsm(54);
    ap_CS_fsm_state64 <= ap_CS_fsm(55);
    ap_CS_fsm_state69 <= ap_CS_fsm(60);
    ap_CS_fsm_state70 <= ap_CS_fsm(61);
    ap_CS_fsm_state71 <= ap_CS_fsm(62);
    ap_CS_fsm_state76 <= ap_CS_fsm(67);
    ap_CS_fsm_state77 <= ap_CS_fsm(68);
    ap_CS_fsm_state78 <= ap_CS_fsm(69);
    ap_CS_fsm_state79 <= ap_CS_fsm(70);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(71);
    ap_CS_fsm_state81 <= ap_CS_fsm(72);
    ap_CS_fsm_state85 <= ap_CS_fsm(76);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln26_reg_1191, INPUT_r_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln26_reg_1191, INPUT_r_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln27_reg_1205, INPUT_r_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln27_reg_1205, INPUT_r_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln28_reg_1219, INPUT_r_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln28_reg_1219, INPUT_r_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln29_reg_1233, INPUT_r_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln29_reg_1233, INPUT_r_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state111_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state111_io));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state111_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state111_io));
    end process;

        ap_block_state109_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln26_reg_1191, INPUT_r_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln26_reg_1191 = ap_const_lv1_0));
    end process;

        ap_block_state110_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state111_io_assign_proc : process(icmp_ln79_reg_1427_pp4_iter1_reg, OUTPUT_r_WREADY)
    begin
                ap_block_state111_io <= ((ap_const_logic_0 = OUTPUT_r_WREADY) and (icmp_ln79_reg_1427_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state111_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(icmp_ln27_reg_1205, INPUT_r_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln27_reg_1205 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_pp2_stage0_iter1_assign_proc : process(icmp_ln28_reg_1219, INPUT_r_RVALID)
    begin
                ap_block_state30_pp2_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln28_reg_1219 = ap_const_lv1_0));
    end process;

        ap_block_state31_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_pp3_stage0_iter1_assign_proc : process(icmp_ln29_reg_1233, INPUT_r_RVALID)
    begin
                ap_block_state40_pp3_stage0_iter1 <= ((ap_const_logic_0 = INPUT_r_RVALID) and (icmp_ln29_reg_1233 = ap_const_lv1_0));
    end process;

        ap_block_state41_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_io_assign_proc : process(icmp_ln39_fu_823_p2, OUTPUT_r_AWREADY)
    begin
                ap_block_state43_io <= ((icmp_ln39_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_AWREADY));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln26_fu_755_p2)
    begin
        if ((icmp_ln26_fu_755_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln27_fu_772_p2)
    begin
        if ((icmp_ln27_fu_772_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state29_assign_proc : process(icmp_ln28_fu_789_p2)
    begin
        if ((icmp_ln28_fu_789_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state39_assign_proc : process(icmp_ln29_fu_806_p2)
    begin
        if ((icmp_ln29_fu_806_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state109_assign_proc : process(icmp_ln79_fu_1119_p2)
    begin
        if ((icmp_ln79_fu_1119_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state109 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state109 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state116, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln26_phi_fu_420_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln26_reg_1191, phi_ln26_reg_416, add_ln26_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_1191 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_phi_ln26_phi_fu_420_p4 <= add_ln26_reg_1195;
        else 
            ap_phi_mux_phi_ln26_phi_fu_420_p4 <= phi_ln26_reg_416;
        end if; 
    end process;


    ap_phi_mux_phi_ln27_phi_fu_432_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln27_reg_1205, phi_ln27_reg_428, add_ln27_reg_1209)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln27_reg_1205 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_phi_ln27_phi_fu_432_p4 <= add_ln27_reg_1209;
        else 
            ap_phi_mux_phi_ln27_phi_fu_432_p4 <= phi_ln27_reg_428;
        end if; 
    end process;


    ap_phi_mux_phi_ln28_phi_fu_444_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln28_reg_1219, phi_ln28_reg_440, add_ln28_reg_1223)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln28_reg_1219 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_phi_ln28_phi_fu_444_p4 <= add_ln28_reg_1223;
        else 
            ap_phi_mux_phi_ln28_phi_fu_444_p4 <= phi_ln28_reg_440;
        end if; 
    end process;


    ap_phi_mux_phi_ln29_phi_fu_456_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln29_reg_1233, phi_ln29_reg_452, add_ln29_reg_1237)
    begin
        if (((icmp_ln29_reg_1233 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_phi_ln29_phi_fu_456_p4 <= add_ln29_reg_1237;
        else 
            ap_phi_mux_phi_ln29_phi_fu_456_p4 <= phi_ln29_reg_452;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state116, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    belonging_cluster_in_2_fu_965_p3 <= 
        zext_ln47_reg_1279 when (and_ln50_1_fu_952_p2(0) = '1') else 
        belonging_cluster_in_1_reg_509;
    bitcast_ln50_1_fu_892_p1 <= min_distance_0_reg_497;
    bitcast_ln50_fu_875_p1 <= new_distance_reg_1312;
    bitcast_ln67_1_fu_989_p1 <= reg_647;
    bitcast_ln67_fu_1035_p1 <= clusters_q0;

    clusters_address0_assign_proc : process(ap_block_pp4_stage0, ap_CS_fsm_pp4_stage0, zext_ln49_reg_1264, ap_CS_fsm_state78, zext_ln67_fu_1015_p1, ap_enable_reg_pp4_iter0, ap_CS_fsm_state70, zext_ln79_fu_1131_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            clusters_address0 <= zext_ln79_fu_1131_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            clusters_address0 <= zext_ln67_fu_1015_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            clusters_address0 <= zext_ln49_reg_1264(7 - 1 downto 0);
        else 
            clusters_address0 <= "XXXXXXX";
        end if; 
    end process;


    clusters_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state78, ap_enable_reg_pp4_iter0, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state70) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            clusters_ce0 <= ap_const_logic_1;
        else 
            clusters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clusters_we0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            clusters_we0 <= ap_const_logic_1;
        else 
            clusters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_Y_prot7_reg_1141),64));
    empty_11_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_X_prot5_reg_1146),64));
    empty_12_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_Y3_reg_1151),64));
    empty_13_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_X1_reg_1156),64));
    empty_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_clusters9_reg_1136),64));

    grp_fu_625_p0_assign_proc : process(ap_CS_fsm_state46, zext_ln60_fu_972_p1, ap_CS_fsm_state71, belonging_cluster_in_1_reg_509)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_625_p0 <= zext_ln60_fu_972_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_625_p0 <= belonging_cluster_in_1_reg_509;
        else 
            grp_fu_625_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_629_opcode_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_629_opcode <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_629_opcode <= ap_const_lv5_4;
        else 
            grp_fu_629_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_629_p0_assign_proc : process(clusters_q0, ap_CS_fsm_state79, new_distance_reg_1312, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_629_p0 <= clusters_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_629_p0 <= new_distance_reg_1312;
        else 
            grp_fu_629_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_629_p1_assign_proc : process(reg_647, ap_CS_fsm_state79, min_distance_0_reg_497, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_629_p1 <= reg_647;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_629_p1 <= min_distance_0_reg_497;
        else 
            grp_fu_629_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_983_p2 <= std_logic_vector(unsigned(i_1_reg_521) + unsigned(ap_const_lv4_1));
    i_fu_863_p2 <= std_logic_vector(unsigned(belonging_cluster_in_reg_486) + unsigned(ap_const_lv4_1));
    icmp_ln26_fu_755_p2 <= "1" when (ap_phi_mux_phi_ln26_phi_fu_420_p4 = ap_const_lv8_80) else "0";
    icmp_ln27_fu_772_p2 <= "1" when (ap_phi_mux_phi_ln27_phi_fu_432_p4 = ap_const_lv8_80) else "0";
    icmp_ln28_fu_789_p2 <= "1" when (ap_phi_mux_phi_ln28_phi_fu_444_p4 = ap_const_lv4_8) else "0";
    icmp_ln29_fu_806_p2 <= "1" when (ap_phi_mux_phi_ln29_phi_fu_456_p4 = ap_const_lv4_8) else "0";
    icmp_ln39_fu_823_p2 <= "1" when (iter_0_reg_464 = ap_const_lv4_A) else "0";
    icmp_ln42_fu_835_p2 <= "1" when (j_0_reg_475 = ap_const_lv8_80) else "0";
    icmp_ln47_fu_857_p2 <= "1" when (belonging_cluster_in_reg_486 = ap_const_lv4_8) else "0";
    icmp_ln50_1_fu_916_p2 <= "1" when (trunc_ln50_fu_888_p1 = ap_const_lv23_0) else "0";
    icmp_ln50_2_fu_928_p2 <= "0" when (tmp_5_fu_896_p4 = ap_const_lv8_FF) else "1";
    icmp_ln50_3_fu_934_p2 <= "1" when (trunc_ln50_1_fu_906_p1 = ap_const_lv23_0) else "0";
    icmp_ln50_fu_910_p2 <= "0" when (tmp_1_fu_878_p4 = ap_const_lv8_FF) else "1";
    icmp_ln60_fu_977_p2 <= "1" when (i_1_reg_521 = ap_const_lv4_8) else "0";
    icmp_ln65_fu_1003_p2 <= "1" when (j_1_reg_533 = ap_const_lv8_80) else "0";
    icmp_ln67_1_fu_1059_p2 <= "1" when (trunc_ln67_1_fu_1049_p1 = ap_const_lv23_0) else "0";
    icmp_ln67_2_fu_1029_p2 <= "0" when (tmp_10_fu_1020_p4 = ap_const_lv8_FF) else "1";
    icmp_ln67_3_fu_997_p2 <= "1" when (trunc_ln67_fu_993_p1 = ap_const_lv23_0) else "0";
    icmp_ln67_fu_1053_p2 <= "0" when (tmp_8_fu_1039_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_fu_1119_p2 <= "1" when (phi_ln79_reg_580 = ap_const_lv8_80) else "0";
    iter_fu_829_p2 <= std_logic_vector(unsigned(iter_0_reg_464) + unsigned(ap_const_lv4_1));
    j_2_fu_1009_p2 <= std_logic_vector(unsigned(j_1_reg_533) + unsigned(ap_const_lv8_1));
    j_fu_841_p2 <= std_logic_vector(unsigned(j_0_reg_475) + unsigned(ap_const_lv8_1));
    min_distance_1_fu_958_p3 <= 
        new_distance_reg_1312 when (and_ln50_1_fu_952_p2(0) = '1') else 
        min_distance_0_reg_497;
    or_ln50_1_fu_940_p2 <= (icmp_ln50_3_fu_934_p2 or icmp_ln50_2_fu_928_p2);
    or_ln50_fu_922_p2 <= (icmp_ln50_fu_910_p2 or icmp_ln50_1_fu_916_p2);
    or_ln67_1_fu_1069_p2 <= (icmp_ln67_3_reg_1347 or icmp_ln67_2_reg_1371);
    or_ln67_fu_1065_p2 <= (icmp_ln67_reg_1376 or icmp_ln67_1_reg_1381);
    size_1_fu_1091_p3 <= 
        size_fu_1085_p2 when (and_ln67_1_fu_1079_p2(0) = '1') else 
        size_0_reg_544;
    size_fu_1085_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(size_0_reg_544));
    tmp_10_fu_1020_p4 <= bitcast_ln67_1_reg_1342(30 downto 23);
    tmp_1_fu_878_p4 <= bitcast_ln50_fu_875_p1(30 downto 23);
    tmp_5_fu_896_p4 <= bitcast_ln50_1_fu_892_p1(30 downto 23);
    tmp_8_fu_1039_p4 <= bitcast_ln67_fu_1035_p1(30 downto 23);
    trunc_ln50_1_fu_906_p1 <= bitcast_ln50_1_fu_892_p1(23 - 1 downto 0);
    trunc_ln50_fu_888_p1 <= bitcast_ln50_fu_875_p1(23 - 1 downto 0);
    trunc_ln67_1_fu_1049_p1 <= bitcast_ln67_fu_1035_p1(23 - 1 downto 0);
    trunc_ln67_fu_993_p1 <= bitcast_ln67_1_fu_989_p1(23 - 1 downto 0);
    zext_ln26_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln26_reg_416_pp0_iter1_reg),64));
    zext_ln27_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln27_reg_428_pp1_iter1_reg),64));
    zext_ln28_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln28_reg_440_pp2_iter1_reg),64));
    zext_ln29_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln29_reg_452_pp3_iter1_reg),64));
    zext_ln47_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(belonging_cluster_in_reg_486),32));
    zext_ln49_1_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(belonging_cluster_in_reg_486),64));
    zext_ln49_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_475),64));
    zext_ln60_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_521),32));
    zext_ln67_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_533),64));
    zext_ln74_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_521),64));
    zext_ln79_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln79_reg_580),64));
end behav;
