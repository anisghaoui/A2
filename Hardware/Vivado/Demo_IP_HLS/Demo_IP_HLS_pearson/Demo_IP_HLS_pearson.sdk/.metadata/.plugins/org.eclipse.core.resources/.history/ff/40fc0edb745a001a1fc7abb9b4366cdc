/*
 * pearson.c

 *
 *  Created on: 28 févr. 2020
 *      Author: Qlala
 */
#include<stdio.h>
#include"pearson.h"
#include "xtime_l.h"




float moyenne(float** mat, int col)
{
	int i;
	float somme = 0.0;
	float moyenne = 0.0;

	for (i = 0; i < N_ROWS; i++)
	{
		somme += mat[i][col];
	}
	moyenne = somme / (float)N_ROWS;

	return moyenne;

}

float moyenneXY(float** mat, int colX, int colY)
{
	int i;
	float somme = 0.0;
	float moyenneXY = 0.0;

	for (i = 0; i < N_ROWS; i++)
	{
		somme += mat[i][colX] * mat[i][colY];
	}
	moyenneXY = somme / (float)N_ROWS;

	return moyenneXY;

}

float ecartType(float** mat, int col, float moy)
{
	int i;
	float somme = 0.0;
	float ecartType;

	for (i = 0; i < N_ROWS; i++)
	{
		somme += (mat[i][col] - moy) * (mat[i][col] - moy);
	}

	ecartType = sqrtf(somme / (float)N_ROWS);
	return ecartType;
}

void pearson_sw(float** mat,float *result)
{
	int i;
	int j;
	float moyX;
	float moyY;
	float ectX;
	float ectY;
	float moyXY;
	float coeffPearson = 0.0;
	// pipeline the internal functions

	moyX = moyenne(mat, 0);
	moyY = moyenne(mat, 1);
	moyXY = moyenneXY(mat, 0, 1);
	ectX = ecartType(mat, 0, moyX);
	ectY = ecartType(mat, 1, moyY);
	coeffPearson = (moyXY - moyX * moyY) / (ectX * ectY);

	*result = coeffPearson;
}


int test_pearson()
{
	XTime Start_Time, End_Time, ExecTimeInTicks;
	// allocation matrice de variables (row, col)
	float Mat[N_ROWS][N_COLS] = {
		{6, 14},
		{1, 45},
		{8, 18},
		{1, 19},
		{0, 27},
		{5, 36},
		{3, 28},
		{10, 11},
		{2, 17},
		{8, 12},
		{6, 14},
		{1, 45},
		{8, 18},
		{1, 19},
		{0, 27},
		{5, 36},
		{3, 28},
		{10, 11},
		{2, 17},
		{8, 12}
	};

	//algorithm call
	float result =	0;
	pearson(Mat,&result);

	printf("Le coefficient de Pearson vaut: %lf\n\n GOLDEN VALUE = -0.577739\n\n", result);
	printf("temps mul64 (130MHZ):\r\n");
	ExecTimeInTicks = End_Time - Start_Time;
	double HWelapsedInUs = 1.0 * (End_Time - Start_Time) / (COUNTS_PER_SECOND/1000000);
	printf("(main HW) ExecTime = %lld unit (%.5lf useconds)\r\n", ExecTimeInTicks,HWelapsedInUs);
	printf("***************************\n vs SW\r\n \r\n");
	XTime_GetTime((XTime *) &Start_Time);

	multiply_block_sw((float**)A,(float**)B,(float**)result);
	XTime_GetTime((XTime *) &End_Time);
	ExecTimeInTicks = End_Time - Start_Time;
	double SWelapsedInUs = 1.0 * (End_Time - Start_Time) / (COUNTS_PER_SECOND/1000000);
	printf("(main SW) ExecTime = %lld unit (%.5f useconds)\r\n", ExecTimeInTicks,
			SWelapsedInUs);
	printf("fin du test\r\n");
	return 0;
}
