// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=260,HLS_SYN_DSP=4,HLS_SYN_FF=4691,HLS_SYN_LUT=7770}" *)

module sobel (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 40'b1;
parameter    ap_ST_fsm_state2 = 40'b10;
parameter    ap_ST_fsm_state3 = 40'b100;
parameter    ap_ST_fsm_state4 = 40'b1000;
parameter    ap_ST_fsm_state5 = 40'b10000;
parameter    ap_ST_fsm_state6 = 40'b100000;
parameter    ap_ST_fsm_state7 = 40'b1000000;
parameter    ap_ST_fsm_state8 = 40'b10000000;
parameter    ap_ST_fsm_state9 = 40'b100000000;
parameter    ap_ST_fsm_pp0_stage0 = 40'b1000000000;
parameter    ap_ST_fsm_state13 = 40'b10000000000;
parameter    ap_ST_fsm_pp1_stage0 = 40'b100000000000;
parameter    ap_ST_fsm_pp1_stage1 = 40'b1000000000000;
parameter    ap_ST_fsm_pp1_stage2 = 40'b10000000000000;
parameter    ap_ST_fsm_pp1_stage3 = 40'b100000000000000;
parameter    ap_ST_fsm_state60 = 40'b1000000000000000;
parameter    ap_ST_fsm_state61 = 40'b10000000000000000;
parameter    ap_ST_fsm_pp2_stage0 = 40'b100000000000000000;
parameter    ap_ST_fsm_state65 = 40'b1000000000000000000;
parameter    ap_ST_fsm_state66 = 40'b10000000000000000000;
parameter    ap_ST_fsm_state67 = 40'b100000000000000000000;
parameter    ap_ST_fsm_state68 = 40'b1000000000000000000000;
parameter    ap_ST_fsm_state69 = 40'b10000000000000000000000;
parameter    ap_ST_fsm_state70 = 40'b100000000000000000000000;
parameter    ap_ST_fsm_state71 = 40'b1000000000000000000000000;
parameter    ap_ST_fsm_state72 = 40'b10000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage0 = 40'b100000000000000000000000000;
parameter    ap_ST_fsm_state76 = 40'b1000000000000000000000000000;
parameter    ap_ST_fsm_pp4_stage0 = 40'b10000000000000000000000000000;
parameter    ap_ST_fsm_pp4_stage1 = 40'b100000000000000000000000000000;
parameter    ap_ST_fsm_pp4_stage2 = 40'b1000000000000000000000000000000;
parameter    ap_ST_fsm_pp4_stage3 = 40'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state123 = 40'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state124 = 40'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_pp5_stage0 = 40'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state128 = 40'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state129 = 40'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state130 = 40'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state131 = 40'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state132 = 40'b1000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv18_0 = 18'b000000000000000000;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_20800 = 32'b100000100000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv18_20800 = 18'b100000100000000000;
parameter    ap_const_lv18_1 = 18'b1;
parameter    ap_const_lv17_1FF00 = 17'b11111111100000000;
parameter    ap_const_lv17_1 = 17'b1;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv18_3FF = 18'b1111111111;
parameter    ap_const_lv12_BFF = 12'b101111111111;
parameter    ap_const_lv11_401 = 11'b10000000001;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv20_400 = 20'b10000000000;
parameter    ap_const_lv19_20400 = 19'b100000010000000000;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv32_E0400 = 32'b11100000010000000000;
parameter    ap_const_lv32_20400 = 32'b100000010000000000;
parameter    ap_const_lv32_1F800 = 32'b11111100000000000;
parameter    ap_const_lv18_20400 = 18'b100000010000000000;
parameter    ap_const_lv18_1F800 = 18'b11111100000000000;
parameter    ap_const_lv19_1F800 = 19'b11111100000000000;
parameter    ap_const_lv18_400 = 18'b10000000000;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (C_S_AXI_CONTROL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (C_M_AXI_INPUT_R_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (C_M_AXI_OUTPUT_R_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1 : 0] m_axi_INPUT_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1 : 0] m_axi_INPUT_r_AWID;
output  [7:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1 : 0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1 : 0] m_axi_INPUT_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1 : 0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1 : 0] m_axi_INPUT_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1 : 0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1 : 0] m_axi_INPUT_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1 : 0] m_axi_INPUT_r_ARID;
output  [7:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1 : 0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1 : 0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1 : 0] m_axi_INPUT_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1 : 0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1 : 0] m_axi_INPUT_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1 : 0] m_axi_INPUT_r_BUSER;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1 : 0] m_axi_OUTPUT_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1 : 0] m_axi_OUTPUT_r_AWID;
output  [7:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1 : 0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1 : 0] m_axi_OUTPUT_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1 : 0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1 : 0] m_axi_OUTPUT_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1 : 0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1 : 0] m_axi_OUTPUT_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1 : 0] m_axi_OUTPUT_r_ARID;
output  [7:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1 : 0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1 : 0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1 : 0] m_axi_OUTPUT_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1 : 0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1 : 0] m_axi_OUTPUT_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1 : 0] m_axi_OUTPUT_r_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1 : 0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1 : 0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_pointer;
wire   [31:0] out_pointer;
reg    INPUT_r_blk_n_AR;
wire   [0:0] ap_CS_fsm_state66;
reg    INPUT_r_blk_n_R;
wire   [0:0] ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] exitcond3_1_reg_2339;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond3_reg_2120;
reg    OUTPUT_r_blk_n_B;
wire   [0:0] ap_CS_fsm_state70;
reg    OUTPUT_r_blk_n_AW;
wire   [0:0] ap_CS_fsm_state61;
reg    OUTPUT_r_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] exitcond4_reg_2308;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308;
wire   [0:0] ap_CS_fsm_state132;
wire   [0:0] ap_CS_fsm_state124;
reg    ap_enable_reg_pp5_iter2;
reg   [0:0] exitcond4_1_reg_2513;
reg   [0:0] ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513;
wire    INPUT_r_AWREADY;
wire    INPUT_r_WREADY;
reg    INPUT_r_ARVALID;
wire    INPUT_r_ARREADY;
reg   [31:0] INPUT_r_ARADDR;
wire    INPUT_r_RVALID;
reg    INPUT_r_RREADY;
wire   [7:0] INPUT_r_RDATA;
wire    INPUT_r_RLAST;
wire   [0:0] INPUT_r_RID;
wire   [0:0] INPUT_r_RUSER;
wire   [1:0] INPUT_r_RRESP;
wire    INPUT_r_BVALID;
wire   [1:0] INPUT_r_BRESP;
wire   [0:0] INPUT_r_BID;
wire   [0:0] INPUT_r_BUSER;
reg    OUTPUT_r_AWVALID;
wire    OUTPUT_r_AWREADY;
reg   [31:0] OUTPUT_r_AWADDR;
reg   [31:0] OUTPUT_r_AWLEN;
reg    OUTPUT_r_WVALID;
wire    OUTPUT_r_WREADY;
wire    OUTPUT_r_ARREADY;
wire    OUTPUT_r_RVALID;
wire   [7:0] OUTPUT_r_RDATA;
wire    OUTPUT_r_RLAST;
wire   [0:0] OUTPUT_r_RID;
wire   [0:0] OUTPUT_r_RUSER;
wire   [1:0] OUTPUT_r_RRESP;
wire    OUTPUT_r_BVALID;
reg    OUTPUT_r_BREADY;
wire   [1:0] OUTPUT_r_BRESP;
wire   [0:0] OUTPUT_r_BID;
wire   [0:0] OUTPUT_r_BUSER;
reg   [17:0] indvar_reg_454;
reg   [17:0] ap_pipeline_reg_pp0_iter1_indvar_reg_454;
reg   [16:0] indvar_flatten_reg_466;
reg   [7:0] i_reg_477;
reg   [9:0] j_reg_488;
reg   [31:0] indvar1_reg_499;
reg   [17:0] indvar_1_reg_510;
reg   [17:0] ap_pipeline_reg_pp3_iter1_indvar_1_reg_510;
reg   [16:0] indvar_flatten7_reg_522;
reg   [7:0] i_s_reg_533;
reg   [9:0] j_s_reg_544;
reg   [17:0] indvar1_1_reg_555;
reg   [7:0] reg_574;
wire   [7:0] image_in_q1;
reg   [7:0] reg_580;
wire   [0:0] ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter0;
reg   [0:0] exitcond_flatten_reg_2129;
wire   [7:0] image_in_q0;
wire   [0:0] ap_CS_fsm_pp4_stage2;
reg    ap_enable_reg_pp4_iter0;
reg   [0:0] exitcond_flatten9_reg_2348;
reg   [7:0] reg_585;
wire   [0:0] ap_CS_fsm_pp1_stage3;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] ap_CS_fsm_pp4_stage3;
wire   [0:0] ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire   [63:0] grp_fu_566_p1;
reg   [63:0] reg_590;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129;
reg    ap_enable_reg_pp4_iter3;
reg   [0:0] ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348;
wire   [63:0] grp_fu_569_p2;
reg   [63:0] reg_595;
reg    ap_enable_reg_pp1_iter10;
reg   [0:0] ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129;
reg    ap_enable_reg_pp4_iter10;
reg   [0:0] ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348;
wire   [7:0] image_out_q0;
reg   [7:0] reg_599;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg    ap_sig_ioackin_OUTPUT_r_WREADY;
wire   [0:0] ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire  signed [33:0] tmp_7_cast1_fu_604_p1;
reg  signed [33:0] tmp_7_cast1_reg_2080;
wire  signed [32:0] tmp_7_cast_fu_608_p1;
reg  signed [32:0] tmp_7_cast_reg_2085;
wire  signed [32:0] tmp_8_cast_fu_612_p1;
reg  signed [32:0] tmp_8_cast_reg_2090;
wire   [18:0] offset_cast_fu_619_p1;
reg   [18:0] offset_cast_reg_2096;
wire   [0:0] ap_CS_fsm_state2;
wire   [2:0] tmp_2_fu_629_p1;
reg   [2:0] tmp_2_reg_2104;
wire   [0:0] exitcond2_fu_623_p2;
wire   [19:0] tmp_1_fu_633_p3;
reg   [19:0] tmp_1_reg_2109;
reg   [31:0] INPUT_addr_reg_2114;
wire   [0:0] exitcond3_fu_660_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120;
wire   [17:0] indvar_next_fu_666_p2;
reg   [17:0] indvar_next_reg_2124;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten_fu_677_p2;
reg   [0:0] ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter3_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter4_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter5_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter6_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter7_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter8_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter9_exitcond_flatten_reg_2129;
reg   [0:0] ap_pipeline_reg_pp1_iter11_exitcond_flatten_reg_2129;
wire   [16:0] indvar_flatten_next_fu_683_p2;
reg   [16:0] indvar_flatten_next_reg_2133;
wire   [9:0] j_mid2_fu_695_p3;
reg   [9:0] j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter1_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter2_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter3_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter4_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter5_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter6_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter7_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter8_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter9_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter10_j_mid2_reg_2138;
reg   [9:0] ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138;
wire   [7:0] tmp_24_mid2_v_v_fu_709_p3;
reg   [7:0] tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter1_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter2_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter3_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter4_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter5_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter6_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter7_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter8_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter9_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter10_tmp_24_mid2_v_v_reg_2147;
reg   [7:0] ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147;
wire   [17:0] tmp_24_mid2_fu_717_p3;
reg   [17:0] tmp_24_mid2_reg_2154;
wire   [18:0] j_cast1_fu_735_p1;
reg   [18:0] j_cast1_reg_2164;
wire   [9:0] j_1_fu_769_p2;
reg   [9:0] j_1_reg_2179;
wire   [0:0] ap_CS_fsm_pp1_stage1;
wire   [8:0] tmp1_fu_802_p2;
reg   [8:0] tmp1_reg_2189;
wire   [10:0] tmp4_fu_808_p3;
reg   [10:0] tmp4_reg_2194;
wire   [8:0] tmp8_fu_910_p2;
reg   [8:0] tmp8_reg_2224;
wire   [10:0] conv1_1_fu_953_p2;
reg   [10:0] conv1_1_reg_2229;
wire   [9:0] conv2_3_fu_975_p2;
reg   [9:0] conv2_3_reg_2234;
wire   [10:0] conv1_3_fu_994_p2;
reg   [10:0] conv1_3_reg_2239;
wire  signed [21:0] tmp_27_fu_2042_p2;
reg  signed [21:0] tmp_27_reg_2244;
wire  signed [21:0] grp_fu_2048_p3;
reg  signed [21:0] p_reg_2249;
wire  signed [31:0] tmp_29_fu_1027_p1;
reg   [0:0] p_Result_s_reg_2259;
wire   [31:0] p_Val2_3_fu_1151_p3;
reg   [31:0] p_Val2_3_reg_2264;
wire   [0:0] or_cond_fu_1228_p2;
reg   [0:0] or_cond_reg_2273;
wire   [0:0] ap_CS_fsm_state60;
wire   [31:0] target_off_3_fu_1257_p3;
reg   [31:0] target_off_3_reg_2278;
wire   [0:0] tmp_3_fu_1265_p2;
reg   [0:0] tmp_3_reg_2283;
wire   [18:0] offset_3_fu_1271_p3;
reg   [18:0] offset_3_reg_2288;
reg   [31:0] OUTPUT_addr_reg_2293;
wire   [31:0] source_off_3_cast_fu_1311_p1;
reg   [31:0] source_off_3_cast_reg_2298;
reg    ap_sig_ioackin_OUTPUT_r_AWREADY;
wire   [31:0] offset_3_cast_fu_1315_p1;
reg   [31:0] offset_3_cast_reg_2303;
wire   [0:0] exitcond4_fu_1319_p2;
wire   [31:0] indvar_next1_fu_1324_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [2:0] k_1_s_fu_1340_p2;
reg   [2:0] k_1_s_reg_2322;
wire   [0:0] ap_CS_fsm_state65;
wire   [19:0] tmp_1_1_fu_1345_p3;
reg   [19:0] tmp_1_1_reg_2328;
reg   [31:0] INPUT_addr_1_reg_2333;
wire   [0:0] exitcond3_1_fu_1372_p2;
reg   [0:0] ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339;
wire   [17:0] indvar_next_1_fu_1378_p2;
reg   [17:0] indvar_next_1_reg_2343;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] exitcond_flatten9_fu_1389_p2;
reg   [0:0] ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter3_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter4_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter5_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter6_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter7_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter8_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter9_exitcond_flatten9_reg_2348;
reg   [0:0] ap_pipeline_reg_pp4_iter11_exitcond_flatten9_reg_2348;
wire   [16:0] indvar_flatten_next8_fu_1395_p2;
reg   [16:0] indvar_flatten_next8_reg_2352;
wire   [9:0] j_mid2_17_fu_1407_p3;
reg   [9:0] j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter1_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter2_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter3_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter4_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter5_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter6_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter7_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter8_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter9_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter10_j_mid2_17_reg_2357;
reg   [9:0] ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357;
wire   [7:0] tmp_7_1_mid2_v_v_fu_1421_p3;
reg   [7:0] tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter1_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter2_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter3_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter4_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter5_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter6_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter7_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter8_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter9_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter10_tmp_7_1_mid2_v_v_reg_2366;
reg   [7:0] ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366;
wire   [17:0] tmp_7_1_mid2_fu_1429_p3;
reg   [17:0] tmp_7_1_mid2_reg_2373;
wire   [18:0] j_cast1_18_fu_1447_p1;
reg   [18:0] j_cast1_18_reg_2383;
wire   [9:0] j_1_1_fu_1481_p2;
reg   [9:0] j_1_1_reg_2398;
wire   [0:0] ap_CS_fsm_pp4_stage1;
wire   [8:0] tmp_43_fu_1514_p2;
reg   [8:0] tmp_43_reg_2408;
wire   [10:0] tmp21_fu_1520_p3;
reg   [10:0] tmp21_reg_2413;
wire   [8:0] tmp8_1_fu_1622_p2;
reg   [8:0] tmp8_1_reg_2443;
wire   [10:0] conv1_1_1_fu_1665_p2;
reg   [10:0] conv1_1_1_reg_2448;
wire   [9:0] conv2_3_1_fu_1687_p2;
reg   [9:0] conv2_3_1_reg_2453;
wire   [10:0] conv1_3_1_fu_1706_p2;
reg   [10:0] conv1_3_1_reg_2458;
wire  signed [21:0] tmp_41_1_fu_2055_p2;
reg  signed [21:0] tmp_41_1_reg_2463;
wire  signed [21:0] grp_fu_2061_p3;
reg  signed [21:0] p_1_reg_2468;
wire  signed [31:0] tmp_42_s_fu_1739_p1;
reg   [0:0] p_Result_2_reg_2478;
wire   [31:0] p_Val2_9_fu_1863_p3;
reg   [31:0] p_Val2_9_reg_2483;
wire   [0:0] tmp_6_1_fu_1925_p2;
reg   [0:0] tmp_6_1_reg_2492;
wire   [0:0] ap_CS_fsm_state123;
wire   [31:0] p_offset_1_cast1_fu_1959_p3;
reg   [31:0] p_offset_1_cast1_reg_2498;
reg   [31:0] OUTPUT_addr_1_reg_2503;
wire   [18:0] p_offset_1_cast_fu_1998_p3;
reg   [18:0] p_offset_1_cast_reg_2508;
wire   [0:0] exitcond4_1_fu_2014_p2;
wire   [17:0] indvar_next1_1_fu_2019_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [3:0] k_1_1_fu_2036_p2;
reg   [3:0] k_1_1_reg_2527;
wire   [0:0] ap_CS_fsm_state128;
wire   [0:0] ap_CS_fsm_state9;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] ap_CS_fsm_state13;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter11;
wire   [0:0] ap_CS_fsm_state72;
reg    ap_enable_reg_pp3_iter2;
wire   [0:0] ap_CS_fsm_state76;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter7;
reg    ap_enable_reg_pp4_iter8;
reg    ap_enable_reg_pp4_iter9;
reg    ap_enable_reg_pp4_iter11;
reg   [17:0] image_in_address0;
reg    image_in_ce0;
reg    image_in_we0;
reg   [17:0] image_in_address1;
reg    image_in_ce1;
reg    image_in_we1;
reg   [17:0] image_out_address0;
reg    image_out_ce0;
reg    image_out_we0;
reg   [7:0] image_out_d0;
reg   [3:0] k_reg_442;
reg   [17:0] indvar_phi_fu_458_p4;
reg   [16:0] indvar_flatten_phi_fu_470_p4;
reg   [7:0] i_phi_fu_481_p4;
reg   [9:0] j_phi_fu_492_p4;
reg   [17:0] indvar_1_phi_fu_514_p4;
reg   [16:0] indvar_flatten7_phi_fu_526_p4;
reg   [7:0] i_s_phi_fu_537_p4;
reg   [9:0] j_s_phi_fu_548_p4;
wire   [63:0] tmp_4_fu_672_p1;
wire   [63:0] tmp_13_fu_753_p1;
wire   [63:0] tmp_15_fu_764_p1;
wire   [63:0] tmp_17_fu_797_p1;
wire   [63:0] tmp_22_fu_824_p1;
wire   [63:0] tmp_9_fu_847_p1;
wire   [63:0] tmp_24_fu_860_p1;
wire   [63:0] tmp_11_fu_883_p1;
wire   [63:0] tmp_20_fu_897_p1;
wire   [63:0] tmp_41_fu_1197_p1;
wire   [0:0] icmp_fu_1180_p2;
wire   [63:0] tmp_38_fu_1208_p1;
wire   [63:0] tmp_35_fu_1335_p1;
wire   [63:0] tmp_4_1_fu_1384_p1;
wire   [63:0] tmp_20_1_fu_1465_p1;
wire   [63:0] tmp_23_1_fu_1476_p1;
wire   [63:0] tmp_26_1_fu_1509_p1;
wire   [63:0] tmp_34_1_fu_1536_p1;
wire   [63:0] tmp_13_1_fu_1559_p1;
wire   [63:0] tmp_38_1_fu_1572_p1;
wire   [63:0] tmp_16_1_fu_1595_p1;
wire   [63:0] tmp_30_1_fu_1609_p1;
wire   [63:0] tmp_50_1_fu_1909_p1;
wire   [0:0] icmp1_fu_1892_p2;
wire   [63:0] tmp_47_1_fu_1920_p1;
wire   [63:0] tmp_52_1_fu_2031_p1;
wire  signed [63:0] in_pointer2_sum_cast_fu_650_p1;
wire  signed [63:0] out_pointer4_sum_cas_fu_1287_p1;
wire  signed [63:0] in_pointer2_sum7_cas_fu_1362_p1;
wire  signed [63:0] out_pointer4_sum9_ca_fu_1976_p1;
reg    ap_reg_ioackin_INPUT_r_ARREADY;
reg    ap_sig_ioackin_INPUT_r_ARREADY;
reg    ap_reg_ioackin_OUTPUT_r_AWREADY;
reg    ap_reg_ioackin_OUTPUT_r_WREADY;
reg   [17:0] offset_fu_212;
wire   [17:0] p_offset_1_fu_1991_p3;
reg   [31:0] target_off_fu_216;
wire   [31:0] target_off_3_1_fu_1951_p3;
wire   [7:0] tmp_39_fu_1186_p1;
wire   [7:0] tmp_51_fu_1898_p1;
reg  signed [31:0] grp_fu_566_p0;
wire   [32:0] tmp_2_cast_fu_641_p1;
wire   [32:0] in_pointer2_sum_fu_645_p2;
wire   [0:0] exitcond_fu_689_p2;
wire   [7:0] i_1_dup_fu_703_p2;
wire   [17:0] tmp_8_cast_mid2_v_fu_725_p2;
wire   [9:0] tmp7_fu_739_p2;
wire   [17:0] tmp_12_fu_745_p3;
wire   [18:0] tmp_8_cast_mid2_fu_731_p1;
wire   [18:0] tmp_14_fu_758_p2;
wire   [17:0] tmp_9_cast_mid2_v_fu_775_p2;
wire   [18:0] tmp_9_cast_mid2_fu_780_p1;
wire   [18:0] tmp_16_fu_792_p2;
wire   [8:0] tmp_24_cast_fu_788_p1;
wire   [8:0] tmp_21_cast_fu_784_p1;
wire  signed [17:0] tmp11_cast_fu_815_p1;
wire   [17:0] tmp_21_fu_819_p2;
wire   [11:0] j_cast2_fu_829_p1;
wire   [11:0] tmp3_fu_832_p2;
wire  signed [17:0] tmp3_cast_fu_838_p1;
wire   [17:0] tmp_8_fu_842_p2;
wire   [17:0] tmp12_cast_fu_852_p1;
wire   [17:0] tmp_23_fu_855_p2;
wire   [10:0] j_cast_fu_865_p1;
wire   [10:0] tmp6_fu_868_p2;
wire  signed [17:0] tmp6_cast_fu_874_p1;
wire   [17:0] tmp_10_fu_878_p2;
wire   [17:0] tmp10_cast_fu_888_p1;
wire   [17:0] tmp_19_fu_892_p2;
wire   [8:0] tmp_35_cast_fu_902_p1;
wire   [8:0] tmp_39_cast_fu_906_p1;
wire   [9:0] tmp_18_fu_928_p3;
wire   [8:0] tmp_17_cast_fu_920_p1;
wire   [8:0] conv2_cast_fu_916_p1;
wire   [8:0] conv1_fu_943_p2;
wire  signed [10:0] conv1_cast_cast_fu_949_p1;
wire  signed [10:0] tmp4_cast_fu_935_p1;
wire   [8:0] conv2_1_fu_959_p2;
wire   [9:0] conv2_1_cast_fu_965_p1;
wire   [9:0] tmp_27_cast_fu_924_p1;
wire   [9:0] conv2_2_fu_969_p2;
wire   [9:0] tmp_31_cast_fu_939_p1;
wire   [10:0] tmp_25_cast_fu_981_p1;
wire   [10:0] tmp_30_cast_fu_985_p1;
wire   [10:0] conv1_2_fu_989_p2;
wire   [9:0] tmp_25_fu_1000_p3;
wire  signed [10:0] conv2_3_cast_cast_fu_1011_p1;
wire  signed [10:0] tmp9_cast_fu_1007_p1;
wire   [10:0] conv2_4_fu_1014_p2;
wire   [63:0] p_Val2_s_fu_1031_p1;
wire   [51:0] loc_V_1_fu_1053_p1;
wire   [52:0] p_Result_1_fu_1057_p3;
wire   [10:0] loc_V_fu_1043_p4;
wire   [11:0] tmp_i_i_i_cast_fu_1069_p1;
wire   [11:0] sh_assign_fu_1073_p2;
wire   [10:0] tmp_i_i_11_fu_1087_p2;
wire   [0:0] isNeg_fu_1079_p3;
wire  signed [11:0] tmp_i_i_cast_fu_1093_p1;
wire   [11:0] sh_assign_1_fu_1097_p3;
wire  signed [31:0] sh_assign_1_cast_fu_1105_p1;
wire   [52:0] tmp_54_i_i_cast_fu_1113_p1;
wire   [135:0] tmp_i_i_fu_1065_p1;
wire   [135:0] tmp_54_i_i_fu_1109_p1;
wire   [52:0] tmp_55_i_i_fu_1117_p2;
wire   [0:0] tmp_36_fu_1129_p3;
wire   [135:0] tmp_57_i_i_fu_1123_p2;
wire   [31:0] tmp_31_fu_1137_p1;
wire   [31:0] tmp_33_fu_1141_p4;
wire   [31:0] p_Val2_7_i_i_fu_1159_p2;
wire   [31:0] p_Val2_5_fu_1164_p3;
wire   [23:0] tmp_37_fu_1170_p4;
wire   [17:0] tmp_40_fu_1191_p3;
wire   [17:0] tmp_34_fu_1202_p3;
wire   [0:0] tmp_5_fu_1216_p2;
wire   [0:0] tmp_6_fu_1222_p2;
wire   [19:0] target_off_1_fu_1234_p2;
wire   [0:0] tmp_s_fu_1243_p2;
wire   [31:0] target_off_1_cast_fu_1239_p1;
wire   [31:0] p_target_off_fu_1249_p3;
wire  signed [32:0] tmp_18_cast_fu_1278_p1;
wire   [32:0] out_pointer4_sum_fu_1282_p2;
wire   [10:0] p_source_off_fu_1297_p3;
wire   [10:0] source_off_3_fu_1304_p3;
wire   [31:0] tmp_32_fu_1330_p2;
wire   [32:0] tmp_2_1_cast_fu_1353_p1;
wire   [32:0] in_pointer2_sum7_fu_1357_p2;
wire   [0:0] exitcond_s_fu_1401_p2;
wire   [7:0] i_1_1_dup_fu_1415_p2;
wire   [17:0] tmp_8_1_cast_mid2_v_fu_1437_p2;
wire   [9:0] tmp15_fu_1451_p2;
wire   [17:0] tmp_19_1_fu_1457_p3;
wire   [18:0] tmp_8_1_cast_mid2_fu_1443_p1;
wire   [18:0] tmp_22_1_fu_1470_p2;
wire   [17:0] tmp_9_1_cast_mid2_v_fu_1487_p2;
wire   [18:0] tmp_9_1_cast_mid2_fu_1492_p1;
wire   [18:0] tmp_25_1_fu_1504_p2;
wire   [8:0] tmp_24_1_cast_fu_1500_p1;
wire   [8:0] tmp_21_1_cast_fu_1496_p1;
wire  signed [17:0] tmp17_cast_fu_1527_p1;
wire   [17:0] tmp_33_1_fu_1531_p2;
wire   [11:0] j_cast2_19_fu_1541_p1;
wire   [11:0] tmp13_fu_1544_p2;
wire  signed [17:0] tmp13_cast_fu_1550_p1;
wire   [17:0] tmp_12_1_fu_1554_p2;
wire   [17:0] tmp18_cast_fu_1564_p1;
wire   [17:0] tmp_37_1_fu_1567_p2;
wire   [10:0] j_cast_20_fu_1577_p1;
wire   [10:0] tmp14_fu_1580_p2;
wire  signed [17:0] tmp14_cast_fu_1586_p1;
wire   [17:0] tmp_15_1_fu_1590_p2;
wire   [17:0] tmp16_cast_fu_1600_p1;
wire   [17:0] tmp_29_1_fu_1604_p2;
wire   [8:0] tmp_35_1_cast_fu_1614_p1;
wire   [8:0] tmp_39_1_cast_fu_1618_p1;
wire   [9:0] tmp_44_fu_1640_p3;
wire   [8:0] tmp_17_1_cast_fu_1632_p1;
wire   [8:0] conv2_cast_21_fu_1628_p1;
wire   [8:0] conv1_s_fu_1655_p2;
wire  signed [10:0] conv1_cast_cast_22_fu_1661_p1;
wire  signed [10:0] tmp4_1_cast_fu_1647_p1;
wire   [8:0] conv2_1_1_fu_1671_p2;
wire   [9:0] conv2_1_1_cast_fu_1677_p1;
wire   [9:0] tmp_27_1_cast_fu_1636_p1;
wire   [9:0] conv2_2_1_fu_1681_p2;
wire   [9:0] tmp_31_1_cast_fu_1651_p1;
wire   [10:0] tmp_27_1_cast1_fu_1693_p1;
wire   [10:0] tmp_31_1_cast1_fu_1697_p1;
wire   [10:0] conv1_2_1_fu_1701_p2;
wire   [9:0] tmp_45_fu_1712_p3;
wire  signed [10:0] conv2_3_1_cast_cast_fu_1723_p1;
wire  signed [10:0] tmp9_1_cast_fu_1719_p1;
wire   [10:0] conv2_4_1_fu_1726_p2;
wire   [63:0] p_Val2_6_fu_1743_p1;
wire   [51:0] loc_V_3_fu_1765_p1;
wire   [52:0] p_Result_3_fu_1769_p3;
wire   [10:0] loc_V_2_fu_1755_p4;
wire   [11:0] tmp_i_i_i1_cast_fu_1781_p1;
wire   [11:0] sh_assign_2_fu_1785_p2;
wire   [10:0] tmp_i_i1_23_fu_1799_p2;
wire   [0:0] isNeg_1_fu_1791_p3;
wire  signed [11:0] tmp_i_i1_cast_fu_1805_p1;
wire   [11:0] sh_assign_3_fu_1809_p3;
wire  signed [31:0] sh_assign_3_cast_fu_1817_p1;
wire   [52:0] tmp_54_i_i1_cast_fu_1825_p1;
wire   [135:0] tmp_i_i1_fu_1777_p1;
wire   [135:0] tmp_54_i_i1_fu_1821_p1;
wire   [52:0] tmp_55_i_i1_fu_1829_p2;
wire   [0:0] tmp_49_fu_1841_p3;
wire   [135:0] tmp_57_i_i1_fu_1835_p2;
wire   [31:0] tmp_46_fu_1849_p1;
wire   [31:0] tmp_47_fu_1853_p4;
wire   [31:0] p_Val2_7_i_i1_fu_1871_p2;
wire   [31:0] p_Val2_11_fu_1876_p3;
wire   [23:0] tmp_50_fu_1882_p4;
wire   [17:0] tmp_49_1_fu_1903_p3;
wire   [17:0] tmp_46_1_fu_1914_p3;
wire   [19:0] target_off_1_1_fu_1930_p2;
wire   [0:0] tmp_10_1_fu_1939_p2;
wire   [31:0] target_off_1_1_cast_fu_1935_p1;
wire   [31:0] p_target_off_1_fu_1944_p3;
wire   [33:0] tmp_45_1_cast_fu_1967_p1;
wire   [33:0] out_pointer4_sum9_fu_1971_p2;
wire   [18:0] indvar1_1_cast_fu_2010_p1;
wire   [17:0] tmp_51_1_fu_2025_p2;
wire  signed [10:0] tmp_27_fu_2042_p0;
wire  signed [21:0] conv2_4_cast_fu_1020_p1;
wire  signed [10:0] tmp_27_fu_2042_p1;
wire  signed [10:0] grp_fu_2048_p0;
wire  signed [21:0] conv1_3_cast_cast_fu_1024_p1;
wire  signed [10:0] grp_fu_2048_p1;
wire  signed [10:0] tmp_41_1_fu_2055_p0;
wire  signed [21:0] conv2_4_1_cast_fu_1732_p1;
wire  signed [10:0] tmp_41_1_fu_2055_p1;
wire  signed [10:0] grp_fu_2061_p0;
wire  signed [21:0] conv1_3_1_cast_cast_fu_1736_p1;
wire  signed [10:0] grp_fu_2061_p1;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'b1;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp4_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp4_iter9 = 1'b0;
#0 ap_enable_reg_pp4_iter11 = 1'b0;
#0 ap_reg_ioackin_INPUT_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_r_WREADY = 1'b0;
end

sobel_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
sobel_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_pointer(in_pointer),
    .out_pointer(out_pointer)
);

sobel_INPUT_r_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ))
sobel_INPUT_r_m_axi_U(
    .AWVALID(m_axi_INPUT_r_AWVALID),
    .AWREADY(m_axi_INPUT_r_AWREADY),
    .AWADDR(m_axi_INPUT_r_AWADDR),
    .AWID(m_axi_INPUT_r_AWID),
    .AWLEN(m_axi_INPUT_r_AWLEN),
    .AWSIZE(m_axi_INPUT_r_AWSIZE),
    .AWBURST(m_axi_INPUT_r_AWBURST),
    .AWLOCK(m_axi_INPUT_r_AWLOCK),
    .AWCACHE(m_axi_INPUT_r_AWCACHE),
    .AWPROT(m_axi_INPUT_r_AWPROT),
    .AWQOS(m_axi_INPUT_r_AWQOS),
    .AWREGION(m_axi_INPUT_r_AWREGION),
    .AWUSER(m_axi_INPUT_r_AWUSER),
    .WVALID(m_axi_INPUT_r_WVALID),
    .WREADY(m_axi_INPUT_r_WREADY),
    .WDATA(m_axi_INPUT_r_WDATA),
    .WSTRB(m_axi_INPUT_r_WSTRB),
    .WLAST(m_axi_INPUT_r_WLAST),
    .WID(m_axi_INPUT_r_WID),
    .WUSER(m_axi_INPUT_r_WUSER),
    .ARVALID(m_axi_INPUT_r_ARVALID),
    .ARREADY(m_axi_INPUT_r_ARREADY),
    .ARADDR(m_axi_INPUT_r_ARADDR),
    .ARID(m_axi_INPUT_r_ARID),
    .ARLEN(m_axi_INPUT_r_ARLEN),
    .ARSIZE(m_axi_INPUT_r_ARSIZE),
    .ARBURST(m_axi_INPUT_r_ARBURST),
    .ARLOCK(m_axi_INPUT_r_ARLOCK),
    .ARCACHE(m_axi_INPUT_r_ARCACHE),
    .ARPROT(m_axi_INPUT_r_ARPROT),
    .ARQOS(m_axi_INPUT_r_ARQOS),
    .ARREGION(m_axi_INPUT_r_ARREGION),
    .ARUSER(m_axi_INPUT_r_ARUSER),
    .RVALID(m_axi_INPUT_r_RVALID),
    .RREADY(m_axi_INPUT_r_RREADY),
    .RDATA(m_axi_INPUT_r_RDATA),
    .RLAST(m_axi_INPUT_r_RLAST),
    .RID(m_axi_INPUT_r_RID),
    .RUSER(m_axi_INPUT_r_RUSER),
    .RRESP(m_axi_INPUT_r_RRESP),
    .BVALID(m_axi_INPUT_r_BVALID),
    .BREADY(m_axi_INPUT_r_BREADY),
    .BRESP(m_axi_INPUT_r_BRESP),
    .BID(m_axi_INPUT_r_BID),
    .BUSER(m_axi_INPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_r_ARVALID),
    .I_ARREADY(INPUT_r_ARREADY),
    .I_ARADDR(INPUT_r_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_20800),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(INPUT_r_RVALID),
    .I_RREADY(INPUT_r_RREADY),
    .I_RDATA(INPUT_r_RDATA),
    .I_RID(INPUT_r_RID),
    .I_RUSER(INPUT_r_RUSER),
    .I_RRESP(INPUT_r_RRESP),
    .I_RLAST(INPUT_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_r_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_r_WREADY),
    .I_WDATA(ap_const_lv8_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'b0),
    .I_BVALID(INPUT_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_r_BRESP),
    .I_BID(INPUT_r_BID),
    .I_BUSER(INPUT_r_BUSER)
);

sobel_OUTPUT_r_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
sobel_OUTPUT_r_m_axi_U(
    .AWVALID(m_axi_OUTPUT_r_AWVALID),
    .AWREADY(m_axi_OUTPUT_r_AWREADY),
    .AWADDR(m_axi_OUTPUT_r_AWADDR),
    .AWID(m_axi_OUTPUT_r_AWID),
    .AWLEN(m_axi_OUTPUT_r_AWLEN),
    .AWSIZE(m_axi_OUTPUT_r_AWSIZE),
    .AWBURST(m_axi_OUTPUT_r_AWBURST),
    .AWLOCK(m_axi_OUTPUT_r_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_r_AWCACHE),
    .AWPROT(m_axi_OUTPUT_r_AWPROT),
    .AWQOS(m_axi_OUTPUT_r_AWQOS),
    .AWREGION(m_axi_OUTPUT_r_AWREGION),
    .AWUSER(m_axi_OUTPUT_r_AWUSER),
    .WVALID(m_axi_OUTPUT_r_WVALID),
    .WREADY(m_axi_OUTPUT_r_WREADY),
    .WDATA(m_axi_OUTPUT_r_WDATA),
    .WSTRB(m_axi_OUTPUT_r_WSTRB),
    .WLAST(m_axi_OUTPUT_r_WLAST),
    .WID(m_axi_OUTPUT_r_WID),
    .WUSER(m_axi_OUTPUT_r_WUSER),
    .ARVALID(m_axi_OUTPUT_r_ARVALID),
    .ARREADY(m_axi_OUTPUT_r_ARREADY),
    .ARADDR(m_axi_OUTPUT_r_ARADDR),
    .ARID(m_axi_OUTPUT_r_ARID),
    .ARLEN(m_axi_OUTPUT_r_ARLEN),
    .ARSIZE(m_axi_OUTPUT_r_ARSIZE),
    .ARBURST(m_axi_OUTPUT_r_ARBURST),
    .ARLOCK(m_axi_OUTPUT_r_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_r_ARCACHE),
    .ARPROT(m_axi_OUTPUT_r_ARPROT),
    .ARQOS(m_axi_OUTPUT_r_ARQOS),
    .ARREGION(m_axi_OUTPUT_r_ARREGION),
    .ARUSER(m_axi_OUTPUT_r_ARUSER),
    .RVALID(m_axi_OUTPUT_r_RVALID),
    .RREADY(m_axi_OUTPUT_r_RREADY),
    .RDATA(m_axi_OUTPUT_r_RDATA),
    .RLAST(m_axi_OUTPUT_r_RLAST),
    .RID(m_axi_OUTPUT_r_RID),
    .RUSER(m_axi_OUTPUT_r_RUSER),
    .RRESP(m_axi_OUTPUT_r_RRESP),
    .BVALID(m_axi_OUTPUT_r_BVALID),
    .BREADY(m_axi_OUTPUT_r_BREADY),
    .BRESP(m_axi_OUTPUT_r_BRESP),
    .BID(m_axi_OUTPUT_r_BID),
    .BUSER(m_axi_OUTPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_r_ARREADY),
    .I_ARADDR(ap_const_lv32_0),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_0),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(OUTPUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_r_RDATA),
    .I_RID(OUTPUT_r_RID),
    .I_RUSER(OUTPUT_r_RUSER),
    .I_RRESP(OUTPUT_r_RRESP),
    .I_RLAST(OUTPUT_r_RLAST),
    .I_AWVALID(OUTPUT_r_AWVALID),
    .I_AWREADY(OUTPUT_r_AWREADY),
    .I_AWADDR(OUTPUT_r_AWADDR),
    .I_AWID(1'b0),
    .I_AWLEN(OUTPUT_r_AWLEN),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(OUTPUT_r_WVALID),
    .I_WREADY(OUTPUT_r_WREADY),
    .I_WDATA(reg_599),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'b1),
    .I_BVALID(OUTPUT_r_BVALID),
    .I_BREADY(OUTPUT_r_BREADY),
    .I_BRESP(OUTPUT_r_BRESP),
    .I_BID(OUTPUT_r_BID),
    .I_BUSER(OUTPUT_r_BUSER)
);

sobel_image_in #(
    .DataWidth( 8 ),
    .AddressRange( 133120 ),
    .AddressWidth( 18 ))
image_in_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_in_address0),
    .ce0(image_in_ce0),
    .we0(image_in_we0),
    .d0(reg_574),
    .q0(image_in_q0),
    .address1(image_in_address1),
    .ce1(image_in_ce1),
    .we1(image_in_we1),
    .d1(reg_574),
    .q1(image_in_q1)
);

sobel_image_out #(
    .DataWidth( 8 ),
    .AddressRange( 132096 ),
    .AddressWidth( 18 ))
image_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_out_address0),
    .ce0(image_out_ce0),
    .we0(image_out_we0),
    .d0(image_out_d0),
    .q0(image_out_q0)
);

sobel_sitodp_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_sitodp_32s_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_566_p0),
    .ce(1'b1),
    .dout(grp_fu_566_p1)
);

sobel_dsqrt_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_dsqrt_64ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_const_lv64_0),
    .din1(reg_590),
    .ce(1'b1),
    .dout(grp_fu_569_p2)
);

sobel_mul_mul_11sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
sobel_mul_mul_11sdEe_U3(
    .din0(tmp_27_fu_2042_p0),
    .din1(tmp_27_fu_2042_p1),
    .dout(tmp_27_fu_2042_p2)
);

sobel_mac_muladd_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
sobel_mac_muladd_eOg_U4(
    .din0(grp_fu_2048_p0),
    .din1(grp_fu_2048_p1),
    .din2(tmp_27_reg_2244),
    .dout(grp_fu_2048_p3)
);

sobel_mul_mul_11sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
sobel_mul_mul_11sdEe_U5(
    .din0(tmp_41_1_fu_2055_p0),
    .din1(tmp_41_1_fu_2055_p1),
    .dout(tmp_41_1_fu_2055_p2)
);

sobel_mac_muladd_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
sobel_mac_muladd_eOg_U6(
    .din0(grp_fu_2061_p0),
    .din1(grp_fu_2061_p1),
    .din2(tmp_41_1_reg_2463),
    .dout(grp_fu_2061_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & ~(1'b0 == exitcond3_fu_660_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b0 == exitcond3_fu_660_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & ~(1'b0 == exitcond3_fu_660_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~(1'b0 == exitcond_flatten_fu_677_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_pp1_stage3) & ~(1'b0 == exitcond_flatten_reg_2129)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b0 == exitcond4_fu_1319_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b0 == exitcond4_fu_1319_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b0 == exitcond4_fu_1319_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & ~(1'b0 == exitcond3_1_fu_1372_p2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b0 == exitcond3_1_fu_1372_p2))) begin
            ap_enable_reg_pp3_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state72) | ((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & ~(1'b0 == exitcond3_1_fu_1372_p2)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & ~(1'b0 == exitcond_flatten9_fu_1389_p2))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
            ap_enable_reg_pp4_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state76) | ((1'b1 == ap_CS_fsm_pp4_stage3) & ~(1'b0 == exitcond_flatten9_reg_2348)))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter10 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter11 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp4_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter9 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp4_stage3)) begin
            ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b0 == exitcond4_1_fu_2014_p2))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state124) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b0 == exitcond4_1_fu_2014_p2))) begin
            ap_enable_reg_pp5_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state124) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b0 == exitcond4_1_fu_2014_p2)))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY))) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((1'b1 == ap_CS_fsm_state124) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUT_r_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == ap_sig_ioackin_INPUT_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & ~(1'b0 == ap_sig_ioackin_INPUT_r_ARREADY)))) begin
            ap_reg_ioackin_INPUT_r_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == INPUT_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & (1'b1 == INPUT_r_ARREADY)))) begin
            ap_reg_ioackin_INPUT_r_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state124) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)))) begin
            ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state61) & (1'b1 == OUTPUT_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state124) & (1'b1 == OUTPUT_r_AWREADY)))) begin
            ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY))) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY))))) begin
            ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b1 == OUTPUT_r_WREADY)) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b1 == OUTPUT_r_WREADY)))) begin
            ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_477 <= ap_const_lv8_1;
    end else if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        i_reg_477 <= tmp_24_mid2_v_v_reg_2147;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        i_s_reg_533 <= ap_const_lv8_1;
    end else if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        i_s_reg_533 <= tmp_7_1_mid2_v_v_reg_2366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0) & (1'b0 == exitcond4_1_fu_2014_p2))) begin
        indvar1_1_reg_555 <= indvar_next1_1_fu_2019_p2;
    end else if (((1'b1 == ap_CS_fsm_state124) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
        indvar1_1_reg_555 <= ap_const_lv18_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_fu_1319_p2))) begin
        indvar1_reg_499 <= indvar_next1_fu_1324_p2;
    end else if (((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
        indvar1_reg_499 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)))) begin
        indvar_1_reg_510 <= indvar_next_1_reg_2343;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        indvar_1_reg_510 <= ap_const_lv18_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        indvar_flatten7_reg_522 <= ap_const_lv17_0;
    end else if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        indvar_flatten7_reg_522 <= indvar_flatten_next8_reg_2352;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten_reg_466 <= ap_const_lv17_0;
    end else if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        indvar_flatten_reg_466 <= indvar_flatten_next_reg_2133;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)))) begin
        indvar_reg_454 <= indvar_next_reg_2124;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_reg_454 <= ap_const_lv18_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_488 <= ap_const_lv10_1;
    end else if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_reg_488 <= j_1_reg_2179;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        j_s_reg_544 <= ap_const_lv10_1;
    end else if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        j_s_reg_544 <= j_1_1_reg_2398;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state132) & ~(OUTPUT_r_BVALID == 1'b0))) begin
        k_reg_442 <= k_1_1_reg_2527;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        k_reg_442 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter0) & (1'b0 == exitcond_flatten9_reg_2348))) begin
        reg_580 <= image_in_q0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_flatten_reg_2129))) begin
        reg_580 <= image_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter0) & (1'b0 == exitcond_flatten9_reg_2348)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1)))) begin
        reg_585 <= image_in_q1;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_flatten_reg_2129)) | ((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        reg_585 <= image_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        INPUT_addr_1_reg_2333 <= in_pointer2_sum7_cas_fu_1362_p1;
        k_1_s_reg_2322[2 : 1] <= k_1_s_fu_1340_p2[2 : 1];
        tmp_1_1_reg_2328[19 : 18] <= tmp_1_1_fu_1345_p3[19 : 18];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond2_fu_623_p2))) begin
        INPUT_addr_reg_2114 <= in_pointer2_sum_cast_fu_650_p1;
        tmp_1_reg_2109[19 : 17] <= tmp_1_fu_633_p3[19 : 17];
        tmp_2_reg_2104 <= tmp_2_fu_629_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        OUTPUT_addr_1_reg_2503 <= out_pointer4_sum9_ca_fu_1976_p1;
        p_offset_1_cast1_reg_2498[17 : 10] <= p_offset_1_cast1_fu_1959_p3[17 : 10];
        target_off_fu_216 <= target_off_3_1_fu_1951_p3;
        tmp_6_1_reg_2492 <= tmp_6_1_fu_1925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        OUTPUT_addr_reg_2293 <= out_pointer4_sum_cas_fu_1287_p1;
        offset_3_reg_2288[17 : 10] <= offset_3_fu_1271_p3[17 : 10];
        or_cond_reg_2273 <= or_cond_fu_1228_p2;
        target_off_3_reg_2278 <= target_off_3_fu_1257_p3;
        tmp_3_reg_2283 <= tmp_3_fu_1265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120 <= exitcond3_reg_2120;
        ap_pipeline_reg_pp0_iter1_indvar_reg_454 <= indvar_reg_454;
        exitcond3_reg_2120 <= exitcond3_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp1_stage0)) begin
        ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter9_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter10_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter9_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter10_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter9_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter11_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter10_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter10_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129 <= exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter1_j_mid2_reg_2138 <= j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter1_tmp_24_mid2_v_v_reg_2147 <= tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter2_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter1_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter2_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter1_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter3_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter3_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter2_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter3_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter2_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter4_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter3_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter4_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter3_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter4_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter3_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter5_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter4_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter5_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter4_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter5_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter4_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter6_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter5_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter6_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter5_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter6_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter5_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter7_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter6_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter7_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter6_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter7_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter6_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter8_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter7_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter8_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter7_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter8_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter7_tmp_24_mid2_v_v_reg_2147;
        ap_pipeline_reg_pp1_iter9_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter8_exitcond_flatten_reg_2129;
        ap_pipeline_reg_pp1_iter9_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter8_j_mid2_reg_2138;
        ap_pipeline_reg_pp1_iter9_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter8_tmp_24_mid2_v_v_reg_2147;
        exitcond_flatten_reg_2129 <= exitcond_flatten_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)))) begin
        ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308 <= exitcond4_reg_2308;
        exitcond4_reg_2308 <= exitcond4_fu_1319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339 <= exitcond3_1_reg_2339;
        ap_pipeline_reg_pp3_iter1_indvar_1_reg_510 <= indvar_1_reg_510;
        exitcond3_1_reg_2339 <= exitcond3_1_fu_1372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp4_stage0)) begin
        ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter9_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter10_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter9_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter10_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter9_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter11_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter10_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter10_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348 <= exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter1_j_mid2_17_reg_2357 <= j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter1_tmp_7_1_mid2_v_v_reg_2366 <= tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter2_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter1_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter2_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter1_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter3_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter3_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter2_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter3_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter2_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter4_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter3_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter4_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter3_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter4_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter3_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter5_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter4_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter5_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter4_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter5_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter4_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter6_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter5_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter6_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter5_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter6_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter5_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter7_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter6_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter7_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter6_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter7_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter6_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter8_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter7_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter8_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter7_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter8_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter7_tmp_7_1_mid2_v_v_reg_2366;
        ap_pipeline_reg_pp4_iter9_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter8_exitcond_flatten9_reg_2348;
        ap_pipeline_reg_pp4_iter9_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter8_j_mid2_17_reg_2357;
        ap_pipeline_reg_pp4_iter9_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter8_tmp_7_1_mid2_v_v_reg_2366;
        exitcond_flatten9_reg_2348 <= exitcond_flatten9_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)))) begin
        ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513 <= exitcond4_1_reg_2513;
        exitcond4_1_reg_2513 <= exitcond4_1_fu_2014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        conv1_1_1_reg_2448 <= conv1_1_1_fu_1665_p2;
        conv2_3_1_reg_2453 <= conv2_3_1_fu_1687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        conv1_1_reg_2229 <= conv1_1_fu_953_p2;
        conv2_3_reg_2234 <= conv2_3_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348))) begin
        conv1_3_1_reg_2458 <= conv1_3_1_fu_1706_p2;
        tmp_41_1_reg_2463 <= tmp_41_1_fu_2055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129))) begin
        conv1_3_reg_2239 <= conv1_3_fu_994_p2;
        tmp_27_reg_2244 <= tmp_27_fu_2042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        indvar_flatten_next8_reg_2352 <= indvar_flatten_next8_fu_1395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_next_reg_2133 <= indvar_flatten_next_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        indvar_next_1_reg_2343 <= indvar_next_1_fu_1378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_next_reg_2124 <= indvar_next_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == exitcond_flatten9_fu_1389_p2))) begin
        j_1_1_reg_2398 <= j_1_1_fu_1481_p2;
        tmp_7_1_mid2_v_v_reg_2366 <= tmp_7_1_mid2_v_v_fu_1421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == exitcond_flatten_fu_677_p2))) begin
        j_1_reg_2179 <= j_1_fu_769_p2;
        tmp_24_mid2_v_v_reg_2147 <= tmp_24_mid2_v_v_fu_709_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == exitcond_flatten9_fu_1389_p2))) begin
        j_cast1_18_reg_2383[9 : 0] <= j_cast1_18_fu_1447_p1[9 : 0];
        j_mid2_17_reg_2357 <= j_mid2_17_fu_1407_p3;
        tmp_7_1_mid2_reg_2373[17 : 10] <= tmp_7_1_mid2_fu_1429_p3[17 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == exitcond_flatten_fu_677_p2))) begin
        j_cast1_reg_2164[9 : 0] <= j_cast1_fu_735_p1[9 : 0];
        j_mid2_reg_2138 <= j_mid2_fu_695_p3;
        tmp_24_mid2_reg_2154[17 : 10] <= tmp_24_mid2_fu_717_p3[17 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        k_1_1_reg_2527 <= k_1_1_fu_2036_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
        offset_3_cast_reg_2303[17 : 10] <= offset_3_cast_fu_1315_p1[17 : 10];
        source_off_3_cast_reg_2298[10] <= source_off_3_cast_fu_1311_p1[10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        offset_cast_reg_2096[17 : 10] <= offset_cast_fu_619_p1[17 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state124) & ~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY))) begin
        offset_fu_212[17 : 10] <= p_offset_1_fu_1991_p3[17 : 10];
        p_offset_1_cast_reg_2508[17 : 10] <= p_offset_1_cast_fu_1998_p3[17 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter1) & (1'b0 == ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348))) begin
        p_1_reg_2468 <= grp_fu_2061_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348))) begin
        p_Result_2_reg_2478 <= p_Val2_6_fu_1743_p1[ap_const_lv32_3F];
        p_Val2_9_reg_2483 <= p_Val2_9_fu_1863_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129))) begin
        p_Result_s_reg_2259 <= p_Val2_s_fu_1031_p1[ap_const_lv32_3F];
        p_Val2_3_reg_2264 <= p_Val2_3_fu_1151_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129))) begin
        p_reg_2249 <= grp_fu_2048_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0))))) begin
        reg_574 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter3) & (1'b0 == ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129)) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter3) & (1'b0 == ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348)))) begin
        reg_590 <= grp_fu_566_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter10) & (1'b0 == ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129)) | ((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b1 == ap_enable_reg_pp4_iter10) & (1'b0 == ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348)))) begin
        reg_595 <= grp_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b0 == exitcond4_reg_2308)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_enable_reg_pp5_iter1) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b0 == exitcond4_1_reg_2513)))) begin
        reg_599 <= image_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp1_reg_2189 <= tmp1_fu_802_p2;
        tmp4_reg_2194[9 : 0] <= tmp4_fu_808_p3[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        tmp21_reg_2413[9 : 0] <= tmp21_fu_1520_p3[9 : 0];
        tmp_43_reg_2408 <= tmp_43_fu_1514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        tmp8_1_reg_2443 <= tmp8_1_fu_1622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        tmp8_reg_2224 <= tmp8_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_7_cast1_reg_2080 <= tmp_7_cast1_fu_604_p1;
        tmp_7_cast_reg_2085 <= tmp_7_cast_fu_608_p1;
        tmp_8_cast_reg_2090 <= tmp_8_cast_fu_612_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state66)) begin
            INPUT_r_ARADDR = INPUT_addr_1_reg_2333;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            INPUT_r_ARADDR = INPUT_addr_reg_2114;
        end else begin
            INPUT_r_ARADDR = 'bx;
        end
    end else begin
        INPUT_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & (1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)))) begin
        INPUT_r_ARVALID = 1'b1;
    end else begin
        INPUT_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & ~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0))))) begin
        INPUT_r_RREADY = 1'b1;
    end else begin
        INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state3))) begin
        INPUT_r_blk_n_AR = m_axi_INPUT_r_ARREADY;
    end else begin
        INPUT_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120)))) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state124)) begin
            OUTPUT_r_AWADDR = OUTPUT_addr_1_reg_2503;
        end else if ((1'b1 == ap_CS_fsm_state61)) begin
            OUTPUT_r_AWADDR = OUTPUT_addr_reg_2293;
        end else begin
            OUTPUT_r_AWADDR = 'bx;
        end
    end else begin
        OUTPUT_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state124)) begin
            OUTPUT_r_AWLEN = p_offset_1_cast1_reg_2498;
        end else if ((1'b1 == ap_CS_fsm_state61)) begin
            OUTPUT_r_AWLEN = offset_3_cast_fu_1315_p1;
        end else begin
            OUTPUT_r_AWLEN = 'bx;
        end
    end else begin
        OUTPUT_r_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state124) & (1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)))) begin
        OUTPUT_r_AWVALID = 1'b1;
    end else begin
        OUTPUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state132) & ~(OUTPUT_r_BVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state70) & ~(OUTPUT_r_BVALID == 1'b0)))) begin
        OUTPUT_r_BREADY = 1'b1;
    end else begin
        OUTPUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY)) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY)))) begin
        OUTPUT_r_WVALID = 1'b1;
    end else begin
        OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state124))) begin
        OUTPUT_r_blk_n_AW = m_axi_OUTPUT_r_AWREADY;
    end else begin
        OUTPUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state132))) begin
        OUTPUT_r_blk_n_B = m_axi_OUTPUT_r_BVALID;
    end else begin
        OUTPUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308)) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513)))) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond2_fu_623_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond2_fu_623_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) begin
        ap_sig_ioackin_INPUT_r_ARREADY = INPUT_r_ARREADY;
    end else begin
        ap_sig_ioackin_INPUT_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)) begin
        ap_sig_ioackin_OUTPUT_r_AWREADY = OUTPUT_r_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY)) begin
        ap_sig_ioackin_OUTPUT_r_WREADY = OUTPUT_r_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        grp_fu_566_p0 = tmp_42_s_fu_1739_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        grp_fu_566_p0 = tmp_29_fu_1027_p1;
    end else begin
        grp_fu_566_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        i_phi_fu_481_p4 = tmp_24_mid2_v_v_reg_2147;
    end else begin
        i_phi_fu_481_p4 = i_reg_477;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        i_s_phi_fu_537_p4 = tmp_7_1_mid2_v_v_reg_2366;
    end else begin
        i_s_phi_fu_537_p4 = i_s_reg_533;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        image_in_address0 = tmp_16_1_fu_1595_p1;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter0))) begin
        image_in_address0 = tmp_13_1_fu_1559_p1;
    end else if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        image_in_address0 = tmp_26_1_fu_1509_p1;
    end else if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        image_in_address0 = tmp_20_1_fu_1465_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        image_in_address0 = tmp_20_fu_897_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        image_in_address0 = tmp_24_fu_860_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        image_in_address0 = tmp_22_fu_824_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        image_in_address0 = tmp_13_fu_753_p1;
    end else if ((1'b1 == ap_enable_reg_pp0_iter2)) begin
        image_in_address0 = tmp_4_fu_672_p1;
    end else begin
        image_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        image_in_address1 = tmp_30_1_fu_1609_p1;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter0))) begin
        image_in_address1 = tmp_38_1_fu_1572_p1;
    end else if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        image_in_address1 = tmp_34_1_fu_1536_p1;
    end else if (((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        image_in_address1 = tmp_23_1_fu_1476_p1;
    end else if ((1'b1 == ap_enable_reg_pp3_iter2)) begin
        image_in_address1 = tmp_4_1_fu_1384_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        image_in_address1 = tmp_11_fu_883_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        image_in_address1 = tmp_9_fu_847_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        image_in_address1 = tmp_17_fu_797_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        image_in_address1 = tmp_15_fu_764_p1;
    end else begin
        image_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0)) | ((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage1)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        image_in_ce0 = 1'b1;
    end else begin
        image_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0)) | ((1'b1 == ap_CS_fsm_pp4_stage2) & (1'b1 == ap_enable_reg_pp4_iter0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp4_iter0) & (1'b1 == ap_CS_fsm_pp4_stage1)) | (~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter2)))) begin
        image_in_ce1 = 1'b1;
    end else begin
        image_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120))) begin
        image_in_we0 = 1'b1;
    end else begin
        image_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339))) begin
        image_in_we1 = 1'b1;
    end else begin
        image_in_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_enable_reg_pp5_iter0))) begin
        image_out_address0 = tmp_52_1_fu_2031_p1;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & ~(1'b0 == icmp1_fu_1892_p2))) begin
        image_out_address0 = tmp_47_1_fu_1920_p1;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & (1'b0 == icmp1_fu_1892_p2))) begin
        image_out_address0 = tmp_50_1_fu_1909_p1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        image_out_address0 = tmp_35_fu_1335_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & ~(1'b0 == icmp_fu_1180_p2))) begin
        image_out_address0 = tmp_38_fu_1208_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & (1'b0 == icmp_fu_1180_p2))) begin
        image_out_address0 = tmp_41_fu_1197_p1;
    end else begin
        image_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & (1'b0 == icmp_fu_1180_p2)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & ~(1'b0 == icmp_fu_1180_p2)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & (1'b0 == icmp1_fu_1892_p2)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & ~(1'b0 == icmp1_fu_1892_p2)))) begin
        image_out_ce0 = 1'b1;
    end else begin
        image_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & (1'b0 == icmp1_fu_1892_p2))) begin
        image_out_d0 = tmp_51_fu_1898_p1;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & ~(1'b0 == icmp_fu_1180_p2)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & ~(1'b0 == icmp1_fu_1892_p2)))) begin
        image_out_d0 = ap_const_lv8_FF;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & (1'b0 == icmp_fu_1180_p2))) begin
        image_out_d0 = tmp_39_fu_1186_p1;
    end else begin
        image_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & (1'b0 == icmp_fu_1180_p2)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & ~(1'b0 == icmp_fu_1180_p2)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & (1'b0 == icmp1_fu_1892_p2)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & ~(1'b0 == icmp1_fu_1892_p2)))) begin
        image_out_we0 = 1'b1;
    end else begin
        image_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0))) begin
        indvar_1_phi_fu_514_p4 = indvar_next_1_reg_2343;
    end else begin
        indvar_1_phi_fu_514_p4 = indvar_1_reg_510;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        indvar_flatten7_phi_fu_526_p4 = indvar_flatten_next8_reg_2352;
    end else begin
        indvar_flatten7_phi_fu_526_p4 = indvar_flatten7_reg_522;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        indvar_flatten_phi_fu_470_p4 = indvar_flatten_next_reg_2133;
    end else begin
        indvar_flatten_phi_fu_470_p4 = indvar_flatten_reg_466;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120))) begin
        indvar_phi_fu_458_p4 = indvar_next_reg_2124;
    end else begin
        indvar_phi_fu_458_p4 = indvar_reg_454;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_flatten_reg_2129) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_phi_fu_492_p4 = j_1_reg_2179;
    end else begin
        j_phi_fu_492_p4 = j_reg_488;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_flatten9_reg_2348) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1))) begin
        j_s_phi_fu_548_p4 = j_1_1_reg_2398;
    end else begin
        j_s_phi_fu_548_p4 = j_s_reg_544;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond2_fu_623_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == ap_sig_ioackin_INPUT_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond3_fu_660_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_2120) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond3_fu_660_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond_flatten_fu_677_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if (~((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter11) & ~(1'b1 == ap_enable_reg_pp1_iter10))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage3;
        end
        ap_ST_fsm_pp1_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter2) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b1 == ap_enable_reg_pp2_iter1)) & ~(~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond4_fu_1319_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp2_iter2) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b1 == ap_enable_reg_pp2_iter1)) | (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond4_fu_1319_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (~(1'b0 == ap_sig_ioackin_INPUT_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (~(OUTPUT_r_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter2) & ~(1'b1 == ap_enable_reg_pp3_iter1)) & ~(~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond3_1_fu_1372_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter2) & ~(1'b1 == ap_enable_reg_pp3_iter1)) | (~((1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_1_reg_2339 == 1'b0) & (INPUT_r_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond3_1_fu_1372_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp4_iter0) & ~(1'b0 == exitcond_flatten9_fu_1389_p2) & ~(1'b1 == ap_enable_reg_pp4_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if (~((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b1 == ap_enable_reg_pp4_iter11) & ~(1'b1 == ap_enable_reg_pp4_iter10))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage3;
        end
        ap_ST_fsm_pp4_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            if (~(1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp5_iter2) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b1 == ap_enable_reg_pp5_iter1)) & ~(~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0) & ~(1'b0 == exitcond4_1_fu_2014_p2) & ~(1'b1 == ap_enable_reg_pp5_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp5_iter2) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & ~(1'b1 == ap_enable_reg_pp5_iter1)) | (~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0) & ~(1'b0 == exitcond4_1_fu_2014_p2) & ~(1'b1 == ap_enable_reg_pp5_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            if (~(OUTPUT_r_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_pp4_stage3 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state123 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state124 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state128 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state132 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state66 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state70 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state72 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state76 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv1_1_1_fu_1665_p2 = ($signed(conv1_cast_cast_22_fu_1661_p1) + $signed(tmp4_1_cast_fu_1647_p1));

assign conv1_1_fu_953_p2 = ($signed(conv1_cast_cast_fu_949_p1) + $signed(tmp4_cast_fu_935_p1));

assign conv1_2_1_fu_1701_p2 = (conv1_1_1_reg_2448 - tmp_27_1_cast1_fu_1693_p1);

assign conv1_2_fu_989_p2 = (conv1_1_reg_2229 - tmp_25_cast_fu_981_p1);

assign conv1_3_1_cast_cast_fu_1736_p1 = $signed(conv1_3_1_reg_2458);

assign conv1_3_1_fu_1706_p2 = (tmp_31_1_cast1_fu_1697_p1 + conv1_2_1_fu_1701_p2);

assign conv1_3_cast_cast_fu_1024_p1 = $signed(conv1_3_reg_2239);

assign conv1_3_fu_994_p2 = (tmp_30_cast_fu_985_p1 + conv1_2_fu_989_p2);

assign conv1_cast_cast_22_fu_1661_p1 = $signed(conv1_s_fu_1655_p2);

assign conv1_cast_cast_fu_949_p1 = $signed(conv1_fu_943_p2);

assign conv1_fu_943_p2 = (tmp_17_cast_fu_920_p1 - conv2_cast_fu_916_p1);

assign conv1_s_fu_1655_p2 = (tmp_17_1_cast_fu_1632_p1 - conv2_cast_21_fu_1628_p1);

assign conv2_1_1_cast_fu_1677_p1 = conv2_1_1_fu_1671_p2;

assign conv2_1_1_fu_1671_p2 = (tmp_17_1_cast_fu_1632_p1 + conv2_cast_21_fu_1628_p1);

assign conv2_1_cast_fu_965_p1 = conv2_1_fu_959_p2;

assign conv2_1_fu_959_p2 = (tmp_17_cast_fu_920_p1 + conv2_cast_fu_916_p1);

assign conv2_2_1_fu_1681_p2 = (conv2_1_1_cast_fu_1677_p1 - tmp_27_1_cast_fu_1636_p1);

assign conv2_2_fu_969_p2 = (conv2_1_cast_fu_965_p1 - tmp_27_cast_fu_924_p1);

assign conv2_3_1_cast_cast_fu_1723_p1 = $signed(conv2_3_1_reg_2453);

assign conv2_3_1_fu_1687_p2 = (conv2_2_1_fu_1681_p2 - tmp_31_1_cast_fu_1651_p1);

assign conv2_3_cast_cast_fu_1011_p1 = $signed(conv2_3_reg_2234);

assign conv2_3_fu_975_p2 = (conv2_2_fu_969_p2 - tmp_31_cast_fu_939_p1);

assign conv2_4_1_cast_fu_1732_p1 = $signed(conv2_4_1_fu_1726_p2);

assign conv2_4_1_fu_1726_p2 = ($signed(conv2_3_1_cast_cast_fu_1723_p1) + $signed(tmp9_1_cast_fu_1719_p1));

assign conv2_4_cast_fu_1020_p1 = $signed(conv2_4_fu_1014_p2);

assign conv2_4_fu_1014_p2 = ($signed(conv2_3_cast_cast_fu_1011_p1) + $signed(tmp9_cast_fu_1007_p1));

assign conv2_cast_21_fu_1628_p1 = reg_585;

assign conv2_cast_fu_916_p1 = reg_585;

assign exitcond2_fu_623_p2 = ((k_reg_442 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond3_1_fu_1372_p2 = ((indvar_1_phi_fu_514_p4 == ap_const_lv18_20800) ? 1'b1 : 1'b0);

assign exitcond3_fu_660_p2 = ((indvar_phi_fu_458_p4 == ap_const_lv18_20800) ? 1'b1 : 1'b0);

assign exitcond4_1_fu_2014_p2 = ((indvar1_1_cast_fu_2010_p1 == p_offset_1_cast_reg_2508) ? 1'b1 : 1'b0);

assign exitcond4_fu_1319_p2 = ((indvar1_reg_499 == offset_3_cast_reg_2303) ? 1'b1 : 1'b0);

assign exitcond_flatten9_fu_1389_p2 = ((indvar_flatten7_phi_fu_526_p4 == ap_const_lv17_1FF00) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_677_p2 = ((indvar_flatten_phi_fu_470_p4 == ap_const_lv17_1FF00) ? 1'b1 : 1'b0);

assign exitcond_fu_689_p2 = ((j_phi_fu_492_p4 == ap_const_lv10_3FF) ? 1'b1 : 1'b0);

assign exitcond_s_fu_1401_p2 = ((j_s_phi_fu_548_p4 == ap_const_lv10_3FF) ? 1'b1 : 1'b0);

assign grp_fu_2048_p0 = conv1_3_cast_cast_fu_1024_p1;

assign grp_fu_2048_p1 = conv1_3_cast_cast_fu_1024_p1;

assign grp_fu_2061_p0 = conv1_3_1_cast_cast_fu_1736_p1;

assign grp_fu_2061_p1 = conv1_3_1_cast_cast_fu_1736_p1;

assign i_1_1_dup_fu_1415_p2 = (ap_const_lv8_1 + i_s_phi_fu_537_p4);

assign i_1_dup_fu_703_p2 = (ap_const_lv8_1 + i_phi_fu_481_p4);

assign icmp1_fu_1892_p2 = (($signed(tmp_50_fu_1882_p4) > $signed(24'b000000000000000000000000)) ? 1'b1 : 1'b0);

assign icmp_fu_1180_p2 = (($signed(tmp_37_fu_1170_p4) > $signed(24'b000000000000000000000000)) ? 1'b1 : 1'b0);

assign in_pointer2_sum7_cas_fu_1362_p1 = $signed(in_pointer2_sum7_fu_1357_p2);

assign in_pointer2_sum7_fu_1357_p2 = ($signed(tmp_2_1_cast_fu_1353_p1) + $signed(tmp_8_cast_reg_2090));

assign in_pointer2_sum_cast_fu_650_p1 = $signed(in_pointer2_sum_fu_645_p2);

assign in_pointer2_sum_fu_645_p2 = ($signed(tmp_8_cast_reg_2090) + $signed(tmp_2_cast_fu_641_p1));

assign indvar1_1_cast_fu_2010_p1 = indvar1_1_reg_555;

assign indvar_flatten_next8_fu_1395_p2 = (indvar_flatten7_phi_fu_526_p4 + ap_const_lv17_1);

assign indvar_flatten_next_fu_683_p2 = (indvar_flatten_phi_fu_470_p4 + ap_const_lv17_1);

assign indvar_next1_1_fu_2019_p2 = (indvar1_1_reg_555 + ap_const_lv18_1);

assign indvar_next1_fu_1324_p2 = (indvar1_reg_499 + ap_const_lv32_1);

assign indvar_next_1_fu_1378_p2 = (indvar_1_phi_fu_514_p4 + ap_const_lv18_1);

assign indvar_next_fu_666_p2 = (indvar_phi_fu_458_p4 + ap_const_lv18_1);

assign isNeg_1_fu_1791_p3 = sh_assign_2_fu_1785_p2[ap_const_lv32_B];

assign isNeg_fu_1079_p3 = sh_assign_fu_1073_p2[ap_const_lv32_B];

assign j_1_1_fu_1481_p2 = (j_mid2_17_fu_1407_p3 + ap_const_lv10_1);

assign j_1_fu_769_p2 = (j_mid2_fu_695_p3 + ap_const_lv10_1);

assign j_cast1_18_fu_1447_p1 = j_mid2_17_fu_1407_p3;

assign j_cast1_fu_735_p1 = j_mid2_fu_695_p3;

assign j_cast2_19_fu_1541_p1 = j_mid2_17_reg_2357;

assign j_cast2_fu_829_p1 = j_mid2_reg_2138;

assign j_cast_20_fu_1577_p1 = j_mid2_17_reg_2357;

assign j_cast_fu_865_p1 = j_mid2_reg_2138;

assign j_mid2_17_fu_1407_p3 = ((exitcond_s_fu_1401_p2[0:0] === 1'b1) ? ap_const_lv10_1 : j_s_phi_fu_548_p4);

assign j_mid2_fu_695_p3 = ((exitcond_fu_689_p2[0:0] === 1'b1) ? ap_const_lv10_1 : j_phi_fu_492_p4);

assign k_1_1_fu_2036_p2 = (k_reg_442 + ap_const_lv4_2);

assign k_1_s_fu_1340_p2 = (tmp_2_reg_2104 | ap_const_lv3_1);

assign loc_V_1_fu_1053_p1 = p_Val2_s_fu_1031_p1[51:0];

assign loc_V_2_fu_1755_p4 = {{p_Val2_6_fu_1743_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign loc_V_3_fu_1765_p1 = p_Val2_6_fu_1743_p1[51:0];

assign loc_V_fu_1043_p4 = {{p_Val2_s_fu_1031_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign offset_3_cast_fu_1315_p1 = offset_3_reg_2288;

assign offset_3_fu_1271_p3 = ((tmp_3_fu_1265_p2[0:0] === 1'b1) ? ap_const_lv19_20400 : offset_cast_reg_2096);

assign offset_cast_fu_619_p1 = offset_fu_212;

assign or_cond_fu_1228_p2 = (tmp_5_fu_1216_p2 & tmp_6_fu_1222_p2);

assign out_pointer4_sum9_ca_fu_1976_p1 = $signed(out_pointer4_sum9_fu_1971_p2);

assign out_pointer4_sum9_fu_1971_p2 = ($signed(tmp_45_1_cast_fu_1967_p1) + $signed(tmp_7_cast1_reg_2080));

assign out_pointer4_sum_cas_fu_1287_p1 = $signed(out_pointer4_sum_fu_1282_p2);

assign out_pointer4_sum_fu_1282_p2 = ($signed(tmp_18_cast_fu_1278_p1) + $signed(tmp_7_cast_reg_2085));

assign p_Result_1_fu_1057_p3 = {{1'b1}, {loc_V_1_fu_1053_p1}};

assign p_Result_3_fu_1769_p3 = {{1'b1}, {loc_V_3_fu_1765_p1}};

assign p_Val2_11_fu_1876_p3 = ((p_Result_2_reg_2478[0:0] === 1'b1) ? p_Val2_7_i_i1_fu_1871_p2 : p_Val2_9_reg_2483);

assign p_Val2_3_fu_1151_p3 = ((isNeg_fu_1079_p3[0:0] === 1'b1) ? tmp_31_fu_1137_p1 : tmp_33_fu_1141_p4);

assign p_Val2_5_fu_1164_p3 = ((p_Result_s_reg_2259[0:0] === 1'b1) ? p_Val2_7_i_i_fu_1159_p2 : p_Val2_3_reg_2264);

assign p_Val2_6_fu_1743_p1 = reg_595;

assign p_Val2_7_i_i1_fu_1871_p2 = (ap_const_lv32_0 - p_Val2_9_reg_2483);

assign p_Val2_7_i_i_fu_1159_p2 = (ap_const_lv32_0 - p_Val2_3_reg_2264);

assign p_Val2_9_fu_1863_p3 = ((isNeg_1_fu_1791_p3[0:0] === 1'b1) ? tmp_46_fu_1849_p1 : tmp_47_fu_1853_p4);

assign p_Val2_s_fu_1031_p1 = reg_595;

assign p_offset_1_cast1_fu_1959_p3 = ((tmp_6_1_fu_1925_p2[0:0] === 1'b1) ? ap_const_lv32_20400 : ap_const_lv32_1F800);

assign p_offset_1_cast_fu_1998_p3 = ((tmp_6_1_reg_2492[0:0] === 1'b1) ? ap_const_lv19_20400 : ap_const_lv19_1F800);

assign p_offset_1_fu_1991_p3 = ((tmp_6_1_reg_2492[0:0] === 1'b1) ? ap_const_lv18_20400 : ap_const_lv18_1F800);

assign p_source_off_fu_1297_p3 = ((or_cond_reg_2273[0:0] === 1'b1) ? ap_const_lv11_400 : ap_const_lv11_0);

assign p_target_off_1_fu_1944_p3 = ((tmp_10_1_fu_1939_p2[0:0] === 1'b1) ? ap_const_lv32_E0400 : target_off_3_reg_2278);

assign p_target_off_fu_1249_p3 = ((tmp_s_fu_1243_p2[0:0] === 1'b1) ? ap_const_lv32_0 : target_off_fu_216);

assign sh_assign_1_cast_fu_1105_p1 = $signed(sh_assign_1_fu_1097_p3);

assign sh_assign_1_fu_1097_p3 = ((isNeg_fu_1079_p3[0:0] === 1'b1) ? tmp_i_i_cast_fu_1093_p1 : sh_assign_fu_1073_p2);

assign sh_assign_2_fu_1785_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i1_cast_fu_1781_p1));

assign sh_assign_3_cast_fu_1817_p1 = $signed(sh_assign_3_fu_1809_p3);

assign sh_assign_3_fu_1809_p3 = ((isNeg_1_fu_1791_p3[0:0] === 1'b1) ? tmp_i_i1_cast_fu_1805_p1 : sh_assign_2_fu_1785_p2);

assign sh_assign_fu_1073_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i_cast_fu_1069_p1));

assign source_off_3_cast_fu_1311_p1 = source_off_3_fu_1304_p3;

assign source_off_3_fu_1304_p3 = ((tmp_3_reg_2283[0:0] === 1'b1) ? p_source_off_fu_1297_p3 : ap_const_lv11_400);

assign target_off_1_1_cast_fu_1935_p1 = target_off_1_1_fu_1930_p2;

assign target_off_1_1_fu_1930_p2 = (tmp_1_1_reg_2328 | ap_const_lv20_400);

assign target_off_1_cast_fu_1239_p1 = target_off_1_fu_1234_p2;

assign target_off_1_fu_1234_p2 = (tmp_1_reg_2109 | ap_const_lv20_400);

assign target_off_3_1_fu_1951_p3 = ((tmp_6_1_fu_1925_p2[0:0] === 1'b1) ? target_off_1_1_cast_fu_1935_p1 : p_target_off_1_fu_1944_p3);

assign target_off_3_fu_1257_p3 = ((or_cond_fu_1228_p2[0:0] === 1'b1) ? target_off_1_cast_fu_1239_p1 : p_target_off_fu_1249_p3);

assign tmp10_cast_fu_888_p1 = tmp6_fu_868_p2;

assign tmp11_cast_fu_815_p1 = $signed(tmp4_fu_808_p3);

assign tmp12_cast_fu_852_p1 = tmp4_reg_2194;

assign tmp13_cast_fu_1550_p1 = $signed(tmp13_fu_1544_p2);

assign tmp13_fu_1544_p2 = ($signed(ap_const_lv12_BFF) + $signed(j_cast2_19_fu_1541_p1));

assign tmp14_cast_fu_1586_p1 = $signed(tmp14_fu_1580_p2);

assign tmp14_fu_1580_p2 = ($signed(ap_const_lv11_401) + $signed(j_cast_20_fu_1577_p1));

assign tmp15_fu_1451_p2 = ($signed(ap_const_lv10_3FF) + $signed(j_mid2_17_fu_1407_p3));

assign tmp16_cast_fu_1600_p1 = tmp14_fu_1580_p2;

assign tmp17_cast_fu_1527_p1 = $signed(tmp21_fu_1520_p3);

assign tmp18_cast_fu_1564_p1 = tmp21_reg_2413;

assign tmp1_fu_802_p2 = (tmp_24_cast_fu_788_p1 - tmp_21_cast_fu_784_p1);

assign tmp21_fu_1520_p3 = {{1'b1}, {j_mid2_17_reg_2357}};

assign tmp3_cast_fu_838_p1 = $signed(tmp3_fu_832_p2);

assign tmp3_fu_832_p2 = ($signed(ap_const_lv12_BFF) + $signed(j_cast2_fu_829_p1));

assign tmp4_1_cast_fu_1647_p1 = $signed(tmp_44_fu_1640_p3);

assign tmp4_cast_fu_935_p1 = $signed(tmp_18_fu_928_p3);

assign tmp4_fu_808_p3 = {{1'b1}, {j_mid2_reg_2138}};

assign tmp6_cast_fu_874_p1 = $signed(tmp6_fu_868_p2);

assign tmp6_fu_868_p2 = ($signed(ap_const_lv11_401) + $signed(j_cast_fu_865_p1));

assign tmp7_fu_739_p2 = ($signed(ap_const_lv10_3FF) + $signed(j_mid2_fu_695_p3));

assign tmp8_1_fu_1622_p2 = (tmp_35_1_cast_fu_1614_p1 - tmp_39_1_cast_fu_1618_p1);

assign tmp8_fu_910_p2 = (tmp_35_cast_fu_902_p1 - tmp_39_cast_fu_906_p1);

assign tmp9_1_cast_fu_1719_p1 = $signed(tmp_45_fu_1712_p3);

assign tmp9_cast_fu_1007_p1 = $signed(tmp_25_fu_1000_p3);

assign tmp_10_1_fu_1939_p2 = ((k_1_s_reg_2322 == ap_const_lv3_7) ? 1'b1 : 1'b0);

assign tmp_10_fu_878_p2 = ($signed(tmp_24_mid2_reg_2154) + $signed(tmp6_cast_fu_874_p1));

assign tmp_11_fu_883_p1 = tmp_10_fu_878_p2;

assign tmp_12_1_fu_1554_p2 = ($signed(tmp_7_1_mid2_reg_2373) + $signed(tmp13_cast_fu_1550_p1));

assign tmp_12_fu_745_p3 = {{tmp_24_mid2_v_v_fu_709_p3}, {tmp7_fu_739_p2}};

assign tmp_13_1_fu_1559_p1 = tmp_12_1_fu_1554_p2;

assign tmp_13_fu_753_p1 = tmp_12_fu_745_p3;

assign tmp_14_fu_758_p2 = (j_cast1_fu_735_p1 + tmp_8_cast_mid2_fu_731_p1);

assign tmp_15_1_fu_1590_p2 = ($signed(tmp_7_1_mid2_reg_2373) + $signed(tmp14_cast_fu_1586_p1));

assign tmp_15_fu_764_p1 = tmp_14_fu_758_p2;

assign tmp_16_1_fu_1595_p1 = tmp_15_1_fu_1590_p2;

assign tmp_16_fu_792_p2 = (j_cast1_reg_2164 + tmp_9_cast_mid2_fu_780_p1);

assign tmp_17_1_cast_fu_1632_p1 = image_in_q0;

assign tmp_17_cast_fu_920_p1 = image_in_q1;

assign tmp_17_fu_797_p1 = tmp_16_fu_792_p2;

assign tmp_18_cast_fu_1278_p1 = $signed(target_off_3_fu_1257_p3);

assign tmp_18_fu_928_p3 = {{tmp1_reg_2189}, {1'b0}};

assign tmp_19_1_fu_1457_p3 = {{tmp_7_1_mid2_v_v_fu_1421_p3}, {tmp15_fu_1451_p2}};

assign tmp_19_fu_892_p2 = (tmp_24_mid2_reg_2154 + tmp10_cast_fu_888_p1);

assign tmp_1_1_fu_1345_p3 = {{k_1_s_fu_1340_p2}, {ap_const_lv17_0}};

assign tmp_1_fu_633_p3 = {{tmp_2_fu_629_p1}, {ap_const_lv17_0}};

assign tmp_20_1_fu_1465_p1 = tmp_19_1_fu_1457_p3;

assign tmp_20_fu_897_p1 = tmp_19_fu_892_p2;

assign tmp_21_1_cast_fu_1496_p1 = image_in_q0;

assign tmp_21_cast_fu_784_p1 = image_in_q0;

assign tmp_21_fu_819_p2 = ($signed(tmp_24_mid2_reg_2154) + $signed(tmp11_cast_fu_815_p1));

assign tmp_22_1_fu_1470_p2 = (j_cast1_18_fu_1447_p1 + tmp_8_1_cast_mid2_fu_1443_p1);

assign tmp_22_fu_824_p1 = tmp_21_fu_819_p2;

assign tmp_23_1_fu_1476_p1 = tmp_22_1_fu_1470_p2;

assign tmp_23_fu_855_p2 = (tmp_24_mid2_reg_2154 + tmp12_cast_fu_852_p1);

assign tmp_24_1_cast_fu_1500_p1 = image_in_q1;

assign tmp_24_cast_fu_788_p1 = image_in_q1;

assign tmp_24_fu_860_p1 = tmp_23_fu_855_p2;

assign tmp_24_mid2_fu_717_p3 = {{tmp_24_mid2_v_v_fu_709_p3}, {ap_const_lv10_0}};

assign tmp_24_mid2_v_v_fu_709_p3 = ((exitcond_fu_689_p2[0:0] === 1'b1) ? i_1_dup_fu_703_p2 : i_phi_fu_481_p4);

assign tmp_25_1_fu_1504_p2 = (j_cast1_18_reg_2383 + tmp_9_1_cast_mid2_fu_1492_p1);

assign tmp_25_cast_fu_981_p1 = reg_580;

assign tmp_25_fu_1000_p3 = {{tmp8_reg_2224}, {1'b0}};

assign tmp_26_1_fu_1509_p1 = tmp_25_1_fu_1504_p2;

assign tmp_27_1_cast1_fu_1693_p1 = reg_580;

assign tmp_27_1_cast_fu_1636_p1 = reg_580;

assign tmp_27_cast_fu_924_p1 = reg_580;

assign tmp_27_fu_2042_p0 = conv2_4_cast_fu_1020_p1;

assign tmp_27_fu_2042_p1 = conv2_4_cast_fu_1020_p1;

assign tmp_29_1_fu_1604_p2 = (tmp_7_1_mid2_reg_2373 + tmp16_cast_fu_1600_p1);

assign tmp_29_fu_1027_p1 = p_reg_2249;

assign tmp_2_1_cast_fu_1353_p1 = tmp_1_1_fu_1345_p3;

assign tmp_2_cast_fu_641_p1 = tmp_1_fu_633_p3;

assign tmp_2_fu_629_p1 = k_reg_442[2:0];

assign tmp_30_1_fu_1609_p1 = tmp_29_1_fu_1604_p2;

assign tmp_30_cast_fu_985_p1 = reg_585;

assign tmp_31_1_cast1_fu_1697_p1 = reg_585;

assign tmp_31_1_cast_fu_1651_p1 = image_in_q1;

assign tmp_31_cast_fu_939_p1 = image_in_q0;

assign tmp_31_fu_1137_p1 = tmp_36_fu_1129_p3;

assign tmp_32_fu_1330_p2 = (source_off_3_cast_reg_2298 + indvar1_reg_499);

assign tmp_33_1_fu_1531_p2 = ($signed(tmp_7_1_mid2_reg_2373) + $signed(tmp17_cast_fu_1527_p1));

assign tmp_33_fu_1141_p4 = {{tmp_57_i_i_fu_1123_p2[ap_const_lv32_53 : ap_const_lv32_34]}};

assign tmp_34_1_fu_1536_p1 = tmp_33_1_fu_1531_p2;

assign tmp_34_fu_1202_p3 = {{ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147}, {ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138}};

assign tmp_35_1_cast_fu_1614_p1 = reg_585;

assign tmp_35_cast_fu_902_p1 = reg_585;

assign tmp_35_fu_1335_p1 = tmp_32_fu_1330_p2;

assign tmp_36_fu_1129_p3 = tmp_55_i_i_fu_1117_p2[ap_const_lv32_34];

assign tmp_37_1_fu_1567_p2 = (tmp_7_1_mid2_reg_2373 + tmp18_cast_fu_1564_p1);

assign tmp_37_fu_1170_p4 = {{p_Val2_5_fu_1164_p3[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_38_1_fu_1572_p1 = tmp_37_1_fu_1567_p2;

assign tmp_38_fu_1208_p1 = tmp_34_fu_1202_p3;

assign tmp_39_1_cast_fu_1618_p1 = image_in_q1;

assign tmp_39_cast_fu_906_p1 = image_in_q0;

assign tmp_39_fu_1186_p1 = p_Val2_5_fu_1164_p3[7:0];

assign tmp_3_fu_1265_p2 = (or_cond_fu_1228_p2 | tmp_s_fu_1243_p2);

assign tmp_40_fu_1191_p3 = {{ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147}, {ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138}};

assign tmp_41_1_fu_2055_p0 = conv2_4_1_cast_fu_1732_p1;

assign tmp_41_1_fu_2055_p1 = conv2_4_1_cast_fu_1732_p1;

assign tmp_41_fu_1197_p1 = tmp_40_fu_1191_p3;

assign tmp_42_s_fu_1739_p1 = p_1_reg_2468;

assign tmp_43_fu_1514_p2 = (tmp_24_1_cast_fu_1500_p1 - tmp_21_1_cast_fu_1496_p1);

assign tmp_44_fu_1640_p3 = {{tmp_43_reg_2408}, {1'b0}};

assign tmp_45_1_cast_fu_1967_p1 = target_off_3_1_fu_1951_p3;

assign tmp_45_fu_1712_p3 = {{tmp8_1_reg_2443}, {1'b0}};

assign tmp_46_1_fu_1914_p3 = {{ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366}, {ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357}};

assign tmp_46_fu_1849_p1 = tmp_49_fu_1841_p3;

assign tmp_47_1_fu_1920_p1 = tmp_46_1_fu_1914_p3;

assign tmp_47_fu_1853_p4 = {{tmp_57_i_i1_fu_1835_p2[ap_const_lv32_53 : ap_const_lv32_34]}};

assign tmp_49_1_fu_1903_p3 = {{ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366}, {ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357}};

assign tmp_49_fu_1841_p3 = tmp_55_i_i1_fu_1829_p2[ap_const_lv32_34];

assign tmp_4_1_fu_1384_p1 = ap_pipeline_reg_pp3_iter1_indvar_1_reg_510;

assign tmp_4_fu_672_p1 = ap_pipeline_reg_pp0_iter1_indvar_reg_454;

assign tmp_50_1_fu_1909_p1 = tmp_49_1_fu_1903_p3;

assign tmp_50_fu_1882_p4 = {{p_Val2_11_fu_1876_p3[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_51_1_fu_2025_p2 = (indvar1_1_reg_555 + ap_const_lv18_400);

assign tmp_51_fu_1898_p1 = p_Val2_11_fu_1876_p3[7:0];

assign tmp_52_1_fu_2031_p1 = tmp_51_1_fu_2025_p2;

assign tmp_54_i_i1_cast_fu_1825_p1 = $unsigned(sh_assign_3_cast_fu_1817_p1);

assign tmp_54_i_i1_fu_1821_p1 = $unsigned(sh_assign_3_cast_fu_1817_p1);

assign tmp_54_i_i_cast_fu_1113_p1 = $unsigned(sh_assign_1_cast_fu_1105_p1);

assign tmp_54_i_i_fu_1109_p1 = $unsigned(sh_assign_1_cast_fu_1105_p1);

assign tmp_55_i_i1_fu_1829_p2 = p_Result_3_fu_1769_p3 >> tmp_54_i_i1_cast_fu_1825_p1;

assign tmp_55_i_i_fu_1117_p2 = p_Result_1_fu_1057_p3 >> tmp_54_i_i_cast_fu_1113_p1;

assign tmp_57_i_i1_fu_1835_p2 = tmp_i_i1_fu_1777_p1 << tmp_54_i_i1_fu_1821_p1;

assign tmp_57_i_i_fu_1123_p2 = tmp_i_i_fu_1065_p1 << tmp_54_i_i_fu_1109_p1;

assign tmp_5_fu_1216_p2 = ((k_reg_442 != ap_const_lv4_0) ? 1'b1 : 1'b0);

assign tmp_6_1_fu_1925_p2 = ((k_1_s_reg_2322 != ap_const_lv3_7) ? 1'b1 : 1'b0);

assign tmp_6_fu_1222_p2 = ((k_reg_442 < ap_const_lv4_7) ? 1'b1 : 1'b0);

assign tmp_7_1_mid2_fu_1429_p3 = {{tmp_7_1_mid2_v_v_fu_1421_p3}, {ap_const_lv10_0}};

assign tmp_7_1_mid2_v_v_fu_1421_p3 = ((exitcond_s_fu_1401_p2[0:0] === 1'b1) ? i_1_1_dup_fu_1415_p2 : i_s_phi_fu_537_p4);

assign tmp_7_cast1_fu_604_p1 = $signed(out_pointer);

assign tmp_7_cast_fu_608_p1 = $signed(out_pointer);

assign tmp_8_1_cast_mid2_fu_1443_p1 = tmp_8_1_cast_mid2_v_fu_1437_p2;

assign tmp_8_1_cast_mid2_v_fu_1437_p2 = (tmp_7_1_mid2_fu_1429_p3 | ap_const_lv18_1);

assign tmp_8_cast_fu_612_p1 = $signed(in_pointer);

assign tmp_8_cast_mid2_fu_731_p1 = tmp_8_cast_mid2_v_fu_725_p2;

assign tmp_8_cast_mid2_v_fu_725_p2 = (tmp_24_mid2_fu_717_p3 | ap_const_lv18_1);

assign tmp_8_fu_842_p2 = ($signed(tmp_24_mid2_reg_2154) + $signed(tmp3_cast_fu_838_p1));

assign tmp_9_1_cast_mid2_fu_1492_p1 = tmp_9_1_cast_mid2_v_fu_1487_p2;

assign tmp_9_1_cast_mid2_v_fu_1487_p2 = (tmp_7_1_mid2_reg_2373 | ap_const_lv18_3FF);

assign tmp_9_cast_mid2_fu_780_p1 = tmp_9_cast_mid2_v_fu_775_p2;

assign tmp_9_cast_mid2_v_fu_775_p2 = (tmp_24_mid2_reg_2154 | ap_const_lv18_3FF);

assign tmp_9_fu_847_p1 = tmp_8_fu_842_p2;

assign tmp_i_i1_23_fu_1799_p2 = (ap_const_lv11_3FF - loc_V_2_fu_1755_p4);

assign tmp_i_i1_cast_fu_1805_p1 = $signed(tmp_i_i1_23_fu_1799_p2);

assign tmp_i_i1_fu_1777_p1 = p_Result_3_fu_1769_p3;

assign tmp_i_i_11_fu_1087_p2 = (ap_const_lv11_3FF - loc_V_fu_1043_p4);

assign tmp_i_i_cast_fu_1093_p1 = $signed(tmp_i_i_11_fu_1087_p2);

assign tmp_i_i_fu_1065_p1 = p_Result_1_fu_1057_p3;

assign tmp_i_i_i1_cast_fu_1781_p1 = loc_V_2_fu_1755_p4;

assign tmp_i_i_i_cast_fu_1069_p1 = loc_V_fu_1043_p4;

assign tmp_s_fu_1243_p2 = ((k_reg_442 == ap_const_lv4_0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    offset_cast_reg_2096[9:0] <= 10'b0000000000;
    offset_cast_reg_2096[18] <= 1'b0;
    tmp_1_reg_2109[16:0] <= 17'b00000000000000000;
    tmp_24_mid2_reg_2154[9:0] <= 10'b0000000000;
    j_cast1_reg_2164[18:10] <= 9'b000000000;
    tmp4_reg_2194[10] <= 1'b1;
    offset_3_reg_2288[9:0] <= 10'b0000000000;
    offset_3_reg_2288[18] <= 1'b0;
    source_off_3_cast_reg_2298[9:0] <= 10'b0000000000;
    source_off_3_cast_reg_2298[31:11] <= 21'b000000000000000000000;
    offset_3_cast_reg_2303[9:0] <= 10'b0000000000;
    offset_3_cast_reg_2303[31:18] <= 14'b00000000000000;
    k_1_s_reg_2322[0] <= 1'b1;
    tmp_1_1_reg_2328[17:0] <= 18'b100000000000000000;
    tmp_7_1_mid2_reg_2373[9:0] <= 10'b0000000000;
    j_cast1_18_reg_2383[18:10] <= 9'b000000000;
    tmp21_reg_2413[10] <= 1'b1;
    p_offset_1_cast1_reg_2498[9:0] <= 10'b0000000000;
    p_offset_1_cast1_reg_2498[31:18] <= 14'b00000000000000;
    p_offset_1_cast_reg_2508[9:0] <= 10'b0000000000;
    p_offset_1_cast_reg_2508[18] <= 1'b0;
    offset_fu_212[9:0] <= 10'b0000000000;
end

endmodule //sobel
