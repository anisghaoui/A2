#ifndef KMEANS_H_INCLUDED
#define KMEANS_H_INCLUDED

#define FileIn "C:\\Users\\DOU_Yuhan\\Desktop\\A2Projet\\Algorithms_ARM\\Algorithms_ARM.sdk\\Kmeans_ND\\src\\Iris_10.txt"
#define FileOut "C:\\Users\\DOU_Yuhan\\Desktop\\A2Projet\\Algorithms_ARM\\Algorithms_ARM.sdk\\Kmeans_ND\\src\\Result_Iris(K3D4N10I20).txt"
//#define FileIn "C:/Users/DOU_Yuhan/Desktop/A2Projet/Algorithms_ARM/Algorithms_ARM.sdk/Kmeans_ND/src/Iris_20.txt"
//#define FileOut "C:/Users/DOU_Yuhan/Desktop/A2Projet/Algorithms_ARM/Algorithms_ARM.sdk/Kmeans_ND/src/Result_Iris(K3D4N20I20).txt"
#define K 3   //nb de clusters
#define D 4  //nb d'attributs
#define N 10 //dataset sizes(chaque data avec D attributs)

#define Iters 5 //nb de iteration

/*
#define IN_ROWS_dada 150
#define IN_COLS_dada 4
#define IN_ROWS_center 3
#define IN_COLS_center 4
#define IN_ROWS_cluster 1
#define IN_COLS_cluster 150

#define OUT_ROWS_dada 150
#define OUT_COLS_dada 4
#define OUT_ROWS_center 3
#define OUT_COLS_center 4
#define OUT_ROWS_cluster 1
#define OUT_COLS_cluster 150
*/

float getDistance(float *avector,float *bvector,int n); //calcul d'Euclidean distance
void cluster(float **data, float **center, int *index);
void getCenter(float **data, float **center, int *index); //calcul des nouveaux centres

#endif // KMEANS_H_INCLUDED
