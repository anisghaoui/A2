-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=260,HLS_SYN_DSP=4,HLS_SYN_FF=4691,HLS_SYN_LUT=7770}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_20800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000100000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv18_20800 : STD_LOGIC_VECTOR (17 downto 0) := "100000100000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv17_1FF00 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_3FF : STD_LOGIC_VECTOR (17 downto 0) := "000000001111111111";
    constant ap_const_lv12_BFF : STD_LOGIC_VECTOR (11 downto 0) := "101111111111";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv20_400 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_const_lv19_20400 : STD_LOGIC_VECTOR (18 downto 0) := "0100000010000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_E0400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011100000010000000000";
    constant ap_const_lv32_20400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000010000000000";
    constant ap_const_lv32_1F800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011111100000000000";
    constant ap_const_lv18_20400 : STD_LOGIC_VECTOR (17 downto 0) := "100000010000000000";
    constant ap_const_lv18_1F800 : STD_LOGIC_VECTOR (17 downto 0) := "011111100000000000";
    constant ap_const_lv19_1F800 : STD_LOGIC_VECTOR (18 downto 0) := "0011111100000000000";
    constant ap_const_lv18_400 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_pointer : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pointer : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal INPUT_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal exitcond3_1_reg_2339 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond3_reg_2120 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal OUTPUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal exitcond4_reg_2308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal exitcond4_1_reg_2513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_r_RLAST : STD_LOGIC;
    signal INPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal INPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_r_RLAST : STD_LOGIC;
    signal OUTPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal OUTPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_454 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_pipeline_reg_pp0_iter1_indvar_reg_454 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvar_flatten_reg_466 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_488 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar1_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_1_reg_510 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_pipeline_reg_pp3_iter1_indvar_1_reg_510 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvar_flatten7_reg_522 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_s_reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_s_reg_544 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar1_1_reg_555 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_574 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_in_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal grp_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter10 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_599 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUTPUT_r_WREADY : STD_LOGIC;
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal tmp_7_cast1_fu_604_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_cast1_reg_2080 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_cast_fu_608_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_cast_reg_2085 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_cast_fu_612_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_cast_reg_2090 : STD_LOGIC_VECTOR (32 downto 0);
    signal offset_cast_fu_619_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal offset_cast_reg_2096 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_629_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_reg_2104 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_633_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_reg_2109 : STD_LOGIC_VECTOR (19 downto 0);
    signal INPUT_addr_reg_2114 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_666_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvar_next_reg_2124 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter3_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter4_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter5_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter6_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter7_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter8_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter9_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter11_exitcond_flatten_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_683_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten_next_reg_2133 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_mid2_fu_695_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter1_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter2_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter3_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter4_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter5_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter6_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter7_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter8_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter9_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter10_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_mid2_v_v_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter1_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter2_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter3_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter4_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter5_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter6_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter7_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter8_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter9_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter10_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_mid2_fu_717_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_mid2_reg_2154 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast1_fu_735_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_cast1_reg_2164 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_1_fu_769_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_2179 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal tmp1_fu_802_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_2189 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_808_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_reg_2194 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp8_fu_910_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_reg_2224 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_1_fu_953_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_1_reg_2229 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_3_fu_975_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_3_reg_2234 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_3_fu_994_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_3_reg_2239 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_2042_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_27_reg_2244 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2048_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_reg_2249 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_29_fu_1027_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_2259 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_1151_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_reg_2264 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2273 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal target_off_3_fu_1257_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal target_off_3_reg_2278 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_2283 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_3_fu_1271_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal offset_3_reg_2288 : STD_LOGIC_VECTOR (18 downto 0);
    signal OUTPUT_addr_reg_2293 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_off_3_cast_fu_1311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_off_3_cast_reg_2298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_OUTPUT_r_AWREADY : STD_LOGIC;
    signal offset_3_cast_fu_1315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_3_cast_reg_2303 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_1324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal k_1_s_fu_1340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_s_reg_2322 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_1_1_fu_1345_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_1_reg_2328 : STD_LOGIC_VECTOR (19 downto 0);
    signal INPUT_addr_1_reg_2333 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_1_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_1_fu_1378_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvar_next_1_reg_2343 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten9_fu_1389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter3_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter4_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter5_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter6_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter7_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter8_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter9_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter11_exitcond_flatten9_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next8_fu_1395_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten_next8_reg_2352 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_mid2_17_fu_1407_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter1_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter2_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter3_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter4_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter5_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter6_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter7_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter8_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter9_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter10_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_1_mid2_v_v_fu_1421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter1_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter2_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter3_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter4_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter5_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter6_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter7_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter8_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter9_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter10_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_mid2_fu_1429_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_1_mid2_reg_2373 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast1_18_fu_1447_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_cast1_18_reg_2383 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_1_1_fu_1481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_1_reg_2398 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal tmp_43_fu_1514_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_reg_2408 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp21_fu_1520_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp21_reg_2413 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp8_1_fu_1622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_1_reg_2443 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_1_1_fu_1665_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_1_1_reg_2448 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_3_1_fu_1687_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_3_1_reg_2453 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_3_1_fu_1706_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_3_1_reg_2458 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_1_fu_2055_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_41_1_reg_2463 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2061_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_1_reg_2468 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_42_s_fu_1739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_2478 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_1863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_reg_2483 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_fu_1925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_1_reg_2492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal p_offset_1_cast1_fu_1959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_offset_1_cast1_reg_2498 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_addr_1_reg_2503 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_offset_1_cast_fu_1998_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_offset_1_cast_reg_2508 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond4_1_fu_2014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_1_fu_2019_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal k_1_1_fu_2036_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_1_reg_2527 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state128 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_CS_fsm_state72 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state76 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter11 : STD_LOGIC := '0';
    signal image_in_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal image_in_ce0 : STD_LOGIC;
    signal image_in_we0 : STD_LOGIC;
    signal image_in_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal image_in_ce1 : STD_LOGIC;
    signal image_in_we1 : STD_LOGIC;
    signal image_out_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal image_out_ce0 : STD_LOGIC;
    signal image_out_we0 : STD_LOGIC;
    signal image_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_phi_fu_458_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvar_flatten_phi_fu_470_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_phi_fu_481_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_phi_fu_492_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_1_phi_fu_514_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvar_flatten7_phi_fu_526_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_s_phi_fu_537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_s_phi_fu_548_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_1335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_1_fu_1384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_1_fu_1465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_1_fu_1476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_1_fu_1509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_1_fu_1536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_1_fu_1559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_1_fu_1572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_1_fu_1595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_fu_1609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_1_fu_1909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp1_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_1_fu_1920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_1_fu_2031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_pointer2_sum_cast_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_pointer4_sum_cas_fu_1287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_pointer2_sum7_cas_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_pointer4_sum9_ca_fu_1976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_INPUT_r_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_INPUT_r_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_OUTPUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUTPUT_r_WREADY : STD_LOGIC := '0';
    signal offset_fu_212 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_offset_1_fu_1991_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal target_off_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal target_off_3_1_fu_1951_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_1186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_1898_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_641_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal in_pointer2_sum_fu_645_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal exitcond_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_dup_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_mid2_v_fu_725_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp7_fu_739_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_745_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_cast_mid2_fu_731_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_fu_758_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_cast_mid2_v_fu_775_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_cast_mid2_fu_780_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_16_fu_792_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_24_cast_fu_788_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_cast_fu_784_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_cast_fu_815_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_819_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast2_fu_829_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_832_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_cast_fu_838_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_842_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp12_cast_fu_852_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_855_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast_fu_865_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_fu_868_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_cast_fu_874_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_878_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp10_cast_fu_888_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_892_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_cast_fu_902_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_cast_fu_906_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_928_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_fu_920_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_cast_fu_916_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_fu_943_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_cast_cast_fu_949_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_cast_fu_935_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_1_fu_959_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_1_cast_fu_965_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_cast_fu_924_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_2_fu_969_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_cast_fu_939_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_cast_fu_981_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_cast_fu_985_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_2_fu_989_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_1000_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_3_cast_cast_fu_1011_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_cast_fu_1007_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_4_fu_1014_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_s_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_1053_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_1057_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_fu_1043_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast_fu_1069_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1073_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_11_fu_1087_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_1079_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_cast_fu_1093_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_1097_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_1105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_i_cast_fu_1113_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_1065_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_54_i_i_fu_1109_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_55_i_i_fu_1117_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_36_fu_1129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_i_i_fu_1123_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_31_fu_1137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1141_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_1164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_1170_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_40_fu_1191_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_fu_1202_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal target_off_1_fu_1234_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal target_off_1_cast_fu_1239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_target_off_fu_1249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_1278_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal out_pointer4_sum_fu_1282_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_source_off_fu_1297_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal source_off_3_fu_1304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_1330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_cast_fu_1353_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal in_pointer2_sum7_fu_1357_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal exitcond_s_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_1_dup_fu_1415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_1_cast_mid2_v_fu_1437_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp15_fu_1451_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_1_fu_1457_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_1_cast_mid2_fu_1443_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_22_1_fu_1470_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_1_cast_mid2_v_fu_1487_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_1_cast_mid2_fu_1492_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_25_1_fu_1504_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_24_1_cast_fu_1500_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_1_cast_fu_1496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp17_cast_fu_1527_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_1_fu_1531_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast2_19_fu_1541_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp13_fu_1544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp13_cast_fu_1550_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_1_fu_1554_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp18_cast_fu_1564_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_37_1_fu_1567_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast_20_fu_1577_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp14_fu_1580_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp14_cast_fu_1586_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_1_fu_1590_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp16_cast_fu_1600_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_1_fu_1604_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_1_cast_fu_1614_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_1_cast_fu_1618_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_1640_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_1_cast_fu_1632_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_cast_21_fu_1628_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_s_fu_1655_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_cast_cast_22_fu_1661_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_1_cast_fu_1647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_1_1_fu_1671_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_1_1_cast_fu_1677_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_1_cast_fu_1636_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_2_1_fu_1681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_1_cast_fu_1651_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_1_cast1_fu_1693_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_1_cast1_fu_1697_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_2_1_fu_1701_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_1712_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_3_1_cast_cast_fu_1723_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_1_cast_fu_1719_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_4_1_fu_1726_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_6_fu_1743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_3_fu_1765_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_3_fu_1769_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_2_fu_1755_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i1_cast_fu_1781_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_fu_1785_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i1_23_fu_1799_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_1791_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_cast_fu_1805_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_1809_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_cast_fu_1817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_i1_cast_fu_1825_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i1_fu_1777_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_54_i_i1_fu_1821_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_55_i_i1_fu_1829_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_49_fu_1841_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_i_i1_fu_1835_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_46_fu_1849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_1853_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i1_fu_1871_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_11_fu_1876_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_1882_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_49_1_fu_1903_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_46_1_fu_1914_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal target_off_1_1_fu_1930_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_1_fu_1939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal target_off_1_1_cast_fu_1935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_target_off_1_fu_1944_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_1_cast_fu_1967_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal out_pointer4_sum9_fu_1971_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal indvar1_1_cast_fu_2010_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_51_1_fu_2025_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_2042_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_4_cast_fu_1020_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_27_fu_2042_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2048_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_3_cast_cast_fu_1024_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2048_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_1_fu_2055_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_4_1_cast_fu_1732_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_41_1_fu_2055_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2061_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_3_1_cast_cast_fu_1736_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2061_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component sobel_sitodp_32s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_dsqrt_64ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_mul_mul_11sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component sobel_mac_muladd_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component sobel_image_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_image_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_pointer : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_pointer : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_INPUT_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sobel_OUTPUT_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sobel_CONTROL_BUS_s_axi_U : component sobel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_pointer => in_pointer,
        out_pointer => out_pointer);

    sobel_INPUT_r_m_axi_U : component sobel_INPUT_r_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => INPUT_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20800,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RID => INPUT_r_RID,
        I_RUSER => INPUT_r_RUSER,
        I_RRESP => INPUT_r_RRESP,
        I_RLAST => INPUT_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_r_BRESP,
        I_BID => INPUT_r_BID,
        I_BUSER => INPUT_r_BUSER);

    sobel_OUTPUT_r_m_axi_U : component sobel_OUTPUT_r_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RID => OUTPUT_r_RID,
        I_RUSER => OUTPUT_r_RUSER,
        I_RRESP => OUTPUT_r_RRESP,
        I_RLAST => OUTPUT_r_RLAST,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => OUTPUT_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => OUTPUT_r_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => reg_599,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY,
        I_BRESP => OUTPUT_r_BRESP,
        I_BID => OUTPUT_r_BID,
        I_BUSER => OUTPUT_r_BUSER);

    image_in_U : component sobel_image_in
    generic map (
        DataWidth => 8,
        AddressRange => 133120,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_in_address0,
        ce0 => image_in_ce0,
        we0 => image_in_we0,
        d0 => reg_574,
        q0 => image_in_q0,
        address1 => image_in_address1,
        ce1 => image_in_ce1,
        we1 => image_in_we1,
        d1 => reg_574,
        q1 => image_in_q1);

    image_out_U : component sobel_image_out
    generic map (
        DataWidth => 8,
        AddressRange => 132096,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_out_address0,
        ce0 => image_out_ce0,
        we0 => image_out_we0,
        d0 => image_out_d0,
        q0 => image_out_q0);

    sobel_sitodp_32s_bkb_U1 : component sobel_sitodp_32s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_566_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p1);

    sobel_dsqrt_64ns_cud_U2 : component sobel_dsqrt_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => reg_590,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    sobel_mul_mul_11sdEe_U3 : component sobel_mul_mul_11sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_27_fu_2042_p0,
        din1 => tmp_27_fu_2042_p1,
        dout => tmp_27_fu_2042_p2);

    sobel_mac_muladd_eOg_U4 : component sobel_mac_muladd_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_2048_p0,
        din1 => grp_fu_2048_p1,
        din2 => tmp_27_reg_2244,
        dout => grp_fu_2048_p3);

    sobel_mul_mul_11sdEe_U5 : component sobel_mul_mul_11sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_41_1_fu_2055_p0,
        din1 => tmp_41_1_fu_2055_p1,
        dout => tmp_41_1_fu_2055_p2);

    sobel_mac_muladd_eOg_U6 : component sobel_mac_muladd_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_2061_p0,
        din1 => grp_fu_2061_p1,
        din2 => tmp_41_1_reg_2463,
        dout => grp_fu_2061_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_660_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond3_fu_660_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_660_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_677_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3) and not((ap_const_lv1_0 = exitcond_flatten_reg_2129))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_lv1_0 = exitcond4_fu_1319_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_lv1_0 = exitcond4_fu_1319_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_lv1_0 = exitcond4_fu_1319_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_1_fu_1372_p2)))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond3_1_fu_1372_p2))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state72)) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_1_fu_1372_p2))))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not((ap_const_lv1_0 = exitcond_flatten9_fu_1389_p2)))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state76)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3) and not((ap_const_lv1_0 = exitcond_flatten9_reg_2348))))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
                    ap_enable_reg_pp4_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) then 
                    ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_lv1_0 = exitcond4_1_fu_2014_p2)))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state124) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_lv1_0 = exitcond4_1_fu_2014_p2))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state124) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_lv1_0 = exitcond4_1_fu_2014_p2))))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY)))) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state124) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_INPUT_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_logic_0 = ap_sig_ioackin_INPUT_r_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and not((ap_const_logic_0 = ap_sig_ioackin_INPUT_r_ARREADY))))) then 
                    ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = INPUT_r_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and (ap_const_logic_1 = INPUT_r_ARREADY)))) then 
                    ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state124) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY))))) then 
                    ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state61) and (ap_const_logic_1 = OUTPUT_r_AWREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state124) and (ap_const_logic_1 = OUTPUT_r_AWREADY)))) then 
                    ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY)))) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY)))))) then 
                    ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_1 = OUTPUT_r_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_1 = OUTPUT_r_WREADY)))) then 
                    ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                i_reg_477 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                i_reg_477 <= tmp_24_mid2_v_v_reg_2147;
            end if; 
        end if;
    end process;

    i_s_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
                i_s_reg_533 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
                i_s_reg_533 <= tmp_7_1_mid2_v_v_reg_2366;
            end if; 
        end if;
    end process;

    indvar1_1_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0) and (ap_const_lv1_0 = exitcond4_1_fu_2014_p2))) then 
                indvar1_1_reg_555 <= indvar_next1_1_fu_2019_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state124) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then 
                indvar1_1_reg_555 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    indvar1_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond4_fu_1319_p2))) then 
                indvar1_reg_499 <= indvar_next1_fu_1324_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then 
                indvar1_reg_499 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_1_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))))) then 
                indvar_1_reg_510 <= indvar_next_1_reg_2343;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
                indvar_1_reg_510 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
                indvar_flatten7_reg_522 <= ap_const_lv17_0;
            elsif (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
                indvar_flatten7_reg_522 <= indvar_flatten_next8_reg_2352;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                indvar_flatten_reg_466 <= ap_const_lv17_0;
            elsif (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                indvar_flatten_reg_466 <= indvar_flatten_next_reg_2133;
            end if; 
        end if;
    end process;

    indvar_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))))) then 
                indvar_reg_454 <= indvar_next_reg_2124;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                indvar_reg_454 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    j_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                j_reg_488 <= ap_const_lv10_1;
            elsif (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                j_reg_488 <= j_1_reg_2179;
            end if; 
        end if;
    end process;

    j_s_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
                j_s_reg_544 <= ap_const_lv10_1;
            elsif (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
                j_s_reg_544 <= j_1_1_reg_2398;
            end if; 
        end if;
    end process;

    k_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state132) and not((OUTPUT_r_BVALID = ap_const_logic_0)))) then 
                k_reg_442 <= k_1_1_reg_2527;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_442 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten9_reg_2348))) then 
                reg_580 <= image_in_q0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2129))) then 
                reg_580 <= image_in_q1;
            end if; 
        end if;
    end process;

    reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten9_reg_2348)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)))) then 
                reg_585 <= image_in_q1;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2129)) or ((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)))) then 
                reg_585 <= image_in_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state65))) then
                INPUT_addr_1_reg_2333 <= in_pointer2_sum7_cas_fu_1362_p1(32 - 1 downto 0);
                    k_1_s_reg_2322(2 downto 1) <= k_1_s_fu_1340_p2(2 downto 1);
                    tmp_1_1_reg_2328(19 downto 18) <= tmp_1_1_fu_1345_p3(19 downto 18);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_623_p2))) then
                INPUT_addr_reg_2114 <= in_pointer2_sum_cast_fu_650_p1(32 - 1 downto 0);
                    tmp_1_reg_2109(19 downto 17) <= tmp_1_fu_633_p3(19 downto 17);
                tmp_2_reg_2104 <= tmp_2_fu_629_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state123))) then
                OUTPUT_addr_1_reg_2503 <= out_pointer4_sum9_ca_fu_1976_p1(32 - 1 downto 0);
                    p_offset_1_cast1_reg_2498(17 downto 10) <= p_offset_1_cast1_fu_1959_p3(17 downto 10);
                target_off_fu_216 <= target_off_3_1_fu_1951_p3;
                tmp_6_1_reg_2492 <= tmp_6_1_fu_1925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state60))) then
                OUTPUT_addr_reg_2293 <= out_pointer4_sum_cas_fu_1287_p1(32 - 1 downto 0);
                    offset_3_reg_2288(17 downto 10) <= offset_3_fu_1271_p3(17 downto 10);
                or_cond_reg_2273 <= or_cond_fu_1228_p2;
                target_off_3_reg_2278 <= target_off_3_fu_1257_p3;
                tmp_3_reg_2283 <= tmp_3_fu_1265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120 <= exitcond3_reg_2120;
                ap_pipeline_reg_pp0_iter1_indvar_reg_454 <= indvar_reg_454;
                exitcond3_reg_2120 <= exitcond3_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter9_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter10_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter9_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter10_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter9_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter11_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter10_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter10_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129 <= exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter1_j_mid2_reg_2138 <= j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter1_tmp_24_mid2_v_v_reg_2147 <= tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter2_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter1_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter2_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter1_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter3_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter3_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter2_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter3_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter2_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter4_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter3_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter4_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter3_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter4_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter3_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter5_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter4_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter5_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter4_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter5_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter4_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter6_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter5_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter6_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter5_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter6_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter5_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter7_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter6_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter7_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter6_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter7_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter6_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter8_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter7_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter8_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter7_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter8_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter7_tmp_24_mid2_v_v_reg_2147;
                ap_pipeline_reg_pp1_iter9_exitcond_flatten_reg_2129 <= ap_pipeline_reg_pp1_iter8_exitcond_flatten_reg_2129;
                ap_pipeline_reg_pp1_iter9_j_mid2_reg_2138 <= ap_pipeline_reg_pp1_iter8_j_mid2_reg_2138;
                ap_pipeline_reg_pp1_iter9_tmp_24_mid2_v_v_reg_2147 <= ap_pipeline_reg_pp1_iter8_tmp_24_mid2_v_v_reg_2147;
                exitcond_flatten_reg_2129 <= exitcond_flatten_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))))) then
                ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308 <= exitcond4_reg_2308;
                exitcond4_reg_2308 <= exitcond4_fu_1319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339 <= exitcond3_1_reg_2339;
                ap_pipeline_reg_pp3_iter1_indvar_1_reg_510 <= indvar_1_reg_510;
                exitcond3_1_reg_2339 <= exitcond3_1_fu_1372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then
                ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter9_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter10_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter9_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter10_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter9_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter11_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter10_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter10_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348 <= exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter1_j_mid2_17_reg_2357 <= j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter1_tmp_7_1_mid2_v_v_reg_2366 <= tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter2_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter1_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter2_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter1_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter3_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter3_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter2_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter3_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter2_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter4_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter3_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter4_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter3_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter4_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter3_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter5_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter4_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter5_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter4_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter5_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter4_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter6_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter5_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter6_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter5_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter6_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter5_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter7_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter6_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter7_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter6_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter7_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter6_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter8_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter7_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter8_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter7_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter8_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter7_tmp_7_1_mid2_v_v_reg_2366;
                ap_pipeline_reg_pp4_iter9_exitcond_flatten9_reg_2348 <= ap_pipeline_reg_pp4_iter8_exitcond_flatten9_reg_2348;
                ap_pipeline_reg_pp4_iter9_j_mid2_17_reg_2357 <= ap_pipeline_reg_pp4_iter8_j_mid2_17_reg_2357;
                ap_pipeline_reg_pp4_iter9_tmp_7_1_mid2_v_v_reg_2366 <= ap_pipeline_reg_pp4_iter8_tmp_7_1_mid2_v_v_reg_2366;
                exitcond_flatten9_reg_2348 <= exitcond_flatten9_fu_1389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))))) then
                ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513 <= exitcond4_1_reg_2513;
                exitcond4_1_reg_2513 <= exitcond4_1_fu_2014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then
                conv1_1_1_reg_2448 <= conv1_1_1_fu_1665_p2;
                conv2_3_1_reg_2453 <= conv2_3_1_fu_1687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                conv1_1_reg_2229 <= conv1_1_fu_953_p2;
                conv2_3_reg_2234 <= conv2_3_fu_975_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348))) then
                conv1_3_1_reg_2458 <= conv1_3_1_fu_1706_p2;
                tmp_41_1_reg_2463 <= tmp_41_1_fu_2055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129))) then
                conv1_3_reg_2239 <= conv1_3_fu_994_p2;
                tmp_27_reg_2244 <= tmp_27_fu_2042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then
                indvar_flatten_next8_reg_2352 <= indvar_flatten_next8_fu_1395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                indvar_flatten_next_reg_2133 <= indvar_flatten_next_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then
                indvar_next_1_reg_2343 <= indvar_next_1_fu_1378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next_reg_2124 <= indvar_next_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1389_p2))) then
                j_1_1_reg_2398 <= j_1_1_fu_1481_p2;
                tmp_7_1_mid2_v_v_reg_2366 <= tmp_7_1_mid2_v_v_fu_1421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_677_p2))) then
                j_1_reg_2179 <= j_1_fu_769_p2;
                tmp_24_mid2_v_v_reg_2147 <= tmp_24_mid2_v_v_fu_709_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1389_p2))) then
                    j_cast1_18_reg_2383(9 downto 0) <= j_cast1_18_fu_1447_p1(9 downto 0);
                j_mid2_17_reg_2357 <= j_mid2_17_fu_1407_p3;
                    tmp_7_1_mid2_reg_2373(17 downto 10) <= tmp_7_1_mid2_fu_1429_p3(17 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_677_p2))) then
                    j_cast1_reg_2164(9 downto 0) <= j_cast1_fu_735_p1(9 downto 0);
                j_mid2_reg_2138 <= j_mid2_fu_695_p3;
                    tmp_24_mid2_reg_2154(17 downto 10) <= tmp_24_mid2_fu_717_p3(17 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state128))) then
                k_1_1_reg_2527 <= k_1_1_fu_2036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then
                    offset_3_cast_reg_2303(17 downto 10) <= offset_3_cast_fu_1315_p1(17 downto 10);
                    source_off_3_cast_reg_2298(10) <= source_off_3_cast_fu_1311_p1(10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                    offset_cast_reg_2096(17 downto 10) <= offset_cast_fu_619_p1(17 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state124) and not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)))) then
                    offset_fu_212(17 downto 10) <= p_offset_1_fu_1991_p3(17 downto 10);
                    p_offset_1_cast_reg_2508(17 downto 10) <= p_offset_1_cast_fu_1998_p3(17 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten9_reg_2348))) then
                p_1_reg_2468 <= grp_fu_2061_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348))) then
                p_Result_2_reg_2478 <= p_Val2_6_fu_1743_p1(63 downto 63);
                p_Val2_9_reg_2483 <= p_Val2_9_fu_1863_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129))) then
                p_Result_s_reg_2259 <= p_Val2_s_fu_1031_p1(63 downto 63);
                p_Val2_3_reg_2264 <= p_Val2_3_fu_1151_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond_flatten_reg_2129))) then
                p_reg_2249 <= grp_fu_2048_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0)))))) then
                reg_574 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter2_exitcond_flatten_reg_2129)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten9_reg_2348)))) then
                reg_590 <= grp_fu_566_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter10) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter10_exitcond_flatten_reg_2129)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3) and (ap_const_logic_1 = ap_enable_reg_pp4_iter10) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter10_exitcond_flatten9_reg_2348)))) then
                reg_595 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_lv1_0 = exitcond4_reg_2308)) or ((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_enable_reg_pp5_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_lv1_0 = exitcond4_1_reg_2513)))) then
                reg_599 <= image_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage1))) then
                tmp1_reg_2189 <= tmp1_fu_802_p2;
                    tmp4_reg_2194(9 downto 0) <= tmp4_fu_808_p3(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage1))) then
                    tmp21_reg_2413(9 downto 0) <= tmp21_fu_1520_p3(9 downto 0);
                tmp_43_reg_2408 <= tmp_43_fu_1514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then
                tmp8_1_reg_2443 <= tmp8_1_fu_1622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3))) then
                tmp8_reg_2224 <= tmp8_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_7_cast1_reg_2080 <= tmp_7_cast1_fu_604_p1;
                tmp_7_cast_reg_2085 <= tmp_7_cast_fu_608_p1;
                tmp_8_cast_reg_2090 <= tmp_8_cast_fu_612_p1;
            end if;
        end if;
    end process;
    offset_cast_reg_2096(9 downto 0) <= "0000000000";
    offset_cast_reg_2096(18) <= '0';
    tmp_1_reg_2109(16 downto 0) <= "00000000000000000";
    tmp_24_mid2_reg_2154(9 downto 0) <= "0000000000";
    j_cast1_reg_2164(18 downto 10) <= "000000000";
    tmp4_reg_2194(10) <= '1';
    offset_3_reg_2288(9 downto 0) <= "0000000000";
    offset_3_reg_2288(18) <= '0';
    source_off_3_cast_reg_2298(9 downto 0) <= "0000000000";
    source_off_3_cast_reg_2298(31 downto 11) <= "000000000000000000000";
    offset_3_cast_reg_2303(9 downto 0) <= "0000000000";
    offset_3_cast_reg_2303(31 downto 18) <= "00000000000000";
    k_1_s_reg_2322(0) <= '1';
    tmp_1_1_reg_2328(17 downto 0) <= "100000000000000000";
    tmp_7_1_mid2_reg_2373(9 downto 0) <= "0000000000";
    j_cast1_18_reg_2383(18 downto 10) <= "000000000";
    tmp21_reg_2413(10) <= '1';
    p_offset_1_cast1_reg_2498(9 downto 0) <= "0000000000";
    p_offset_1_cast1_reg_2498(31 downto 18) <= "00000000000000";
    p_offset_1_cast_reg_2508(9 downto 0) <= "0000000000";
    p_offset_1_cast_reg_2508(18) <= '0';
    offset_fu_212(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp3_iter1, exitcond3_1_reg_2339, ap_enable_reg_pp0_iter1, exitcond3_reg_2120, ap_enable_reg_pp2_iter2, ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513, INPUT_r_RVALID, OUTPUT_r_BVALID, ap_enable_reg_pp1_iter0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp1_iter10, ap_enable_reg_pp4_iter10, ap_enable_reg_pp2_iter1, ap_sig_ioackin_OUTPUT_r_WREADY, ap_enable_reg_pp5_iter1, exitcond2_fu_623_p2, exitcond3_fu_660_p2, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_677_p2, ap_CS_fsm_pp1_stage1, ap_sig_ioackin_OUTPUT_r_AWREADY, exitcond4_fu_1319_p2, ap_enable_reg_pp2_iter0, exitcond3_1_fu_1372_p2, ap_enable_reg_pp3_iter0, exitcond_flatten9_fu_1389_p2, ap_CS_fsm_pp4_stage1, exitcond4_1_fu_2014_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter11, ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter11, ap_sig_ioackin_INPUT_r_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_623_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_INPUT_r_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond3_fu_660_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond3_fu_660_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_677_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter10))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
            when ap_ST_fsm_pp1_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_1319_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_1319_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_INPUT_r_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (not((OUTPUT_r_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond3_1_fu_1372_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond3_1_fu_1372_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and not((ap_const_lv1_0 = exitcond_flatten9_fu_1389_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state123;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter10))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state123;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
            when ap_ST_fsm_pp4_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state124;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0) and not((ap_const_lv1_0 = exitcond4_1_fu_2014_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0) and not((ap_const_lv1_0 = exitcond4_1_fu_2014_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                if (not((OUTPUT_r_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_ARADDR_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state3, INPUT_addr_reg_2114, INPUT_addr_1_reg_2333, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state66)) then 
                INPUT_r_ARADDR <= INPUT_addr_1_reg_2333;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state3)) then 
                INPUT_r_ARADDR <= INPUT_addr_reg_2114;
            else 
                INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state3, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)))) then 
            INPUT_r_ARVALID <= ap_const_logic_1;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond3_1_reg_2339, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_2120, INPUT_r_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0)))))) then 
            INPUT_r_RREADY <= ap_const_logic_1;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_blk_n_AR_assign_proc : process(m_axi_INPUT_r_ARREADY, ap_CS_fsm_state66, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state66)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            INPUT_r_blk_n_AR <= m_axi_INPUT_r_ARREADY;
        else 
            INPUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_r_blk_n_R_assign_proc : process(m_axi_INPUT_r_RVALID, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond3_1_reg_2339, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_2120)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120)))) then 
            INPUT_r_blk_n_R <= m_axi_INPUT_r_RVALID;
        else 
            INPUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_AWADDR_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state124, OUTPUT_addr_reg_2293, OUTPUT_addr_1_reg_2503, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state124)) then 
                OUTPUT_r_AWADDR <= OUTPUT_addr_1_reg_2503;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state61)) then 
                OUTPUT_r_AWADDR <= OUTPUT_addr_reg_2293;
            else 
                OUTPUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUTPUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_r_AWLEN_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state124, offset_3_cast_fu_1315_p1, p_offset_1_cast1_reg_2498, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state124)) then 
                OUTPUT_r_AWLEN <= p_offset_1_cast1_reg_2498;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state61)) then 
                OUTPUT_r_AWLEN <= offset_3_cast_fu_1315_p1;
            else 
                OUTPUT_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUTPUT_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state124, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state61) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state124) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)))) then 
            OUTPUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state132, OUTPUT_r_BVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state132) and not((OUTPUT_r_BVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state70) and not((OUTPUT_r_BVALID = ap_const_logic_0))))) then 
            OUTPUT_r_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513, ap_reg_ioackin_OUTPUT_r_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY)))) then 
            OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_blk_n_AW_assign_proc : process(m_axi_OUTPUT_r_AWREADY, ap_CS_fsm_state61, ap_CS_fsm_state124)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_1 = ap_CS_fsm_state124)))) then 
            OUTPUT_r_blk_n_AW <= m_axi_OUTPUT_r_AWREADY;
        else 
            OUTPUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_B_assign_proc : process(m_axi_OUTPUT_r_BVALID, ap_CS_fsm_state70, ap_CS_fsm_state132)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state70)) or ((ap_const_lv1_1 = ap_CS_fsm_state132)))) then 
            OUTPUT_r_blk_n_B <= m_axi_OUTPUT_r_BVALID;
        else 
            OUTPUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_W_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_enable_reg_pp2_iter2, ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308)) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513)))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(34 downto 34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state123 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state124 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state128 <= ap_CS_fsm(35 downto 35);
    ap_CS_fsm_state13 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state132 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state60 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state61 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state65 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state66 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state70 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state72 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state76 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_623_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond2_fu_623_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_623_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond2_fu_623_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_INPUT_r_ARREADY_assign_proc : process(INPUT_r_ARREADY, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) then 
            ap_sig_ioackin_INPUT_r_ARREADY <= INPUT_r_ARREADY;
        else 
            ap_sig_ioackin_INPUT_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_r_AWREADY_assign_proc : process(OUTPUT_r_AWREADY, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)) then 
            ap_sig_ioackin_OUTPUT_r_AWREADY <= OUTPUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_r_WREADY_assign_proc : process(OUTPUT_r_WREADY, ap_reg_ioackin_OUTPUT_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY)) then 
            ap_sig_ioackin_OUTPUT_r_WREADY <= OUTPUT_r_WREADY;
        else 
            ap_sig_ioackin_OUTPUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    conv1_1_1_fu_1665_p2 <= std_logic_vector(signed(conv1_cast_cast_22_fu_1661_p1) + signed(tmp4_1_cast_fu_1647_p1));
    conv1_1_fu_953_p2 <= std_logic_vector(signed(conv1_cast_cast_fu_949_p1) + signed(tmp4_cast_fu_935_p1));
    conv1_2_1_fu_1701_p2 <= std_logic_vector(unsigned(conv1_1_1_reg_2448) - unsigned(tmp_27_1_cast1_fu_1693_p1));
    conv1_2_fu_989_p2 <= std_logic_vector(unsigned(conv1_1_reg_2229) - unsigned(tmp_25_cast_fu_981_p1));
        conv1_3_1_cast_cast_fu_1736_p1 <= std_logic_vector(resize(signed(conv1_3_1_reg_2458),22));

    conv1_3_1_fu_1706_p2 <= std_logic_vector(unsigned(tmp_31_1_cast1_fu_1697_p1) + unsigned(conv1_2_1_fu_1701_p2));
        conv1_3_cast_cast_fu_1024_p1 <= std_logic_vector(resize(signed(conv1_3_reg_2239),22));

    conv1_3_fu_994_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_985_p1) + unsigned(conv1_2_fu_989_p2));
        conv1_cast_cast_22_fu_1661_p1 <= std_logic_vector(resize(signed(conv1_s_fu_1655_p2),11));

        conv1_cast_cast_fu_949_p1 <= std_logic_vector(resize(signed(conv1_fu_943_p2),11));

    conv1_fu_943_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_920_p1) - unsigned(conv2_cast_fu_916_p1));
    conv1_s_fu_1655_p2 <= std_logic_vector(unsigned(tmp_17_1_cast_fu_1632_p1) - unsigned(conv2_cast_21_fu_1628_p1));
    conv2_1_1_cast_fu_1677_p1 <= std_logic_vector(resize(unsigned(conv2_1_1_fu_1671_p2),10));
    conv2_1_1_fu_1671_p2 <= std_logic_vector(unsigned(tmp_17_1_cast_fu_1632_p1) + unsigned(conv2_cast_21_fu_1628_p1));
    conv2_1_cast_fu_965_p1 <= std_logic_vector(resize(unsigned(conv2_1_fu_959_p2),10));
    conv2_1_fu_959_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_920_p1) + unsigned(conv2_cast_fu_916_p1));
    conv2_2_1_fu_1681_p2 <= std_logic_vector(unsigned(conv2_1_1_cast_fu_1677_p1) - unsigned(tmp_27_1_cast_fu_1636_p1));
    conv2_2_fu_969_p2 <= std_logic_vector(unsigned(conv2_1_cast_fu_965_p1) - unsigned(tmp_27_cast_fu_924_p1));
        conv2_3_1_cast_cast_fu_1723_p1 <= std_logic_vector(resize(signed(conv2_3_1_reg_2453),11));

    conv2_3_1_fu_1687_p2 <= std_logic_vector(unsigned(conv2_2_1_fu_1681_p2) - unsigned(tmp_31_1_cast_fu_1651_p1));
        conv2_3_cast_cast_fu_1011_p1 <= std_logic_vector(resize(signed(conv2_3_reg_2234),11));

    conv2_3_fu_975_p2 <= std_logic_vector(unsigned(conv2_2_fu_969_p2) - unsigned(tmp_31_cast_fu_939_p1));
        conv2_4_1_cast_fu_1732_p1 <= std_logic_vector(resize(signed(conv2_4_1_fu_1726_p2),22));

    conv2_4_1_fu_1726_p2 <= std_logic_vector(signed(conv2_3_1_cast_cast_fu_1723_p1) + signed(tmp9_1_cast_fu_1719_p1));
        conv2_4_cast_fu_1020_p1 <= std_logic_vector(resize(signed(conv2_4_fu_1014_p2),22));

    conv2_4_fu_1014_p2 <= std_logic_vector(signed(conv2_3_cast_cast_fu_1011_p1) + signed(tmp9_cast_fu_1007_p1));
    conv2_cast_21_fu_1628_p1 <= std_logic_vector(resize(unsigned(reg_585),9));
    conv2_cast_fu_916_p1 <= std_logic_vector(resize(unsigned(reg_585),9));
    exitcond2_fu_623_p2 <= "1" when (k_reg_442 = ap_const_lv4_8) else "0";
    exitcond3_1_fu_1372_p2 <= "1" when (indvar_1_phi_fu_514_p4 = ap_const_lv18_20800) else "0";
    exitcond3_fu_660_p2 <= "1" when (indvar_phi_fu_458_p4 = ap_const_lv18_20800) else "0";
    exitcond4_1_fu_2014_p2 <= "1" when (indvar1_1_cast_fu_2010_p1 = p_offset_1_cast_reg_2508) else "0";
    exitcond4_fu_1319_p2 <= "1" when (indvar1_reg_499 = offset_3_cast_reg_2303) else "0";
    exitcond_flatten9_fu_1389_p2 <= "1" when (indvar_flatten7_phi_fu_526_p4 = ap_const_lv17_1FF00) else "0";
    exitcond_flatten_fu_677_p2 <= "1" when (indvar_flatten_phi_fu_470_p4 = ap_const_lv17_1FF00) else "0";
    exitcond_fu_689_p2 <= "1" when (j_phi_fu_492_p4 = ap_const_lv10_3FF) else "0";
    exitcond_s_fu_1401_p2 <= "1" when (j_s_phi_fu_548_p4 = ap_const_lv10_3FF) else "0";
    grp_fu_2048_p0 <= conv1_3_cast_cast_fu_1024_p1(11 - 1 downto 0);
    grp_fu_2048_p1 <= conv1_3_cast_cast_fu_1024_p1(11 - 1 downto 0);
    grp_fu_2061_p0 <= conv1_3_1_cast_cast_fu_1736_p1(11 - 1 downto 0);
    grp_fu_2061_p1 <= conv1_3_1_cast_cast_fu_1736_p1(11 - 1 downto 0);

    grp_fu_566_p0_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter1, tmp_29_fu_1027_p1, tmp_42_s_fu_1739_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage3) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
            grp_fu_566_p0 <= tmp_42_s_fu_1739_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            grp_fu_566_p0 <= tmp_29_fu_1027_p1;
        else 
            grp_fu_566_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_1_dup_fu_1415_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_s_phi_fu_537_p4));
    i_1_dup_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_phi_fu_481_p4));

    i_phi_fu_481_p4_assign_proc : process(i_reg_477, exitcond_flatten_reg_2129, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_24_mid2_v_v_reg_2147)
    begin
        if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            i_phi_fu_481_p4 <= tmp_24_mid2_v_v_reg_2147;
        else 
            i_phi_fu_481_p4 <= i_reg_477;
        end if; 
    end process;


    i_s_phi_fu_537_p4_assign_proc : process(i_s_reg_533, exitcond_flatten9_reg_2348, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_7_1_mid2_v_v_reg_2366)
    begin
        if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
            i_s_phi_fu_537_p4 <= tmp_7_1_mid2_v_v_reg_2366;
        else 
            i_s_phi_fu_537_p4 <= i_s_reg_533;
        end if; 
    end process;

    icmp1_fu_1892_p2 <= "1" when (signed(tmp_50_fu_1882_p4) > signed(ap_const_lv24_0)) else "0";
    icmp_fu_1180_p2 <= "1" when (signed(tmp_37_fu_1170_p4) > signed(ap_const_lv24_0)) else "0";

    image_in_address0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp4_stage2, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp0_iter2, tmp_4_fu_672_p1, tmp_13_fu_753_p1, tmp_22_fu_824_p1, tmp_24_fu_860_p1, tmp_20_fu_897_p1, tmp_20_1_fu_1465_p1, tmp_26_1_fu_1509_p1, tmp_13_1_fu_1559_p1, tmp_16_1_fu_1595_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
            image_in_address0 <= tmp_16_1_fu_1595_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then 
            image_in_address0 <= tmp_13_1_fu_1559_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage1))) then 
            image_in_address0 <= tmp_26_1_fu_1509_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then 
            image_in_address0 <= tmp_20_1_fu_1465_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3))) then 
            image_in_address0 <= tmp_20_fu_897_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            image_in_address0 <= tmp_24_fu_860_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage1))) then 
            image_in_address0 <= tmp_22_fu_824_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            image_in_address0 <= tmp_13_fu_753_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            image_in_address0 <= tmp_4_fu_672_p1(18 - 1 downto 0);
        else 
            image_in_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_in_address1_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp4_stage2, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp3_iter2, tmp_15_fu_764_p1, tmp_17_fu_797_p1, tmp_9_fu_847_p1, tmp_11_fu_883_p1, tmp_4_1_fu_1384_p1, tmp_23_1_fu_1476_p1, tmp_34_1_fu_1536_p1, tmp_38_1_fu_1572_p1, tmp_30_1_fu_1609_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
            image_in_address1 <= tmp_30_1_fu_1609_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then 
            image_in_address1 <= tmp_38_1_fu_1572_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage1))) then 
            image_in_address1 <= tmp_34_1_fu_1536_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then 
            image_in_address1 <= tmp_23_1_fu_1476_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp3_iter2)) then 
            image_in_address1 <= tmp_4_1_fu_1384_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3))) then 
            image_in_address1 <= tmp_11_fu_883_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            image_in_address1 <= tmp_9_fu_847_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage1))) then 
            image_in_address1 <= tmp_17_fu_797_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            image_in_address1 <= tmp_15_fu_764_p1(18 - 1 downto 0);
        else 
            image_in_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_in_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_2120, INPUT_r_RVALID, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp4_stage2, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage1)) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            image_in_ce0 <= ap_const_logic_1;
        else 
            image_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_in_ce1_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond3_1_reg_2339, INPUT_r_RVALID, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp4_stage2, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage1)) or (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2)))) then 
            image_in_ce1 <= ap_const_logic_1;
        else 
            image_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_in_we0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_2120, INPUT_r_RVALID, ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120, ap_enable_reg_pp0_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond3_reg_2120)))) then 
            image_in_we0 <= ap_const_logic_1;
        else 
            image_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_in_we1_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond3_1_reg_2339, INPUT_r_RVALID, ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339, ap_enable_reg_pp3_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0) and (INPUT_r_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond3_1_reg_2339)))) then 
            image_in_we1 <= ap_const_logic_1;
        else 
            image_in_we1 <= ap_const_logic_0;
        end if; 
    end process;


    image_out_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp1_iter11, ap_enable_reg_pp4_iter11, tmp_41_fu_1197_p1, icmp_fu_1180_p2, tmp_38_fu_1208_p1, tmp_35_fu_1335_p1, tmp_50_1_fu_1909_p1, icmp1_fu_1892_p2, tmp_47_1_fu_1920_p1, tmp_52_1_fu_2031_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0))) then 
            image_out_address0 <= tmp_52_1_fu_2031_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and not((ap_const_lv1_0 = icmp1_fu_1892_p2)))) then 
            image_out_address0 <= tmp_47_1_fu_1920_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and (ap_const_lv1_0 = icmp1_fu_1892_p2))) then 
            image_out_address0 <= tmp_50_1_fu_1909_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            image_out_address0 <= tmp_35_fu_1335_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and not((ap_const_lv1_0 = icmp_fu_1180_p2)))) then 
            image_out_address0 <= tmp_38_fu_1208_p1(18 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and (ap_const_lv1_0 = icmp_fu_1180_p2))) then 
            image_out_address0 <= tmp_41_fu_1197_p1(18 - 1 downto 0);
        else 
            image_out_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_out_ce0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_OUTPUT_r_WREADY, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp1_iter11, ap_enable_reg_pp4_iter11, icmp_fu_1180_p2, icmp1_fu_1892_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond4_reg_2308) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond4_1_reg_2513) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and (ap_const_lv1_0 = icmp_fu_1180_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and not((ap_const_lv1_0 = icmp_fu_1180_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and (ap_const_lv1_0 = icmp1_fu_1892_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and not((ap_const_lv1_0 = icmp1_fu_1892_p2))))) then 
            image_out_ce0 <= ap_const_logic_1;
        else 
            image_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_out_d0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp1_iter11, ap_enable_reg_pp4_iter11, icmp_fu_1180_p2, icmp1_fu_1892_p2, tmp_39_fu_1186_p1, tmp_51_fu_1898_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and (ap_const_lv1_0 = icmp1_fu_1892_p2))) then 
            image_out_d0 <= tmp_51_fu_1898_p1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and not((ap_const_lv1_0 = icmp_fu_1180_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and not((ap_const_lv1_0 = icmp1_fu_1892_p2))))) then 
            image_out_d0 <= ap_const_lv8_FF;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and (ap_const_lv1_0 = icmp_fu_1180_p2))) then 
            image_out_d0 <= tmp_39_fu_1186_p1;
        else 
            image_out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    image_out_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp1_iter11, ap_enable_reg_pp4_iter11, icmp_fu_1180_p2, icmp1_fu_1892_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and (ap_const_lv1_0 = icmp_fu_1180_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter11) and not((ap_const_lv1_0 = icmp_fu_1180_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and (ap_const_lv1_0 = icmp1_fu_1892_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter11) and not((ap_const_lv1_0 = icmp1_fu_1892_p2))))) then 
            image_out_we0 <= ap_const_logic_1;
        else 
            image_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

        in_pointer2_sum7_cas_fu_1362_p1 <= std_logic_vector(resize(signed(in_pointer2_sum7_fu_1357_p2),64));

    in_pointer2_sum7_fu_1357_p2 <= std_logic_vector(unsigned(tmp_2_1_cast_fu_1353_p1) + unsigned(tmp_8_cast_reg_2090));
        in_pointer2_sum_cast_fu_650_p1 <= std_logic_vector(resize(signed(in_pointer2_sum_fu_645_p2),64));

    in_pointer2_sum_fu_645_p2 <= std_logic_vector(signed(tmp_8_cast_reg_2090) + signed(tmp_2_cast_fu_641_p1));
    indvar1_1_cast_fu_2010_p1 <= std_logic_vector(resize(unsigned(indvar1_1_reg_555),19));

    indvar_1_phi_fu_514_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond3_1_reg_2339, indvar_1_reg_510, indvar_next_1_reg_2343)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_1_reg_2339 = ap_const_lv1_0))) then 
            indvar_1_phi_fu_514_p4 <= indvar_next_1_reg_2343;
        else 
            indvar_1_phi_fu_514_p4 <= indvar_1_reg_510;
        end if; 
    end process;


    indvar_flatten7_phi_fu_526_p4_assign_proc : process(indvar_flatten7_reg_522, exitcond_flatten9_reg_2348, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, indvar_flatten_next8_reg_2352)
    begin
        if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
            indvar_flatten7_phi_fu_526_p4 <= indvar_flatten_next8_reg_2352;
        else 
            indvar_flatten7_phi_fu_526_p4 <= indvar_flatten7_reg_522;
        end if; 
    end process;

    indvar_flatten_next8_fu_1395_p2 <= std_logic_vector(unsigned(indvar_flatten7_phi_fu_526_p4) + unsigned(ap_const_lv17_1));
    indvar_flatten_next_fu_683_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_470_p4) + unsigned(ap_const_lv17_1));

    indvar_flatten_phi_fu_470_p4_assign_proc : process(indvar_flatten_reg_466, exitcond_flatten_reg_2129, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, indvar_flatten_next_reg_2133)
    begin
        if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            indvar_flatten_phi_fu_470_p4 <= indvar_flatten_next_reg_2133;
        else 
            indvar_flatten_phi_fu_470_p4 <= indvar_flatten_reg_466;
        end if; 
    end process;

    indvar_next1_1_fu_2019_p2 <= std_logic_vector(unsigned(indvar1_1_reg_555) + unsigned(ap_const_lv18_1));
    indvar_next1_fu_1324_p2 <= std_logic_vector(unsigned(indvar1_reg_499) + unsigned(ap_const_lv32_1));
    indvar_next_1_fu_1378_p2 <= std_logic_vector(unsigned(indvar_1_phi_fu_514_p4) + unsigned(ap_const_lv18_1));
    indvar_next_fu_666_p2 <= std_logic_vector(unsigned(indvar_phi_fu_458_p4) + unsigned(ap_const_lv18_1));

    indvar_phi_fu_458_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_2120, indvar_reg_454, indvar_next_reg_2124)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_2120))) then 
            indvar_phi_fu_458_p4 <= indvar_next_reg_2124;
        else 
            indvar_phi_fu_458_p4 <= indvar_reg_454;
        end if; 
    end process;

    isNeg_1_fu_1791_p3 <= sh_assign_2_fu_1785_p2(11 downto 11);
    isNeg_fu_1079_p3 <= sh_assign_fu_1073_p2(11 downto 11);
    j_1_1_fu_1481_p2 <= std_logic_vector(unsigned(j_mid2_17_fu_1407_p3) + unsigned(ap_const_lv10_1));
    j_1_fu_769_p2 <= std_logic_vector(unsigned(j_mid2_fu_695_p3) + unsigned(ap_const_lv10_1));
    j_cast1_18_fu_1447_p1 <= std_logic_vector(resize(unsigned(j_mid2_17_fu_1407_p3),19));
    j_cast1_fu_735_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_695_p3),19));
    j_cast2_19_fu_1541_p1 <= std_logic_vector(resize(unsigned(j_mid2_17_reg_2357),12));
    j_cast2_fu_829_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_2138),12));
    j_cast_20_fu_1577_p1 <= std_logic_vector(resize(unsigned(j_mid2_17_reg_2357),11));
    j_cast_fu_865_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_2138),11));
    j_mid2_17_fu_1407_p3 <= 
        ap_const_lv10_1 when (exitcond_s_fu_1401_p2(0) = '1') else 
        j_s_phi_fu_548_p4;
    j_mid2_fu_695_p3 <= 
        ap_const_lv10_1 when (exitcond_fu_689_p2(0) = '1') else 
        j_phi_fu_492_p4;

    j_phi_fu_492_p4_assign_proc : process(j_reg_488, exitcond_flatten_reg_2129, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, j_1_reg_2179)
    begin
        if (((ap_const_lv1_0 = exitcond_flatten_reg_2129) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            j_phi_fu_492_p4 <= j_1_reg_2179;
        else 
            j_phi_fu_492_p4 <= j_reg_488;
        end if; 
    end process;


    j_s_phi_fu_548_p4_assign_proc : process(j_s_reg_544, exitcond_flatten9_reg_2348, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, j_1_1_reg_2398)
    begin
        if (((ap_const_lv1_0 = exitcond_flatten9_reg_2348) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1))) then 
            j_s_phi_fu_548_p4 <= j_1_1_reg_2398;
        else 
            j_s_phi_fu_548_p4 <= j_s_reg_544;
        end if; 
    end process;

    k_1_1_fu_2036_p2 <= std_logic_vector(unsigned(k_reg_442) + unsigned(ap_const_lv4_2));
    k_1_s_fu_1340_p2 <= (tmp_2_reg_2104 or ap_const_lv3_1);
    loc_V_1_fu_1053_p1 <= p_Val2_s_fu_1031_p1(52 - 1 downto 0);
    loc_V_2_fu_1755_p4 <= p_Val2_6_fu_1743_p1(62 downto 52);
    loc_V_3_fu_1765_p1 <= p_Val2_6_fu_1743_p1(52 - 1 downto 0);
    loc_V_fu_1043_p4 <= p_Val2_s_fu_1031_p1(62 downto 52);
    offset_3_cast_fu_1315_p1 <= std_logic_vector(resize(unsigned(offset_3_reg_2288),32));
    offset_3_fu_1271_p3 <= 
        ap_const_lv19_20400 when (tmp_3_fu_1265_p2(0) = '1') else 
        offset_cast_reg_2096;
    offset_cast_fu_619_p1 <= std_logic_vector(resize(unsigned(offset_fu_212),19));
    or_cond_fu_1228_p2 <= (tmp_5_fu_1216_p2 and tmp_6_fu_1222_p2);
        out_pointer4_sum9_ca_fu_1976_p1 <= std_logic_vector(resize(signed(out_pointer4_sum9_fu_1971_p2),64));

    out_pointer4_sum9_fu_1971_p2 <= std_logic_vector(unsigned(tmp_45_1_cast_fu_1967_p1) + unsigned(tmp_7_cast1_reg_2080));
        out_pointer4_sum_cas_fu_1287_p1 <= std_logic_vector(resize(signed(out_pointer4_sum_fu_1282_p2),64));

    out_pointer4_sum_fu_1282_p2 <= std_logic_vector(signed(tmp_18_cast_fu_1278_p1) + signed(tmp_7_cast_reg_2085));
    p_Result_1_fu_1057_p3 <= (ap_const_lv1_1 & loc_V_1_fu_1053_p1);
    p_Result_3_fu_1769_p3 <= (ap_const_lv1_1 & loc_V_3_fu_1765_p1);
    p_Val2_11_fu_1876_p3 <= 
        p_Val2_7_i_i1_fu_1871_p2 when (p_Result_2_reg_2478(0) = '1') else 
        p_Val2_9_reg_2483;
    p_Val2_3_fu_1151_p3 <= 
        tmp_31_fu_1137_p1 when (isNeg_fu_1079_p3(0) = '1') else 
        tmp_33_fu_1141_p4;
    p_Val2_5_fu_1164_p3 <= 
        p_Val2_7_i_i_fu_1159_p2 when (p_Result_s_reg_2259(0) = '1') else 
        p_Val2_3_reg_2264;
    p_Val2_6_fu_1743_p1 <= reg_595;
    p_Val2_7_i_i1_fu_1871_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_reg_2483));
    p_Val2_7_i_i_fu_1159_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_3_reg_2264));
    p_Val2_9_fu_1863_p3 <= 
        tmp_46_fu_1849_p1 when (isNeg_1_fu_1791_p3(0) = '1') else 
        tmp_47_fu_1853_p4;
    p_Val2_s_fu_1031_p1 <= reg_595;
    p_offset_1_cast1_fu_1959_p3 <= 
        ap_const_lv32_20400 when (tmp_6_1_fu_1925_p2(0) = '1') else 
        ap_const_lv32_1F800;
    p_offset_1_cast_fu_1998_p3 <= 
        ap_const_lv19_20400 when (tmp_6_1_reg_2492(0) = '1') else 
        ap_const_lv19_1F800;
    p_offset_1_fu_1991_p3 <= 
        ap_const_lv18_20400 when (tmp_6_1_reg_2492(0) = '1') else 
        ap_const_lv18_1F800;
    p_source_off_fu_1297_p3 <= 
        ap_const_lv11_400 when (or_cond_reg_2273(0) = '1') else 
        ap_const_lv11_0;
    p_target_off_1_fu_1944_p3 <= 
        ap_const_lv32_E0400 when (tmp_10_1_fu_1939_p2(0) = '1') else 
        target_off_3_reg_2278;
    p_target_off_fu_1249_p3 <= 
        ap_const_lv32_0 when (tmp_s_fu_1243_p2(0) = '1') else 
        target_off_fu_216;
        sh_assign_1_cast_fu_1105_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_1097_p3),32));

    sh_assign_1_fu_1097_p3 <= 
        tmp_i_i_cast_fu_1093_p1 when (isNeg_fu_1079_p3(0) = '1') else 
        sh_assign_fu_1073_p2;
    sh_assign_2_fu_1785_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i1_cast_fu_1781_p1));
        sh_assign_3_cast_fu_1817_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_1809_p3),32));

    sh_assign_3_fu_1809_p3 <= 
        tmp_i_i1_cast_fu_1805_p1 when (isNeg_1_fu_1791_p3(0) = '1') else 
        sh_assign_2_fu_1785_p2;
    sh_assign_fu_1073_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast_fu_1069_p1));
    source_off_3_cast_fu_1311_p1 <= std_logic_vector(resize(unsigned(source_off_3_fu_1304_p3),32));
    source_off_3_fu_1304_p3 <= 
        p_source_off_fu_1297_p3 when (tmp_3_reg_2283(0) = '1') else 
        ap_const_lv11_400;
    target_off_1_1_cast_fu_1935_p1 <= std_logic_vector(resize(unsigned(target_off_1_1_fu_1930_p2),32));
    target_off_1_1_fu_1930_p2 <= (tmp_1_1_reg_2328 or ap_const_lv20_400);
    target_off_1_cast_fu_1239_p1 <= std_logic_vector(resize(unsigned(target_off_1_fu_1234_p2),32));
    target_off_1_fu_1234_p2 <= (tmp_1_reg_2109 or ap_const_lv20_400);
    target_off_3_1_fu_1951_p3 <= 
        target_off_1_1_cast_fu_1935_p1 when (tmp_6_1_fu_1925_p2(0) = '1') else 
        p_target_off_1_fu_1944_p3;
    target_off_3_fu_1257_p3 <= 
        target_off_1_cast_fu_1239_p1 when (or_cond_fu_1228_p2(0) = '1') else 
        p_target_off_fu_1249_p3;
    tmp10_cast_fu_888_p1 <= std_logic_vector(resize(unsigned(tmp6_fu_868_p2),18));
        tmp11_cast_fu_815_p1 <= std_logic_vector(resize(signed(tmp4_fu_808_p3),18));

    tmp12_cast_fu_852_p1 <= std_logic_vector(resize(unsigned(tmp4_reg_2194),18));
        tmp13_cast_fu_1550_p1 <= std_logic_vector(resize(signed(tmp13_fu_1544_p2),18));

    tmp13_fu_1544_p2 <= std_logic_vector(signed(ap_const_lv12_BFF) + signed(j_cast2_19_fu_1541_p1));
        tmp14_cast_fu_1586_p1 <= std_logic_vector(resize(signed(tmp14_fu_1580_p2),18));

    tmp14_fu_1580_p2 <= std_logic_vector(signed(ap_const_lv11_401) + signed(j_cast_20_fu_1577_p1));
    tmp15_fu_1451_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(j_mid2_17_fu_1407_p3));
    tmp16_cast_fu_1600_p1 <= std_logic_vector(resize(unsigned(tmp14_fu_1580_p2),18));
        tmp17_cast_fu_1527_p1 <= std_logic_vector(resize(signed(tmp21_fu_1520_p3),18));

    tmp18_cast_fu_1564_p1 <= std_logic_vector(resize(unsigned(tmp21_reg_2413),18));
    tmp1_fu_802_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_788_p1) - unsigned(tmp_21_cast_fu_784_p1));
    tmp21_fu_1520_p3 <= (ap_const_lv1_1 & j_mid2_17_reg_2357);
        tmp3_cast_fu_838_p1 <= std_logic_vector(resize(signed(tmp3_fu_832_p2),18));

    tmp3_fu_832_p2 <= std_logic_vector(signed(ap_const_lv12_BFF) + signed(j_cast2_fu_829_p1));
        tmp4_1_cast_fu_1647_p1 <= std_logic_vector(resize(signed(tmp_44_fu_1640_p3),11));

        tmp4_cast_fu_935_p1 <= std_logic_vector(resize(signed(tmp_18_fu_928_p3),11));

    tmp4_fu_808_p3 <= (ap_const_lv1_1 & j_mid2_reg_2138);
        tmp6_cast_fu_874_p1 <= std_logic_vector(resize(signed(tmp6_fu_868_p2),18));

    tmp6_fu_868_p2 <= std_logic_vector(signed(ap_const_lv11_401) + signed(j_cast_fu_865_p1));
    tmp7_fu_739_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(j_mid2_fu_695_p3));
    tmp8_1_fu_1622_p2 <= std_logic_vector(unsigned(tmp_35_1_cast_fu_1614_p1) - unsigned(tmp_39_1_cast_fu_1618_p1));
    tmp8_fu_910_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_902_p1) - unsigned(tmp_39_cast_fu_906_p1));
        tmp9_1_cast_fu_1719_p1 <= std_logic_vector(resize(signed(tmp_45_fu_1712_p3),11));

        tmp9_cast_fu_1007_p1 <= std_logic_vector(resize(signed(tmp_25_fu_1000_p3),11));

    tmp_10_1_fu_1939_p2 <= "1" when (k_1_s_reg_2322 = ap_const_lv3_7) else "0";
    tmp_10_fu_878_p2 <= std_logic_vector(unsigned(tmp_24_mid2_reg_2154) + unsigned(tmp6_cast_fu_874_p1));
    tmp_11_fu_883_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_878_p2),64));
    tmp_12_1_fu_1554_p2 <= std_logic_vector(unsigned(tmp_7_1_mid2_reg_2373) + unsigned(tmp13_cast_fu_1550_p1));
    tmp_12_fu_745_p3 <= (tmp_24_mid2_v_v_fu_709_p3 & tmp7_fu_739_p2);
    tmp_13_1_fu_1559_p1 <= std_logic_vector(resize(unsigned(tmp_12_1_fu_1554_p2),64));
    tmp_13_fu_753_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_745_p3),64));
    tmp_14_fu_758_p2 <= std_logic_vector(unsigned(j_cast1_fu_735_p1) + unsigned(tmp_8_cast_mid2_fu_731_p1));
    tmp_15_1_fu_1590_p2 <= std_logic_vector(unsigned(tmp_7_1_mid2_reg_2373) + unsigned(tmp14_cast_fu_1586_p1));
    tmp_15_fu_764_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_758_p2),64));
    tmp_16_1_fu_1595_p1 <= std_logic_vector(resize(unsigned(tmp_15_1_fu_1590_p2),64));
    tmp_16_fu_792_p2 <= std_logic_vector(unsigned(j_cast1_reg_2164) + unsigned(tmp_9_cast_mid2_fu_780_p1));
    tmp_17_1_cast_fu_1632_p1 <= std_logic_vector(resize(unsigned(image_in_q0),9));
    tmp_17_cast_fu_920_p1 <= std_logic_vector(resize(unsigned(image_in_q1),9));
    tmp_17_fu_797_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_792_p2),64));
        tmp_18_cast_fu_1278_p1 <= std_logic_vector(resize(signed(target_off_3_fu_1257_p3),33));

    tmp_18_fu_928_p3 <= (tmp1_reg_2189 & ap_const_lv1_0);
    tmp_19_1_fu_1457_p3 <= (tmp_7_1_mid2_v_v_fu_1421_p3 & tmp15_fu_1451_p2);
    tmp_19_fu_892_p2 <= std_logic_vector(unsigned(tmp_24_mid2_reg_2154) + unsigned(tmp10_cast_fu_888_p1));
    tmp_1_1_fu_1345_p3 <= (k_1_s_fu_1340_p2 & ap_const_lv17_0);
    tmp_1_fu_633_p3 <= (tmp_2_fu_629_p1 & ap_const_lv17_0);
    tmp_20_1_fu_1465_p1 <= std_logic_vector(resize(unsigned(tmp_19_1_fu_1457_p3),64));
    tmp_20_fu_897_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_892_p2),64));
    tmp_21_1_cast_fu_1496_p1 <= std_logic_vector(resize(unsigned(image_in_q0),9));
    tmp_21_cast_fu_784_p1 <= std_logic_vector(resize(unsigned(image_in_q0),9));
    tmp_21_fu_819_p2 <= std_logic_vector(unsigned(tmp_24_mid2_reg_2154) + unsigned(tmp11_cast_fu_815_p1));
    tmp_22_1_fu_1470_p2 <= std_logic_vector(unsigned(j_cast1_18_fu_1447_p1) + unsigned(tmp_8_1_cast_mid2_fu_1443_p1));
    tmp_22_fu_824_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_819_p2),64));
    tmp_23_1_fu_1476_p1 <= std_logic_vector(resize(unsigned(tmp_22_1_fu_1470_p2),64));
    tmp_23_fu_855_p2 <= std_logic_vector(unsigned(tmp_24_mid2_reg_2154) + unsigned(tmp12_cast_fu_852_p1));
    tmp_24_1_cast_fu_1500_p1 <= std_logic_vector(resize(unsigned(image_in_q1),9));
    tmp_24_cast_fu_788_p1 <= std_logic_vector(resize(unsigned(image_in_q1),9));
    tmp_24_fu_860_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_855_p2),64));
    tmp_24_mid2_fu_717_p3 <= (tmp_24_mid2_v_v_fu_709_p3 & ap_const_lv10_0);
    tmp_24_mid2_v_v_fu_709_p3 <= 
        i_1_dup_fu_703_p2 when (exitcond_fu_689_p2(0) = '1') else 
        i_phi_fu_481_p4;
    tmp_25_1_fu_1504_p2 <= std_logic_vector(unsigned(j_cast1_18_reg_2383) + unsigned(tmp_9_1_cast_mid2_fu_1492_p1));
    tmp_25_cast_fu_981_p1 <= std_logic_vector(resize(unsigned(reg_580),11));
    tmp_25_fu_1000_p3 <= (tmp8_reg_2224 & ap_const_lv1_0);
    tmp_26_1_fu_1509_p1 <= std_logic_vector(resize(unsigned(tmp_25_1_fu_1504_p2),64));
    tmp_27_1_cast1_fu_1693_p1 <= std_logic_vector(resize(unsigned(reg_580),11));
    tmp_27_1_cast_fu_1636_p1 <= std_logic_vector(resize(unsigned(reg_580),10));
    tmp_27_cast_fu_924_p1 <= std_logic_vector(resize(unsigned(reg_580),10));
    tmp_27_fu_2042_p0 <= conv2_4_cast_fu_1020_p1(11 - 1 downto 0);
    tmp_27_fu_2042_p1 <= conv2_4_cast_fu_1020_p1(11 - 1 downto 0);
    tmp_29_1_fu_1604_p2 <= std_logic_vector(unsigned(tmp_7_1_mid2_reg_2373) + unsigned(tmp16_cast_fu_1600_p1));
        tmp_29_fu_1027_p1 <= std_logic_vector(resize(signed(p_reg_2249),32));

    tmp_2_1_cast_fu_1353_p1 <= std_logic_vector(resize(unsigned(tmp_1_1_fu_1345_p3),33));
    tmp_2_cast_fu_641_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_633_p3),33));
    tmp_2_fu_629_p1 <= k_reg_442(3 - 1 downto 0);
    tmp_30_1_fu_1609_p1 <= std_logic_vector(resize(unsigned(tmp_29_1_fu_1604_p2),64));
    tmp_30_cast_fu_985_p1 <= std_logic_vector(resize(unsigned(reg_585),11));
    tmp_31_1_cast1_fu_1697_p1 <= std_logic_vector(resize(unsigned(reg_585),11));
    tmp_31_1_cast_fu_1651_p1 <= std_logic_vector(resize(unsigned(image_in_q1),10));
    tmp_31_cast_fu_939_p1 <= std_logic_vector(resize(unsigned(image_in_q0),10));
    tmp_31_fu_1137_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_1129_p3),32));
    tmp_32_fu_1330_p2 <= std_logic_vector(unsigned(source_off_3_cast_reg_2298) + unsigned(indvar1_reg_499));
    tmp_33_1_fu_1531_p2 <= std_logic_vector(unsigned(tmp_7_1_mid2_reg_2373) + unsigned(tmp17_cast_fu_1527_p1));
    tmp_33_fu_1141_p4 <= tmp_57_i_i_fu_1123_p2(83 downto 52);
    tmp_34_1_fu_1536_p1 <= std_logic_vector(resize(unsigned(tmp_33_1_fu_1531_p2),64));
    tmp_34_fu_1202_p3 <= (ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147 & ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138);
    tmp_35_1_cast_fu_1614_p1 <= std_logic_vector(resize(unsigned(reg_585),9));
    tmp_35_cast_fu_902_p1 <= std_logic_vector(resize(unsigned(reg_585),9));
    tmp_35_fu_1335_p1 <= std_logic_vector(resize(unsigned(tmp_32_fu_1330_p2),64));
    tmp_36_fu_1129_p3 <= tmp_55_i_i_fu_1117_p2(52 downto 52);
    tmp_37_1_fu_1567_p2 <= std_logic_vector(unsigned(tmp_7_1_mid2_reg_2373) + unsigned(tmp18_cast_fu_1564_p1));
    tmp_37_fu_1170_p4 <= p_Val2_5_fu_1164_p3(31 downto 8);
    tmp_38_1_fu_1572_p1 <= std_logic_vector(resize(unsigned(tmp_37_1_fu_1567_p2),64));
    tmp_38_fu_1208_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_1202_p3),64));
    tmp_39_1_cast_fu_1618_p1 <= std_logic_vector(resize(unsigned(image_in_q1),9));
    tmp_39_cast_fu_906_p1 <= std_logic_vector(resize(unsigned(image_in_q0),9));
    tmp_39_fu_1186_p1 <= p_Val2_5_fu_1164_p3(8 - 1 downto 0);
    tmp_3_fu_1265_p2 <= (or_cond_fu_1228_p2 or tmp_s_fu_1243_p2);
    tmp_40_fu_1191_p3 <= (ap_pipeline_reg_pp1_iter11_tmp_24_mid2_v_v_reg_2147 & ap_pipeline_reg_pp1_iter11_j_mid2_reg_2138);
    tmp_41_1_fu_2055_p0 <= conv2_4_1_cast_fu_1732_p1(11 - 1 downto 0);
    tmp_41_1_fu_2055_p1 <= conv2_4_1_cast_fu_1732_p1(11 - 1 downto 0);
    tmp_41_fu_1197_p1 <= std_logic_vector(resize(unsigned(tmp_40_fu_1191_p3),64));
        tmp_42_s_fu_1739_p1 <= std_logic_vector(resize(signed(p_1_reg_2468),32));

    tmp_43_fu_1514_p2 <= std_logic_vector(unsigned(tmp_24_1_cast_fu_1500_p1) - unsigned(tmp_21_1_cast_fu_1496_p1));
    tmp_44_fu_1640_p3 <= (tmp_43_reg_2408 & ap_const_lv1_0);
    tmp_45_1_cast_fu_1967_p1 <= std_logic_vector(resize(unsigned(target_off_3_1_fu_1951_p3),34));
    tmp_45_fu_1712_p3 <= (tmp8_1_reg_2443 & ap_const_lv1_0);
    tmp_46_1_fu_1914_p3 <= (ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366 & ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357);
    tmp_46_fu_1849_p1 <= std_logic_vector(resize(unsigned(tmp_49_fu_1841_p3),32));
    tmp_47_1_fu_1920_p1 <= std_logic_vector(resize(unsigned(tmp_46_1_fu_1914_p3),64));
    tmp_47_fu_1853_p4 <= tmp_57_i_i1_fu_1835_p2(83 downto 52);
    tmp_49_1_fu_1903_p3 <= (ap_pipeline_reg_pp4_iter11_tmp_7_1_mid2_v_v_reg_2366 & ap_pipeline_reg_pp4_iter11_j_mid2_17_reg_2357);
    tmp_49_fu_1841_p3 <= tmp_55_i_i1_fu_1829_p2(52 downto 52);
    tmp_4_1_fu_1384_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp3_iter1_indvar_1_reg_510),64));
    tmp_4_fu_672_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_indvar_reg_454),64));
    tmp_50_1_fu_1909_p1 <= std_logic_vector(resize(unsigned(tmp_49_1_fu_1903_p3),64));
    tmp_50_fu_1882_p4 <= p_Val2_11_fu_1876_p3(31 downto 8);
    tmp_51_1_fu_2025_p2 <= std_logic_vector(unsigned(indvar1_1_reg_555) + unsigned(ap_const_lv18_400));
    tmp_51_fu_1898_p1 <= p_Val2_11_fu_1876_p3(8 - 1 downto 0);
    tmp_52_1_fu_2031_p1 <= std_logic_vector(resize(unsigned(tmp_51_1_fu_2025_p2),64));
    tmp_54_i_i1_cast_fu_1825_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_1817_p1),53));
    tmp_54_i_i1_fu_1821_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_1817_p1),136));
    tmp_54_i_i_cast_fu_1113_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1105_p1),53));
    tmp_54_i_i_fu_1109_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1105_p1),136));
    tmp_55_i_i1_fu_1829_p2 <= std_logic_vector(shift_right(unsigned(p_Result_3_fu_1769_p3),to_integer(unsigned('0' & tmp_54_i_i1_cast_fu_1825_p1(31-1 downto 0)))));
    tmp_55_i_i_fu_1117_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_1057_p3),to_integer(unsigned('0' & tmp_54_i_i_cast_fu_1113_p1(31-1 downto 0)))));
    tmp_57_i_i1_fu_1835_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i1_fu_1777_p1),to_integer(unsigned('0' & tmp_54_i_i1_fu_1821_p1(31-1 downto 0)))));
    tmp_57_i_i_fu_1123_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_1065_p1),to_integer(unsigned('0' & tmp_54_i_i_fu_1109_p1(31-1 downto 0)))));
    tmp_5_fu_1216_p2 <= "0" when (k_reg_442 = ap_const_lv4_0) else "1";
    tmp_6_1_fu_1925_p2 <= "0" when (k_1_s_reg_2322 = ap_const_lv3_7) else "1";
    tmp_6_fu_1222_p2 <= "1" when (unsigned(k_reg_442) < unsigned(ap_const_lv4_7)) else "0";
    tmp_7_1_mid2_fu_1429_p3 <= (tmp_7_1_mid2_v_v_fu_1421_p3 & ap_const_lv10_0);
    tmp_7_1_mid2_v_v_fu_1421_p3 <= 
        i_1_1_dup_fu_1415_p2 when (exitcond_s_fu_1401_p2(0) = '1') else 
        i_s_phi_fu_537_p4;
        tmp_7_cast1_fu_604_p1 <= std_logic_vector(resize(signed(out_pointer),34));

        tmp_7_cast_fu_608_p1 <= std_logic_vector(resize(signed(out_pointer),33));

    tmp_8_1_cast_mid2_fu_1443_p1 <= std_logic_vector(resize(unsigned(tmp_8_1_cast_mid2_v_fu_1437_p2),19));
    tmp_8_1_cast_mid2_v_fu_1437_p2 <= (tmp_7_1_mid2_fu_1429_p3 or ap_const_lv18_1);
        tmp_8_cast_fu_612_p1 <= std_logic_vector(resize(signed(in_pointer),33));

    tmp_8_cast_mid2_fu_731_p1 <= std_logic_vector(resize(unsigned(tmp_8_cast_mid2_v_fu_725_p2),19));
    tmp_8_cast_mid2_v_fu_725_p2 <= (tmp_24_mid2_fu_717_p3 or ap_const_lv18_1);
    tmp_8_fu_842_p2 <= std_logic_vector(unsigned(tmp_24_mid2_reg_2154) + unsigned(tmp3_cast_fu_838_p1));
    tmp_9_1_cast_mid2_fu_1492_p1 <= std_logic_vector(resize(unsigned(tmp_9_1_cast_mid2_v_fu_1487_p2),19));
    tmp_9_1_cast_mid2_v_fu_1487_p2 <= (tmp_7_1_mid2_reg_2373 or ap_const_lv18_3FF);
    tmp_9_cast_mid2_fu_780_p1 <= std_logic_vector(resize(unsigned(tmp_9_cast_mid2_v_fu_775_p2),19));
    tmp_9_cast_mid2_v_fu_775_p2 <= (tmp_24_mid2_reg_2154 or ap_const_lv18_3FF);
    tmp_9_fu_847_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_842_p2),64));
    tmp_i_i1_23_fu_1799_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_fu_1755_p4));
        tmp_i_i1_cast_fu_1805_p1 <= std_logic_vector(resize(signed(tmp_i_i1_23_fu_1799_p2),12));

    tmp_i_i1_fu_1777_p1 <= std_logic_vector(resize(unsigned(p_Result_3_fu_1769_p3),136));
    tmp_i_i_11_fu_1087_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_1043_p4));
        tmp_i_i_cast_fu_1093_p1 <= std_logic_vector(resize(signed(tmp_i_i_11_fu_1087_p2),12));

    tmp_i_i_fu_1065_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_1057_p3),136));
    tmp_i_i_i1_cast_fu_1781_p1 <= std_logic_vector(resize(unsigned(loc_V_2_fu_1755_p4),12));
    tmp_i_i_i_cast_fu_1069_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_1043_p4),12));
    tmp_s_fu_1243_p2 <= "1" when (k_reg_442 = ap_const_lv4_0) else "0";
end behav;
